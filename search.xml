<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>frida hook so</title>
      <link href="frida/frida-hook-so/"/>
      <url>frida/frida-hook-so/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2022-02-18-084552.png" alt="image-20210809134336251"></p><h1 id="frida-env"><a href="#frida-env" class="headerlink" title="frida env"></a>frida env</h1><p><a href="https://github.com/frida/frida-java-bridge/blob/master/lib/env.js">https://github.com/frida/frida-java-bridge/blob/master/lib/env.js</a></p><hr><h1 id="IDA-判断-Thumb-指令集和-Arm-指令集"><a href="#IDA-判断-Thumb-指令集和-Arm-指令集" class="headerlink" title="IDA 判断 Thumb 指令集和 Arm 指令集"></a>IDA 判断 Thumb 指令集和 Arm 指令集</h1><ul><li>  IDA - Options - General - number of opcode bytes - 设置为 4</li><li>  此时查看 IDA VIew 中 opcode 的长度, 如果出现 2 个字节和 4 个字节的, 说明为 thumb 指令集</li><li>  如果都是 4 个字节的, 说明是 arm 指令集;</li><li>  在 Thumb 指令集下, inline hook 的偏移地址需要进行 +1 操作;</li></ul><hr><h1 id="获取所有-JNI-函数函数地址"><a href="#获取所有-JNI-函数函数地址" class="headerlink" title="获取所有 JNI 函数函数地址"></a>获取所有 JNI 函数函数地址</h1><p>通过 hook ArtMethod 的 RegisterNative 函数, 可以监控所有的静态注册和动态注册的 JNI 函数的地址;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">仅在Android 8.1下测试成功，其他版本可能需要重新修改适配</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ArtMethod_PrettyMethod</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readStdString</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((str.readU8() &amp; <span class="number">1</span>) === <span class="number">1</span>) &#123; <span class="comment">// size LSB (=1) indicates if it&#x27;s a long string</span></span><br><span class="line">        <span class="keyword">return</span> str.add(<span class="number">2</span> * Process.pointerSize).readPointer().readUtf8String();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.add(<span class="number">1</span>).readUtf8String();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">attach</span>(<span class="params">addr</span>) </span>&#123;</span><br><span class="line">    Interceptor.attach(addr, &#123;</span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.arg0 = args[<span class="number">0</span>]</span><br><span class="line">        &#125;, </span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span> (<span class="params">retval</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> modulemap = <span class="keyword">new</span> ModuleMap()</span><br><span class="line">            modulemap.update()</span><br><span class="line">            <span class="keyword">var</span> <span class="built_in">module</span> = modulemap.find(retval)</span><br><span class="line">            <span class="keyword">var</span> string = Memory.alloc(<span class="number">0x100</span>)</span><br><span class="line">            ArtMethod_PrettyMethod(string, <span class="built_in">this</span>.arg0, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">module</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;&lt;&#x27;</span> + <span class="built_in">module</span>.name + <span class="string">&#x27;&gt; method_name =&gt;&#x27;</span>, readStdString(string), <span class="string">&#x27;,offset=&gt;&#x27;</span>, ptr(retval).sub(<span class="built_in">module</span>.base), <span class="string">&#x27;,module_name=&gt;&#x27;</span>, <span class="built_in">module</span>.name)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;&lt;anonymous&gt; method_name =&gt;&#x27;</span>, readStdString(string), <span class="string">&#x27;, addr =&gt;&#x27;</span>, ptr(retval))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_RegisterNative</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> libart = Process.findModuleByName(<span class="string">&#x27;libart.so&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> symbols = libart.enumerateSymbols()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; symbols.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (symbols[i].name.indexOf(<span class="string">&#x27;PrettyMethod&#x27;</span>) &gt; -<span class="number">1</span> &amp;&amp; symbols[i].name.indexOf(<span class="string">&#x27;ArtMethod&#x27;</span>) &gt; -<span class="number">1</span> &amp;&amp; symbols[i].name.indexOf(<span class="string">&quot;Eb&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            ArtMethod_PrettyMethod = <span class="keyword">new</span> NativeFunction(symbols[i].address, <span class="string">&quot;void&quot;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;bool&quot;</span>])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (symbols[i].name.indexOf(<span class="string">&#x27;RegisterNative&#x27;</span>) &gt; -<span class="number">1</span> &amp;&amp; symbols[i].name.indexOf(<span class="string">&#x27;ArtMethod&#x27;</span>) &gt; -<span class="number">1</span> &amp;&amp; symbols[i].name.indexOf(<span class="string">&#x27;RuntimeCallbacks&#x27;</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            attach(symbols[i].address)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    hook_RegisterNative()</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><hr><h1 id="枚举内存中的-so-文件"><a href="#枚举内存中的-so-文件" class="headerlink" title="枚举内存中的 so 文件"></a>枚举内存中的 so 文件</h1><p>用于查看目标 module 是否被正常加载, 使用 <code>Process.enumerateModules()</code> 将当前加载的所有 so 文件打印出来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_native</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> modules = Process.enumerateModules();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> modules)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">module</span> = modules[i];</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">module</span>.name);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">module</span>.name.indexOf(<span class="string">&quot;target.so&quot;</span>) &gt; -<span class="number">1</span> )&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">module</span>.base);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取指定-so-文件的基地址"><a href="#获取指定-so-文件的基地址" class="headerlink" title="获取指定 so 文件的基地址"></a>获取指定 so 文件的基地址</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_module</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> baseAddr = Module.findBaseAddress(<span class="string">&quot;libnative-lib.so&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;baseAddr&quot;</span>, baseAddr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取指定-so-文件的函数"><a href="#获取指定-so-文件的函数" class="headerlink" title="获取指定 so 文件的函数"></a>获取指定 so 文件的函数</h1><h2 id="通过导出函数名定位-native-方法"><a href="#通过导出函数名定位-native-方法" class="headerlink" title="通过导出函数名定位 native 方法"></a>通过导出函数名定位 native 方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_func_from_exports</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> add_c_addr = Module.findExportByName(<span class="string">&quot;libnative-lib.so&quot;</span>, <span class="string">&quot;add_c&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;add_c_addr is :&quot;</span>,add_c_addr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过-symbols-符号定位-native-方法"><a href="#通过-symbols-符号定位-native-方法" class="headerlink" title="通过 symbols 符号定位 native 方法"></a>通过 symbols 符号定位 native 方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find_func_from_symbols</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> NewStringUTF_addr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> symbols = Process.findModuleByName(<span class="string">&quot;libart.so&quot;</span>).enumerateSymbols();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> symbols) &#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[i];</span><br><span class="line">        <span class="keyword">if</span> (symbol.name.indexOf(<span class="string">&quot;art&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">            symbol.name.indexOf(<span class="string">&quot;JNI&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">            symbol.name.indexOf(<span class="string">&quot;CheckJNI&quot;</span>) &lt; <span class="number">0</span></span><br><span class="line">        )&#123;</span><br><span class="line">            <span class="keyword">if</span> (symbol.name.indexOf(<span class="string">&quot;NewStringUTF&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;find target symbols&quot;</span>, symbol.name, <span class="string">&quot;address is &quot;</span>, symbol.address);</span><br><span class="line">                NewStringUTF_addr = symbol.address;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;NewStringUTF_addr is &quot;</span>, NewStringUTF_addr);</span><br><span class="line"></span><br><span class="line">    Interceptor.attach(NewStringUTF_addr, &#123;</span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;args0&quot;</span>,args[<span class="number">0</span>])</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;args0&quot;</span>, args[<span class="number">0</span>], hexdump(args[<span class="number">0</span>]));</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;args1&quot;</span>, args[<span class="number">1</span>], hexdump(args[<span class="number">1</span>]));</span><br><span class="line">            <span class="keyword">var</span> env = Java.vm.tryGetEnv();</span><br><span class="line">            <span class="keyword">if</span> (env != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 直接读取 c 里面的 char</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;Memory readCstring is :&quot;</span>, Memory.readCString(args[<span class="number">1</span>]));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;get env error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span> (<span class="params">returnResult</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;result: &quot;</span>, Java.cast(returnResult, Java.use(<span class="string">&quot;java.lang.String&quot;</span>)));</span><br><span class="line">            <span class="keyword">var</span> env = Java.vm.tryGetEnv();</span><br><span class="line">            <span class="keyword">if</span> (env != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> jstring = env.newStringUtf(<span class="string">&quot;修改返回值&quot;</span>);</span><br><span class="line">                returnResult.replace(ptr(jstring));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过地址偏移-inline-hook-任意函数"><a href="#通过地址偏移-inline-hook-任意函数" class="headerlink" title="通过地址偏移 inline-hook 任意函数"></a>通过地址偏移 inline-hook 任意函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// get base address of target so;</span></span><br><span class="line">    <span class="keyword">var</span> libnative_lib_addr = Module.findBaseAddress(<span class="string">&quot;libnative-lib.so&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;base module addr -&gt;&quot;</span>, libnative_lib_addr);</span><br><span class="line">    <span class="keyword">if</span> (libnative_lib_addr)&#123;</span><br><span class="line">        <span class="keyword">var</span> add_addr1 = Module.findExportByName(<span class="string">&quot;libnative-lib.so&quot;</span>, <span class="string">&quot;_Z5r0addii&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> add_addr2 = libnative_lib_addr.add(<span class="number">0x94B2</span> + <span class="number">1</span>); <span class="comment">// 32位需要加1</span></span><br><span class="line">        <span class="built_in">console</span>.log(add_addr1);</span><br><span class="line">        <span class="built_in">console</span>.log(add_addr2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主动调用</span></span><br><span class="line">    <span class="keyword">var</span> add1 = <span class="keyword">new</span> NativeFunction(add_addr1, <span class="string">&quot;int&quot;</span>, [<span class="string">&quot;int&quot;</span>, <span class="string">&quot;int&quot;</span>]);</span><br><span class="line">    <span class="keyword">var</span> add2 = <span class="keyword">new</span> NativeFunction(add_addr2, <span class="string">&quot;int&quot;</span>, [<span class="string">&quot;int&quot;</span>, <span class="string">&quot;int&quot;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;add1 result is -&gt;&quot;</span> + add1(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;add2 result is -&gt;&quot;</span> + add2(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">base module addr -&gt; 0xd430b000</span></span><br><span class="line"><span class="comment">0xd43144b3</span></span><br><span class="line"><span class="comment">0xd43144b3</span></span><br><span class="line"><span class="comment">add1 result is -&gt;30</span></span><br><span class="line"><span class="comment">add2 result is -&gt;30</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="通过-Intercept-拦截器打印-native-方法参数和返回值-并修改返回值"><a href="#通过-Intercept-拦截器打印-native-方法参数和返回值-并修改返回值" class="headerlink" title="通过 Intercept 拦截器打印 native 方法参数和返回值, 并修改返回值"></a>通过 Intercept 拦截器打印 native 方法参数和返回值, 并修改返回值</h1><ul><li>  <code>onEnter</code>: 函数(args) : 回调函数, 给定一个参数 args, 用于读取或者写入参数作为 <code>NativePointer</code> 对象的指针;</li><li>  <code>onLeave</code>: 函数(retval) : 回调函数给定一个参数 retval, 该参数是包含原始返回值的 NativePointer 派生对象; 可以调用 <code>retval.replace(1234)</code> 以整数 1234 替换返回值, 或者调用<code>retval.replace(ptr(&quot;0x1234&quot;))</code> 以替换为指针;</li><li>  注意: <code>retval</code> 对象会在 <code>onLeave</code> 调用中回收, 因此不要将其存储在回调之外使用, 如果需要存储包含的值, 需要制作深拷贝, 如 <code>ptr(retval.toString())</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find_func_from_exports</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> add_c_addr = Module.findExportByName(<span class="string">&quot;libnative-lib.so&quot;</span>, <span class="string">&quot;add_c&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;add_c_addr is :&quot;</span>,add_c_addr);</span><br><span class="line">    <span class="comment">// 添加拦截器</span></span><br><span class="line">    Interceptor.attach(add_c_addr,&#123;</span><br><span class="line">        <span class="comment">// 打印入参</span></span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;add_c called&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;arg1:&quot;</span>,args[<span class="number">0</span>].toInt32());</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;arg2&quot;</span>, args[<span class="number">1</span>].toInt32());</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 打印返回值</span></span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span> (<span class="params">returnValue</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;add_c result is :&quot;</span>, returnValue.toInt32());</span><br><span class="line">            <span class="comment">// 修改返回值</span></span><br><span class="line">            returnValue.replace(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="通过-Intercept-拦截器替换原方法"><a href="#通过-Intercept-拦截器替换原方法" class="headerlink" title="通过 Intercept 拦截器替换原方法"></a>通过 Intercept 拦截器替换原方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">frida_Interceptor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="comment">//这个c_getSum方法有两个int参数、返回结果为两个参数相加</span></span><br><span class="line">       <span class="comment">//这里用NativeFunction函数自己定义了一个c_getSum函数</span></span><br><span class="line">       <span class="keyword">var</span> add_method = <span class="keyword">new</span> NativeFunction(Module.findExportByName(<span class="string">&#x27;libhello.so&#x27;</span>, <span class="string">&#x27;c_getSum&#x27;</span>), </span><br><span class="line">       <span class="string">&#x27;int&#x27;</span>,[<span class="string">&#x27;int&#x27;</span>,<span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line">       <span class="comment">//输出结果 那结果肯定就是 3</span></span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&quot;result:&quot;</span>,add_method(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">       <span class="comment">//这里对原函数的功能进行替换实现</span></span><br><span class="line">       Interceptor.replace(add_method, <span class="keyword">new</span> NativeCallback(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">           <span class="comment">//h不论是什么参数都返回123</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">       &#125;, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]));</span><br><span class="line">       <span class="comment">//再次调用 则返回123</span></span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&quot;result:&quot;</span>,add_method(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="inline-hook"><a href="#inline-hook" class="headerlink" title="inline hook"></a>inline hook</h1><p>通俗点说, inline hook就是通过内存地址, 进行 hook;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inline_hook</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> libnative_lib_addr = Module.findBaseAddress(<span class="string">&quot;libnative-lib.so&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (libnative_lib_addr) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;libnative_lib_addr:&quot;</span>, libnative_lib_addr);</span><br><span class="line">        <span class="keyword">var</span> addr_101F4 = libnative_lib_addr.add(<span class="number">0x102BC</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;addr_101F4:&quot;</span>, addr_101F4);</span><br><span class="line"></span><br><span class="line">        Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            Interceptor.attach(addr_101F4, &#123;</span><br><span class="line">                onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;addr_101F4 OnEnter :&quot;</span>, <span class="built_in">this</span>.context.PC, </span><br><span class="line">                                <span class="built_in">this</span>.context.x1, <span class="built_in">this</span>.context.x5, </span><br><span class="line">                                <span class="built_in">this</span>.context.x10);</span><br><span class="line">                &#125;,</span><br><span class="line">                onLeave: <span class="function"><span class="keyword">function</span> (<span class="params">retval</span>) </span>&#123;</span><br><span class="line">                     <span class="built_in">console</span>.log(<span class="string">&quot;retval is :&quot;</span>, retval) </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="so-层方法注册到-js-中-主动调用"><a href="#so-层方法注册到-js-中-主动调用" class="headerlink" title="so 层方法注册到 js 中, 主动调用"></a>so 层方法注册到 js 中, 主动调用</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new NativeFunction(address, returnType, argTypes[, options])</span><br></pre></td></tr></table></figure><ul><li>  <code>address</code> : 函数地址</li><li>  <code>returnType</code> : 指定返回类型</li><li>  <code>argTypes</code> : 数组指定参数类型</li><li>  类型可选: void, pointer, int, uint, long, ulong, char, uchar, float, double, int8, uint8, int16, int32, uint32, int64, uint64; 参照函数所需的 type 来定义即可;</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invoke_native_func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> baseAddr = Module.findBaseAddress(<span class="string">&quot;libnative-lib.so&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;baseAddr&quot;</span>, baseAddr);</span><br><span class="line">    <span class="keyword">var</span> offset = <span class="number">0x0000A28C</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> add_c_addr = baseAddr.add(offset);</span><br><span class="line">    <span class="keyword">var</span> add_c_func = <span class="keyword">new</span> NativeFunction(add_c_addr, <span class="string">&quot;int&quot;</span>, [<span class="string">&quot;int&quot;</span>,<span class="string">&quot;int&quot;</span>]);</span><br><span class="line">    <span class="keyword">var</span> result = add_c_func(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line">Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取 so 文件基地址</span></span><br><span class="line">    <span class="keyword">var</span> base = Module.findBaseAddress(<span class="string">&quot;libnative-lib.so&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取目标函数偏移</span></span><br><span class="line">    <span class="keyword">var</span> sub_834_addr = base.add(<span class="number">0x835</span>) <span class="comment">// thumb 需要 +1</span></span><br><span class="line">    <span class="comment">// 使用 new NativeFunction 将函数注册到 js</span></span><br><span class="line">    <span class="keyword">var</span> sub_834 = <span class="keyword">new</span> NativeFunction(sub_834_addr, <span class="string">&#x27;pointer&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>]);</span><br><span class="line">    <span class="comment">// 开辟内存, 创建入参</span></span><br><span class="line">    <span class="keyword">var</span> arg0 = Memory.alloc(<span class="number">10</span>);</span><br><span class="line">    ptr(arg0).writeUtf8String(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> result = sub_834(arg0);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;result is :&quot;</span>, hexdump(result));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="hook-libart-中的-jni-方法"><a href="#hook-libart-中的-jni-方法" class="headerlink" title="hook libart 中的 jni 方法"></a>hook libart 中的 jni 方法</h1><p><code>jni</code> 全部定在在 <code>/system/lib(64)/libart.so</code> 文件中, 通过枚举 <code>symbols</code> 筛选出指定的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_libart</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> GetStringUTFChars_addr = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// jni 系统函数都在 libart.so 中</span></span><br><span class="line">    <span class="keyword">var</span> module_libart = Process.findModuleByName(<span class="string">&quot;libart.so&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> symbols = module_libart.enumerateSymbols();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; symbols.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> name = symbols[i].name;</span><br><span class="line">        <span class="keyword">if</span> ((name.indexOf(<span class="string">&quot;JNI&quot;</span>) &gt;= <span class="number">0</span>) </span><br><span class="line">            &amp;&amp; (name.indexOf(<span class="string">&quot;CheckJNI&quot;</span>) == -<span class="number">1</span>) </span><br><span class="line">            &amp;&amp; (name.indexOf(<span class="string">&quot;art&quot;</span>) &gt;= <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (name.indexOf(<span class="string">&quot;GetStringUTFChars&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(name);</span><br><span class="line">                <span class="comment">// 获取到指定 jni 方法地址</span></span><br><span class="line">                GetStringUTFChars_addr = symbols[i].address;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Interceptor.attach(GetStringUTFChars_addr, &#123;</span><br><span class="line">            onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line">                <span class="comment">// console.log(&quot;args[0] is : &quot;, args[0]);</span></span><br><span class="line">                <span class="comment">// console.log(&quot;args[1] is : &quot;, args[1]);</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;native args[1] is :&quot;</span>,Java.vm.getEnv().getStringUtfChars(args[<span class="number">1</span>],<span class="literal">null</span>).readCString());</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;GetStringUTFChars onEnter called from:\n&#x27;</span> +</span><br><span class="line">                    Thread.backtrace(<span class="built_in">this</span>.context, Backtracer.FUZZY)</span><br><span class="line">                    .map(DebugSymbol.fromAddress).join(<span class="string">&#x27;\n&#x27;</span>) + <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">                <span class="comment">// console.log(&quot;native args[1] is :&quot;, Java.cast(args[1], Java.use(&quot;java.lang.String&quot;)));</span></span><br><span class="line">                <span class="comment">// console.log(&quot;native args[1] is :&quot;, Memory.readCString(Java.vm.getEnv().getStringUtfChars(args[1],null)));</span></span><br><span class="line">            &#125;, <span class="attr">onLeave</span>: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>)</span>&#123;</span><br><span class="line">                <span class="comment">// retval const char*</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;GetStringUTFChars onLeave : &quot;</span>, ptr(retval).readCString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="hook-libc-中的系统方法"><a href="#hook-libc-中的系统方法" class="headerlink" title="hook libc 中的系统方法"></a>hook libc 中的系统方法</h1><p><code>/system/lib(64)/libc.so</code> 导出的符号没有进行 <code>namemanline</code> , 直接过滤筛选即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hook libc.so</span></span><br><span class="line"><span class="keyword">var</span> pthread_create_addr = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(JSON.stringify(Process.enumerateModules())); </span></span><br><span class="line"><span class="comment">// Process.enumerateModules() 枚举加载的so文件</span></span><br><span class="line"><span class="keyword">var</span> symbols = Process.findModuleByName(<span class="string">&quot;libc.so&quot;</span>).enumerateSymbols();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; symbols.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (symbols[i].name === <span class="string">&quot;pthread_create&quot;</span>)&#123;</span><br><span class="line">        <span class="comment">// console.log(&quot;symbols name is -&gt; &quot; + symbols[i].name);</span></span><br><span class="line">        <span class="comment">// console.log(&quot;symbols address is -&gt; &quot; + symbols[i].address);</span></span><br><span class="line">        pthread_create_addr = symbols[i].address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Interceptor.attach(pthread_create_addr,&#123;</span><br><span class="line">    onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;args is -&gt;&quot;</span> + args[<span class="number">0</span>], args[<span class="number">1</span>], args[<span class="number">2</span>],args[<span class="number">3</span>]);</span><br><span class="line">    &#125;,</span><br><span class="line">    onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(retval);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>libc.so</code> 中方法替换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hook 检测frida 的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// var exports = Process.findModuleByName(&quot;libnative-lib.so&quot;).enumerateExports(); 导出</span></span><br><span class="line">    <span class="comment">// var imports = Process.findModuleByName(&quot;libnative-lib.so&quot;).enumerateImports(); 导入</span></span><br><span class="line">    <span class="comment">// var symbols = Process.findModuleByName(&quot;libnative-lib.so&quot;).enumerateSymbols(); 符号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> pthread_create_addr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> symbols = Process.getModuleByName(<span class="string">&quot;libc.so&quot;</span>).enumerateSymbols();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; symbols.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[i];</span><br><span class="line">        <span class="keyword">if</span> (symbol.name === <span class="string">&quot;pthread_create&quot;</span>) &#123;</span><br><span class="line">            pthread_create_addr = symbol.address;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;pthread_create name is -&gt;&quot;</span>, symbol.name);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;pthread_create address is -&gt;&quot;</span>, pthread_create_addr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 定义方法 之后主动调用的时候使用</span></span><br><span class="line">        <span class="keyword">var</span> pthread_create = <span class="keyword">new</span> NativeFunction(pthread_create_addr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>,<span class="string">&#x27;pointer&#x27;</span>,<span class="string">&#x27;pointer&#x27;</span>])</span><br><span class="line">        Interceptor.replace(pthread_create_addr,<span class="keyword">new</span> NativeCallback(<span class="function"><span class="keyword">function</span> (<span class="params">a0, a1, a2, a3</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">var</span> detect_frida_loop = Module.findExportByName(<span class="string">&quot;libnative-lib.so&quot;</span>, <span class="string">&quot;_Z17detect_frida_loopPv&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;a0,a1,a2,a3 -&gt;&quot;</span>,a0,a1,a2,a3);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">String</span>(a2) === <span class="built_in">String</span>(detect_frida_loop)) &#123;</span><br><span class="line">                result = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;阻止frida反调试启动&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result = pthread_create(a0,a1,a2,a3);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;正常启动&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>,<span class="string">&#x27;pointer&#x27;</span>,<span class="string">&#x27;pointer&#x27;</span>]));</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="hook-native-调用栈"><a href="#hook-native-调用栈" class="headerlink" title="hook native 调用栈"></a>hook native 调用栈</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Interceptor.attach(f, &#123;</span><br><span class="line">  onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;RegisterNatives called from:\n&#x27;</span> +</span><br><span class="line">        Thread.backtrace(<span class="built_in">this</span>.context, Backtracer.ACCURATE)</span><br><span class="line">        .map(DebugSymbol.fromAddress).join(<span class="string">&#x27;\n&#x27;</span>) + <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h1 id="jnitrace"><a href="#jnitrace" class="headerlink" title="jnitrace"></a>jnitrace</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>jnitrace</code>: <a href="https://github.com/chame1eon/jnitrace">https://github.com/chame1eon/jnitrace</a></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python` : `pip install jnitrace</span><br></pre></td></tr></table></figure><h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><p><code>ndk</code> 开发是没有办法脱离 <code>[libc.so](http://libc.so)</code> 和 <code>[libart.so](http://libart.so)</code> 进行开发, 所以只要降维打击, 通过 <code>trace</code> 的方式就可以监控到 <code>so</code> 层</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2022-02-18-084549.jpg" alt="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2020-09-07-032605.jpg"></p><h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jnitrace [options] -l libname packagename</span><br></pre></td></tr></table></figure><p>例如: <code>jnitrace -l [libnative-lib.so](http://libnative-lib.so) com.example.myapplication</code></p><h3 id="必要参数"><a href="#必要参数" class="headerlink" title="必要参数"></a><strong>必要参数</strong></h3><ul><li>  <code>-l libname</code> : 指定要<code>trace</code>的<code>.so</code>文件, 可以同时<code>trace</code>多个<code>.so</code>文件, 直接使用 <code>*</code>来<code>trace</code>所有的<code>.so</code>文件; 如: <code>-l libnative-lib.so -l libanother-lib.so</code> or <code>-l *</code></li><li>  <code>packagename</code> : 指定要<code>trace</code>的<code>package name</code></li></ul><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a><strong>可选参数</strong></h3><ul><li>  <code>-m</code>: 指定是<code>spawn</code>还是<code>attach</code></li><li>  <code>-b</code>: 指定是<code>fuzzy</code>还是<code>accurate</code></li><li>  <code>-i &lt;regex&gt;</code>: 指定一个正则表达式来过滤出方法名, 例如: <code>-i Get -i RegisterNatives</code> 就只会打印出名字里包含<code>Get</code>或者<code>RegisterNatives</code>的<code>JNI methods</code></li><li>  <code>-e &lt;regex&gt;</code>和<code>i</code>相反，同样通过正则表达式来过滤，但这次会将指定的内容忽略掉</li><li>  <code>-I &lt;string&gt;</code>trace导出的方法，jnitrace认为导出的函数应该是从Java端能够直接调用的函数，所以可以包括使用RegisterNatives来注册的函数，例如<code>I stringFromJNI -I nativeMethod([B)V</code>，就包括导出名里有stringFromJNI，以及使用RegisterNames来注册，并带有nativeMethod([B)V签名的函数。</li><li>  <code>-o path/output.json</code>，导出输出到文件里。</li><li>  <code>-p path/to/script.js</code>，用于在加载jnitrace脚本之前将指定路径的Frida脚本加载到目标进程中，这可以用于在jnitrace启动之前对抗反调试。</li><li>  <code>-a path/to/script.js</code>，用于在加载jnitrace脚本之后将指定路径的Frida脚本加载到目标进程中</li><li>  <code>-ignore-env</code>，不打印所有的JNIEnv函数</li><li>  <code>-ignore-vm</code>，不打印所有的JavaVM函数</li></ul><h3 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h3><p>默认使用 <code>spawn</code> 启动, 可以通过 <code>-m attach</code> 设置通过 <code>attach</code> 启动</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jnitrace -m attach -l[libnative-lib.so](http://libnative-lib.so) com.kevin.demoso1</span><br></pre></td></tr></table></figure><h3 id="设置回溯器"><a href="#设置回溯器" class="headerlink" title="设置回溯器"></a>设置回溯器</h3><p>默认情况下使用 <code>accurate</code>的精确模式来进行回溯, 可以通过 <code>-b fuzzy</code> 修改为模糊模式</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jnitrace -l [libnative-lib.so](http://libnative-lib.so) -b fuzzy com.kevin.demoso1</span><br></pre></td></tr></table></figure><h3 id="监控指定规则的方法"><a href="#监控指定规则的方法" class="headerlink" title="监控指定规则的方法"></a>监控指定规则的方法</h3><p>用于指定应该跟踪的方法名, 该选项可以多次提供;</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jnitrace -l libnative-lib.so -i RegisterNatives com.kevin.demoso1</span><br></pre></td></tr></table></figure><p>只过滤出<code>RegisterNatives</code>相关的内容</p><h3 id="忽略指定规则的方法"><a href="#忽略指定规则的方法" class="headerlink" title="忽略指定规则的方法"></a><strong>忽略指定规则的方法</strong></h3><p>用于指定在跟踪中应被忽略的方法名, 这个选项可以被多次提供;</p><p>忽略以<code>Find</code>开头的所有方法;</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jnitrace -l libnative-lib.so -e ^Find com.kevin.demoso</span><br></pre></td></tr></table></figure><h2 id="jnitace-计算偏移地址"><a href="#jnitace-计算偏移地址" class="headerlink" title="jnitace 计算偏移地址"></a>jnitace 计算偏移地址</h2><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2022-02-18-084555.png" alt="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2020-09-07-062032.png"></p><p><code>0x8e4f3b1</code> 是方法 <code>initSN</code> 方法的绝对地址</p><p><code>0xd8e4e000</code> 是 <code>[libmyjni.so](http://libmyjni.so)</code> 基地址</p><p>使用使用 <code>initSN()V</code>的绝对地址 <code>0xd8e4f3b1</code> 减去 <code>[libmyjni.so](http://libmyjni.so)</code> 的基地址 <code>0xd8e4e000</code> , 得到偏移 <code>0x13B1</code></p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2022-02-18-084551.png" alt="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2020-09-07-070337.png"></p><p><code>g</code> 进行跳转到 <code>0x13B1</code> 即可进入方法</p><h1 id="frida-trace"><a href="#frida-trace" class="headerlink" title="frida trace"></a>frida trace</h1><p>文档地址: <a href="https://frida.re/docs/frida-trace/">https://frida.re/docs/frida-trace/</a></p><h2 id="options"><a href="#options" class="headerlink" title="options"></a>options</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Usage: frida-trace [options] target</span><br><span class="line"></span><br><span class="line"> Options:</span><br><span class="line">   --version             show program&#39;s version number and exit</span><br><span class="line">   -h, --help            show this help message and exit</span><br><span class="line">   -D ID, --device&#x3D;ID    connect to device with the given ID</span><br><span class="line">   -U, --usb             connect to USB device</span><br><span class="line">   -R, --remote          connect to remote frida-server</span><br><span class="line">   -H HOST, --host&#x3D;HOST  connect to remote frida-server on HOST</span><br><span class="line">   -f FILE, --file&#x3D;FILE  spawn FILE</span><br><span class="line">   -F, --attach-frontmost     attach to frontmost application</span><br><span class="line">   -n NAME, --attach-name&#x3D;NAME     attach to NAME</span><br><span class="line">   -p PID, --attach-pid&#x3D;PID     attach to PID</span><br><span class="line">   --stdio&#x3D;inherit|pipe      stdio behavior when spawning (defaults to “inherit”)</span><br><span class="line">   --runtime&#x3D;duk|v8          script runtime to use (defaults to “duk”)</span><br><span class="line">   --debug                   enable the Node.js compatible script debugger</span><br><span class="line">   -I MODULE, --include-module&#x3D;MODULE       include MODULE</span><br><span class="line">   -X MODULE, --exclude-module&#x3D;MODULE       exclude MODULE</span><br><span class="line">   -i FUNCTION, --include&#x3D;FUNCTION    include FUNCTION</span><br><span class="line">   -x FUNCTION, --exclude&#x3D;FUNCTION   exclude FUNCTION</span><br><span class="line">   -a MODULE!OFFSET, --add&#x3D;MODULE!OFFSET    add MODULE!OFFSET</span><br><span class="line">   -T, --include-imports    include program&#39;s imports</span><br><span class="line">   -t MODULE, --include-module-imports&#x3D;MODULE      include MODULE imports</span><br><span class="line">   -m OBJC_METHOD, --include-objc-method&#x3D;OBJC_METHOD    include OBJC_METHOD</span><br><span class="line">   -M OBJC_METHOD, --exclude-objc-method&#x3D;OBJC_METHOD    exclude OBJC_METHOD</span><br><span class="line">   -s DEBUG_SYMBOL, --include-debug-symbol&#x3D;DEBUG_SYMBOL    include DEBUG_SYMBOL</span><br><span class="line">   -q, --quiet           do not format output messages</span><br><span class="line">   -d, --decorate        Add module name to generated onEnter log statement</span><br><span class="line">   -o OUTPUT, --output&#x3D;OUTPUT    dump messages to file</span><br></pre></td></tr></table></figure><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-trace [options] packagename</span><br></pre></td></tr></table></figure><h3 id="启动模式"><a href="#启动模式" class="headerlink" title="启动模式"></a>启动模式</h3><p>默认使用 <code>attach</code> 模式, 可以指定 <code>-f packageName</code> 使用 <code>spawn</code> 模式启动</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-trace -U -i strcmp -f com.gdufs.xman</span><br></pre></td></tr></table></figure><h3 id="文件输出"><a href="#文件输出" class="headerlink" title="文件输出"></a>文件输出</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-trace -U -i &quot;strcmp&quot; -f com.gdufs.xman -o xman.json</span><br></pre></td></tr></table></figure><p><code>-o filepath</code> 指定输出的文件路径, 方便内容过多时进行查看</p><h3 id="trace-任意-function"><a href="#trace-任意-function" class="headerlink" title="trace 任意 function"></a>trace 任意 function</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-trace -U -i &quot;strcmp&quot; com.example.demoso1</span><br></pre></td></tr></table></figure><h3 id="trace-任意-module"><a href="#trace-任意-module" class="headerlink" title="trace 任意 module"></a>trace 任意 module</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-trace -U -I &quot;libnative-lib.so&quot; com.example.demoso1</span><br></pre></td></tr></table></figure><h3 id="根据地址进行-trace"><a href="#根据地址进行-trace" class="headerlink" title="根据地址进行 trace"></a>根据地址进行 trace</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-trace -U -a &quot;libnative-lib.so!0x9281&quot; com.example.demoso1</span><br></pre></td></tr></table></figure><h2 id="批量-trace"><a href="#批量-trace" class="headerlink" title="批量 trace"></a>批量 trace</h2><p>源码地址: <a href="https://github.com/Pr0214/trace_natives">https://github.com/Pr0214/trace_natives</a></p><p>ps: 需要切换到 frida14 版本</p><p>1.将traceNatives.py丢进IDA plugins目录中</p><ul><li>  在ida 的python console中运行如下命令即可找到plugins目录：<code>os.path.join(idaapi.get_user_idadir(), &quot;plugins&quot;)</code></li></ul><p>2.IDA中，Edit-Plugins-traceNatives –&gt;  IDA输出窗口就会显示如下字眼：<strong>使用方法如下： frida-trace -UF -O C:\Users\Lenovo\Desktop\2021\mt\libmtguard.txt</strong></p><hr><h1 id="frida-hook-libart"><a href="#frida-hook-libart" class="headerlink" title="frida-hook-libart"></a>frida-hook-libart</h1><p>下载地址: <a href="https://github.com/lasting-yang/frida_hook_libart">https://github.com/lasting-yang/frida_hook_libart</a></p><h2 id="hook-art"><a href="#hook-art" class="headerlink" title="hook art"></a>hook art</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U --no-pause -f package_name -l hook_art.js</span><br></pre></td></tr></table></figure><h2 id="hook-RegisterNatives"><a href="#hook-RegisterNatives" class="headerlink" title="hook_RegisterNatives"></a>hook_RegisterNatives</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U --no-pause -f package_name -l hook_RegisterNatives.js</span><br></pre></td></tr></table></figure><h2 id="hook-artmethod"><a href="#hook-artmethod" class="headerlink" title="hook_artmethod"></a>hook_artmethod</h2><h3 id="init-libext-first-time"><a href="#init-libext-first-time" class="headerlink" title="init libext first time"></a>init libext first time</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">adb push lib/libext64.so /data/<span class="built_in">local</span>/tmp/libext64.so</span><br><span class="line">adb push lib/libext.so /data/<span class="built_in">local</span>/tmp/libext.so</span><br><span class="line">adb shell su -c <span class="string">&quot;cp /data/local/tmp/libext64.so /data/app/libext64.so&quot;</span></span><br><span class="line">adb shell su -c <span class="string">&quot;cp /data/local/tmp/libext.so /data/app/libext.so&quot;</span></span><br><span class="line">adb shell su -c <span class="string">&quot;chown 1000.1000 /data/app/libext*.so&quot;</span></span><br><span class="line">adb shell su -c <span class="string">&quot;chmod 777 /data/app/libext*.so&quot;</span></span><br><span class="line">adb shell su -c <span class="string">&quot;ls -al /data/app/libext*&quot;</span></span><br></pre></td></tr></table></figure><h3 id="use-hook-artmethod-js"><a href="#use-hook-artmethod-js" class="headerlink" title="use hook_artmethod.js"></a>use hook_artmethod.js</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">frida -U --no-pause -f package_name -l hook_artmethod.js</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">frida -U --no-pause -f package_name -l hook_artmethod.js &gt; hook_artmethod.log</span><br></pre></td></tr></table></figure><hr><h2 id="frida-fart-hook"><a href="#frida-fart-hook" class="headerlink" title="frida-fart-hook"></a>frida-fart-hook</h2><p>首先拷贝fart.so和fart64.so到/data/app目录下，并使用chmod 777 设置好权限,然后就可以使用了。</p><p>如果目标 app 没有 sdcard 权限则需要手动添加; 或者可以修改 frida_fart_hook.js 中的源码, 将 savepath 改为 <code>/data/data/应用包名/</code>;</p><p>该frida版fart是使用hook的方式实现的函数粒度的脱壳，仅仅是对类中的所有函数进行了加载，但依然可以解决绝大多数的抽取保护</p><p>需要以spawn方式启动app，等待app进入Activity界面后，执行fart()函数即可。如app包名为com.example.test,则</p><p><code>frida -U -f com.example.test -l frida_fart_hook.js --no-pause</code> ，然后等待app进入主界面,执行fart()</p><p>高级用法：如果发现某个类中的函数的CodeItem没有dump下来，可以调用dump(classname),传入要处理的类名，完成对该类下的所有函数体的dump,dump下来的函数体会追加到bin文件当中。</p><hr><h1 id="frida-文件写入-frida-hook-libc"><a href="#frida-文件写入-frida-hook-libc" class="headerlink" title="frida 文件写入(frida/hook libc)"></a>frida 文件写入(frida/hook libc)</h1><p><code>frida api</code> 写入文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeFile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> file = <span class="keyword">new</span> File(<span class="string">&quot;/sdcard/reg.dat&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">  file.write(<span class="string">&quot;content from frida&quot;</span>);</span><br><span class="line">  file.flush();</span><br><span class="line">  file.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>frida 定义 NativeFunction</code> 写入文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeFileNative</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> addr_fopen = Module.findExportByName(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;fopen&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> addr_fputs = Module.findExportByName(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;fputs&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> addr_fclose = Module.findExportByName(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;fclose&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 将 libc 的系统方法注册到 js 层</span></span><br><span class="line">  <span class="keyword">var</span> fopen = <span class="keyword">new</span> NativeFunction(addr_fopen, <span class="string">&quot;pointer&quot;</span>, [<span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>]);</span><br><span class="line">  <span class="keyword">var</span> fputs = <span class="keyword">new</span> NativeFunction(addr_fputs, <span class="string">&quot;int&quot;</span>, [<span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>]);</span><br><span class="line">  <span class="keyword">var</span> fclose = <span class="keyword">new</span> NativeFunction(addr_fclose, <span class="string">&quot;int&quot;</span>, [<span class="string">&quot;pointer&quot;</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在 js 层主动调用 libc 的方法</span></span><br><span class="line">  <span class="comment">// 不能直接将 js 的字符串传给 libc中的方法, 需要进行转换</span></span><br><span class="line">  <span class="keyword">var</span> filename = Memory.allocUtf8String(<span class="string">&quot;/sdcard/reg.dat&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> open_mode = Memory.allocUtf8String(<span class="string">&quot;w&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> file = fopen(filename, open_mode);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> buffer = Memory.allocUtf8String(<span class="string">&quot;content from frida&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> result = fputs(buffer, file);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;fputs ret: &quot;</span>, result);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 关闭文件</span></span><br><span class="line">  fclose(file);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="hook-读写-std-string"><a href="#hook-读写-std-string" class="headerlink" title="hook 读写 std::string"></a>hook 读写 std::string</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readStdString</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> isTiny = (str.readU8 &amp; <span class="number">1</span>) === <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (isTiny)&#123;</span><br><span class="line">    <span class="keyword">return</span> str.add(<span class="number">1</span>).readUtf8String();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str.add(<span class="number">2</span> * Process.pointerSize).readPointer().readUtf8String();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeStdString</span>(<span class="params">str, content</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> isTiny = (str.readU8() &amp; <span class="number">1</span>) === <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (isTiny)&#123;</span><br><span class="line">    str.add(<span class="number">1</span>).writeUtf8String(content);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    str.add(<span class="number">2</span> * Process.pointerSize).readPointer().writeUtf8String(content);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="hook-so-文件加载后马上-hook"><a href="#hook-so-文件加载后马上-hook" class="headerlink" title="hook so 文件加载后马上 hook"></a>hook so 文件加载后马上 hook</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种方式（针对较老的系统版本）&lt;=android6</span></span><br><span class="line"><span class="keyword">var</span> dlopen = Module.findExportByName(<span class="literal">null</span>, <span class="string">&quot;dlopen&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(dlopen);</span><br><span class="line"><span class="keyword">if</span>(dlopen != <span class="literal">null</span>)&#123;</span><br><span class="line">    Interceptor.attach(dlopen,&#123;</span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> soName = args[<span class="number">0</span>].readCString();</span><br><span class="line">            <span class="built_in">console</span>.log(soName);</span><br><span class="line">            <span class="keyword">if</span>(soName.indexOf(<span class="string">&quot;libc.so&quot;</span>) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.hook = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.hook) &#123; </span><br><span class="line">                dlopentodo();</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方式（针对新系统版本） android 8.1 使用该方法</span></span><br><span class="line"><span class="keyword">var</span> android_dlopen_ext = Module.findExportByName(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(android_dlopen_ext);</span><br><span class="line"><span class="keyword">if</span>(android_dlopen_ext != <span class="literal">null</span>)&#123;</span><br><span class="line">    Interceptor.attach(android_dlopen_ext,&#123;</span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> soName = args[<span class="number">0</span>].readCString();</span><br><span class="line">            <span class="built_in">console</span>.log(soName);</span><br><span class="line">            <span class="keyword">if</span>(soName.indexOf(<span class="string">&quot;libc.so&quot;</span>) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.hook = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.hook) &#123;</span><br><span class="line">                dlopentodo();</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dlopentodo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//todo ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="hook-libc-kill"><a href="#hook-libc-kill" class="headerlink" title="hook libc kill"></a>hook libc kill</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceKILL</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> kill_addr = Module.findExportByName(<span class="string">&quot;libc.so&quot;</span>,<span class="string">&quot;kill&quot;</span>);</span><br><span class="line">  Interceptor.replace(kill_addr, <span class="keyword">new</span> NativeCallback(<span class="function"><span class="keyword">function</span>(<span class="params">arg0, arg1</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;arg0=&gt; &quot;</span>, arg0);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;arg1=&gt; &quot;</span>, arg1);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;libc.so!kill called from:\n&#x27;</span> +</span><br><span class="line">        Thread.backtrace(<span class="built_in">this</span>.context, Backtracer.ACCURATE)</span><br><span class="line">        .map(DebugSymbol.fromAddress).join(<span class="string">&#x27;\n&#x27;</span>) + <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  &#125;,<span class="string">&quot;int&quot;</span>,[<span class="string">&quot;int&quot;</span>,<span class="string">&quot;int&quot;</span>]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="hook-init-array"><a href="#hook-init-array" class="headerlink" title="hook init_array"></a>hook init_array</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//应用以32位在64位终端环境下运行</span></span><br><span class="line"><span class="comment">//adb install --abi armeabi-v7a &lt;path to apk&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_call_function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> call_function_addr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> symbols = Process.getModuleByName(<span class="string">&quot;linker&quot;</span>).enumerateSymbols();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> m = <span class="number">0</span>; m &lt; symbols.length; m++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (symbols[m].name == <span class="string">&quot;__dl__ZL13call_functionPKcPFviPPcS2_ES0_&quot;</span>) &#123;</span><br><span class="line">            call_function_addr = symbols[m].address;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;found call_function_addr =&gt; &quot;</span>, call_function_addr)</span><br><span class="line">            hook_call_function(call_function_addr)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_call_function</span>(<span class="params">_call_function_addr</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hook call function begin!hooking address :=&gt;&quot;</span>,_call_function_addr)</span><br><span class="line">    Interceptor.attach(_call_function_addr,&#123;</span><br><span class="line">        onEnter:<span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(args[<span class="number">2</span>].readCString().indexOf(<span class="string">&quot;base.odex&quot;</span>)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;============================&quot;</span>)</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;function_name =&gt;&quot;</span>,args[<span class="number">0</span>].readCString())</span><br><span class="line">                <span class="keyword">var</span> soPath = args[<span class="number">2</span>].readCString()</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;so path : =&gt;&quot;</span>,soPath)</span><br><span class="line">                <span class="keyword">var</span> soName = soPath.split(<span class="string">&quot;/&quot;</span>).pop();</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;function offset =&gt;&quot;</span>,<span class="string">&quot;0x&quot;</span>+(args[<span class="number">1</span>]-Module.findBaseAddress(soName)).toString(<span class="number">16</span>))</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;============================&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="function"><span class="keyword">function</span>(<span class="params">retval</span>)</span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(get_call_function)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_constructor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Process.pointerSize == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> linker = Process.findModuleByName(<span class="string">&quot;linker&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> linker = Process.findModuleByName(<span class="string">&quot;linker64&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> addr_call_function =<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> addr_g_ld_debug_verbosity = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> addr_async_safe_format_log = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (linker) &#123;</span><br><span class="line">        <span class="keyword">var</span> symbols = linker.enumerateSymbols();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; symbols.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> name = symbols[i].name;</span><br><span class="line">            <span class="keyword">if</span> (name.indexOf(<span class="string">&quot;call_function&quot;</span>) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                addr_call_function = symbols[i].address;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(name.indexOf(<span class="string">&quot;g_ld_debug_verbosity&quot;</span>) &gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                addr_g_ld_debug_verbosity = symbols[i].address;</span><br><span class="line">              </span><br><span class="line">                ptr(addr_g_ld_debug_verbosity).writeInt(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(name.indexOf(<span class="string">&quot;async_safe_format_log&quot;</span>) &gt;=<span class="number">0</span> &amp;&amp; name.indexOf(<span class="string">&#x27;va_list&#x27;</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            </span><br><span class="line">                addr_async_safe_format_log = symbols[i].address;</span><br><span class="line"></span><br><span class="line">            &#125; </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(addr_async_safe_format_log)&#123;</span><br><span class="line">        Interceptor.attach(addr_async_safe_format_log,&#123;</span><br><span class="line">            onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.log_level  = args[<span class="number">0</span>];</span><br><span class="line">                <span class="built_in">this</span>.tag = ptr(args[<span class="number">1</span>]).readCString()</span><br><span class="line">                <span class="built_in">this</span>.fmt = ptr(args[<span class="number">2</span>]).readCString()</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">this</span>.fmt.indexOf(<span class="string">&quot;c-tor&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp; <span class="built_in">this</span>.fmt.indexOf(<span class="string">&#x27;Done&#x27;</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="built_in">this</span>.function_type = ptr(args[<span class="number">3</span>]).readCString(), <span class="comment">// func_type</span></span><br><span class="line">                    <span class="built_in">this</span>.so_path = ptr(args[<span class="number">5</span>]).readCString();</span><br><span class="line">                    <span class="keyword">var</span> strs = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">//定义一数组 </span></span><br><span class="line">                    strs = <span class="built_in">this</span>.so_path.split(<span class="string">&quot;/&quot;</span>); <span class="comment">//字符分割</span></span><br><span class="line">                    <span class="built_in">this</span>.so_name = strs.pop();</span><br><span class="line">                    <span class="built_in">this</span>.func_offset  = ptr(args[<span class="number">4</span>]).sub(Module.findBaseAddress(<span class="built_in">this</span>.so_name)) </span><br><span class="line">                     <span class="built_in">console</span>.log(<span class="string">&quot;func_type:&quot;</span>, <span class="built_in">this</span>.function_type,</span><br><span class="line">                        <span class="string">&#x27;\nso_name:&#x27;</span>,<span class="built_in">this</span>.so_name,</span><br><span class="line">                        <span class="string">&#x27;\nso_path:&#x27;</span>,<span class="built_in">this</span>.so_path,</span><br><span class="line">                        <span class="string">&#x27;\nfunc_offset:&#x27;</span>,<span class="built_in">this</span>.func_offset </span><br><span class="line">                     );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    hook_constructor();</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><h1 id="frida-dump"><a href="#frida-dump" class="headerlink" title="frida dump"></a>frida dump</h1><p>document: <a href="https://github.com/lasting-yang/frida_dump">https://github.com/lasting-yang/frida_dump</a></p><h2 id="frida-dump-so"><a href="#frida-dump-so" class="headerlink" title="frida dump so"></a>frida dump so</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dump_so</span>(<span class="params">so_name</span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> currentApplication = Java.use(<span class="string">&quot;android.app.ActivityThread&quot;</span>).currentApplication();</span><br><span class="line">        <span class="keyword">var</span> dir = currentApplication.getApplicationContext().getFilesDir().getPath();</span><br><span class="line">        <span class="keyword">var</span> libso = Process.getModuleByName(so_name);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;[name]:&quot;</span>, libso.name);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;[base]:&quot;</span>, libso.base);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;[size]:&quot;</span>, ptr(libso.size));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;[path]:&quot;</span>, libso.path);</span><br><span class="line">        <span class="keyword">var</span> file_path = dir + <span class="string">&quot;/&quot;</span> + libso.name + <span class="string">&quot;_&quot;</span> + libso.base + <span class="string">&quot;_&quot;</span> + ptr(libso.size) + <span class="string">&quot;.so&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> file_handle = <span class="keyword">new</span> File(file_path, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (file_handle &amp;&amp; file_handle != <span class="literal">null</span>) &#123;</span><br><span class="line">            Memory.protect(ptr(libso.base), libso.size, <span class="string">&#x27;rwx&#x27;</span>);</span><br><span class="line">            <span class="keyword">var</span> libso_buffer = ptr(libso.base).readByteArray(libso.size);</span><br><span class="line">            file_handle.write(libso_buffer);</span><br><span class="line">            file_handle.flush();</span><br><span class="line">            file_handle.close();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;[dump]:&quot;</span>, file_path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="frida-dump-dex"><a href="#frida-dump-dex" class="headerlink" title="frida dump dex"></a>frida dump dex</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_self_process_name</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> openPtr = Module.getExportByName(<span class="string">&#x27;libc.so&#x27;</span>, <span class="string">&#x27;open&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> open = <span class="keyword">new</span> NativeFunction(openPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> readPtr = Module.getExportByName(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;read&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> read = <span class="keyword">new</span> NativeFunction(readPtr, <span class="string">&quot;int&quot;</span>, [<span class="string">&quot;int&quot;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;int&quot;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> closePtr = Module.getExportByName(<span class="string">&#x27;libc.so&#x27;</span>, <span class="string">&#x27;close&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> close = <span class="keyword">new</span> NativeFunction(closePtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> path = Memory.allocUtf8String(<span class="string">&quot;/proc/self/cmdline&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> fd = open(path, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (fd != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> buffer = Memory.alloc(<span class="number">0x1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> result = read(fd, buffer, <span class="number">0x1000</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        result = ptr(buffer).readCString();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;-1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mkdir</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> mkdirPtr = Module.getExportByName(<span class="string">&#x27;libc.so&#x27;</span>, <span class="string">&#x27;mkdir&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> mkdir = <span class="keyword">new</span> NativeFunction(mkdirPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> opendirPtr = Module.getExportByName(<span class="string">&#x27;libc.so&#x27;</span>, <span class="string">&#x27;opendir&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> opendir = <span class="keyword">new</span> NativeFunction(opendirPtr, <span class="string">&#x27;pointer&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> closedirPtr = Module.getExportByName(<span class="string">&#x27;libc.so&#x27;</span>, <span class="string">&#x27;closedir&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> closedir = <span class="keyword">new</span> NativeFunction(closedirPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> cPath = Memory.allocUtf8String(path);</span><br><span class="line">    <span class="keyword">var</span> dir = opendir(cPath);</span><br><span class="line">    <span class="keyword">if</span> (dir != <span class="number">0</span>) &#123;</span><br><span class="line">        closedir(dir);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mkdir(cPath, <span class="number">755</span>);</span><br><span class="line">    chmod(path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chmod</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> chmodPtr = Module.getExportByName(<span class="string">&#x27;libc.so&#x27;</span>, <span class="string">&#x27;chmod&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> chmod = <span class="keyword">new</span> NativeFunction(chmodPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line">    <span class="keyword">var</span> cPath = Memory.allocUtf8String(path);</span><br><span class="line">    chmod(cPath, <span class="number">755</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dump_dex</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> libart = Process.findModuleByName(<span class="string">&quot;libart.so&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> addr_DefineClass = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> symbols = libart.enumerateSymbols();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; symbols.length; index++) &#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[index];</span><br><span class="line">        <span class="keyword">var</span> symbol_name = symbol.name;</span><br><span class="line">        <span class="comment">//这个DefineClass的函数签名是Android9的</span></span><br><span class="line">        <span class="comment">//_ZN3art11ClassLinker11DefineClassEPNS_6ThreadEPKcmNS_6HandleINS_6mirror11ClassLoaderEEERKNS_7DexFileERKNS9_8ClassDefE</span></span><br><span class="line">        <span class="keyword">if</span> (symbol_name.indexOf(<span class="string">&quot;ClassLinker&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">            symbol_name.indexOf(<span class="string">&quot;DefineClass&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">            symbol_name.indexOf(<span class="string">&quot;Thread&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">            symbol_name.indexOf(<span class="string">&quot;DexFile&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(symbol_name, symbol.address);</span><br><span class="line">            addr_DefineClass = symbol.address;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> dex_maps = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> dex_count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;[DefineClass:]&quot;</span>, addr_DefineClass);</span><br><span class="line">    <span class="keyword">if</span> (addr_DefineClass) &#123;</span><br><span class="line">        Interceptor.attach(addr_DefineClass, &#123;</span><br><span class="line">            onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> dex_file = args[<span class="number">5</span>];</span><br><span class="line">                <span class="comment">//ptr(dex_file).add(Process.pointerSize) is &quot;const uint8_t* const begin_;&quot;</span></span><br><span class="line">                <span class="comment">//ptr(dex_file).add(Process.pointerSize + Process.pointerSize) is &quot;const size_t size_;&quot;</span></span><br><span class="line">                <span class="keyword">var</span> base = ptr(dex_file).add(Process.pointerSize).readPointer();</span><br><span class="line">                <span class="keyword">var</span> size = ptr(dex_file).add(Process.pointerSize + Process.pointerSize).readUInt();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (dex_maps[base] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">                    dex_maps[base] = size;</span><br><span class="line">                    <span class="keyword">var</span> magic = ptr(base).readCString();</span><br><span class="line">                    <span class="keyword">if</span> (magic.indexOf(<span class="string">&quot;dex&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">var</span> process_name = get_self_process_name();</span><br><span class="line">                        <span class="keyword">if</span> (process_name != <span class="string">&quot;-1&quot;</span>) &#123;</span><br><span class="line">                            <span class="keyword">var</span> dex_dir_path = <span class="string">&quot;/data/data/&quot;</span> + process_name + <span class="string">&quot;/files/dump_dex_&quot;</span> + process_name;</span><br><span class="line">                            mkdir(dex_dir_path);</span><br><span class="line">                            <span class="keyword">var</span> dex_path = dex_dir_path + <span class="string">&quot;/class&quot;</span> + (dex_count == <span class="number">1</span> ? <span class="string">&quot;&quot;</span> : dex_count) + <span class="string">&quot;.dex&quot;</span>;</span><br><span class="line">                            <span class="built_in">console</span>.log(<span class="string">&quot;[find dex]:&quot;</span>, dex_path);</span><br><span class="line">                            <span class="keyword">var</span> fd = <span class="keyword">new</span> File(dex_path, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">                            <span class="keyword">if</span> (fd &amp;&amp; fd != <span class="literal">null</span>) &#123;</span><br><span class="line">                                dex_count++;</span><br><span class="line">                                <span class="keyword">var</span> dex_buffer = ptr(base).readByteArray(size);</span><br><span class="line">                                fd.write(dex_buffer);</span><br><span class="line">                                fd.flush();</span><br><span class="line">                                fd.close();</span><br><span class="line">                                <span class="built_in">console</span>.log(<span class="string">&quot;[dump dex]:&quot;</span>, dex_path);</span><br><span class="line"></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>) </span>&#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> is_hook_libart = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_dlopen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Interceptor.attach(Module.findExportByName(<span class="literal">null</span>, <span class="string">&quot;dlopen&quot;</span>), &#123;</span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (pathptr !== <span class="literal">undefined</span> &amp;&amp; pathptr != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> path = ptr(pathptr).readCString();</span><br><span class="line">                <span class="comment">//console.log(&quot;dlopen:&quot;, path);</span></span><br><span class="line">                <span class="keyword">if</span> (path.indexOf(<span class="string">&quot;libart.so&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.can_hook_libart = <span class="literal">true</span>;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;[dlopen:]&quot;</span>, path);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.can_hook_libart &amp;&amp; !is_hook_libart) &#123;</span><br><span class="line">                dump_dex();</span><br><span class="line">                is_hook_libart = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    Interceptor.attach(Module.findExportByName(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>), &#123;</span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (pathptr !== <span class="literal">undefined</span> &amp;&amp; pathptr != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> path = ptr(pathptr).readCString();</span><br><span class="line">                <span class="comment">//console.log(&quot;android_dlopen_ext:&quot;, path);</span></span><br><span class="line">                <span class="keyword">if</span> (path.indexOf(<span class="string">&quot;libart.so&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.can_hook_libart = <span class="literal">true</span>;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;[android_dlopen_ext:]&quot;</span>, path);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.can_hook_libart &amp;&amp; !is_hook_libart) &#123;</span><br><span class="line">                dump_dex();</span><br><span class="line">                is_hook_libart = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setImmediate(dump_dex);</span><br></pre></td></tr></table></figure><h2 id="frida-dump-dex-class"><a href="#frida-dump-dex-class" class="headerlink" title="frida dump dex class"></a>frida dump dex class</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_self_process_name</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> openPtr = Module.getExportByName(<span class="string">&#x27;libc.so&#x27;</span>, <span class="string">&#x27;open&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> open = <span class="keyword">new</span> NativeFunction(openPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> readPtr = Module.getExportByName(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;read&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> read = <span class="keyword">new</span> NativeFunction(readPtr, <span class="string">&quot;int&quot;</span>, [<span class="string">&quot;int&quot;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;int&quot;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> closePtr = Module.getExportByName(<span class="string">&#x27;libc.so&#x27;</span>, <span class="string">&#x27;close&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> close = <span class="keyword">new</span> NativeFunction(closePtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> path = Memory.allocUtf8String(<span class="string">&quot;/proc/self/cmdline&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> fd = open(path, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (fd != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> buffer = Memory.alloc(<span class="number">0x1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> result = read(fd, buffer, <span class="number">0x1000</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        result = ptr(buffer).readCString();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;-1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">load_all_class</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Java.available) &#123;</span><br><span class="line">        Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> DexFileclass = Java.use(<span class="string">&quot;dalvik.system.DexFile&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> BaseDexClassLoaderclass = Java.use(<span class="string">&quot;dalvik.system.BaseDexClassLoader&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> DexPathListclass = Java.use(<span class="string">&quot;dalvik.system.DexPathList&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Java.enumerateClassLoaders(&#123;</span><br><span class="line">                onMatch: <span class="function"><span class="keyword">function</span> (<span class="params">loader</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">var</span> basedexclassloaderobj = Java.cast(loader, BaseDexClassLoaderclass);</span><br><span class="line">                        <span class="keyword">var</span> pathList = basedexclassloaderobj.pathList.value;</span><br><span class="line">                        <span class="keyword">var</span> pathListobj = Java.cast(pathList, DexPathListclass)</span><br><span class="line">                        <span class="keyword">var</span> dexElements = pathListobj.dexElements.value;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> index <span class="keyword">in</span> dexElements) &#123;</span><br><span class="line">                            <span class="keyword">var</span> element = dexElements[index];</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="keyword">var</span> dexfile = element.dexFile.value;</span><br><span class="line">                                <span class="keyword">var</span> dexfileobj = Java.cast(dexfile, DexFileclass);</span><br><span class="line">                                <span class="built_in">console</span>.log(<span class="string">&quot;dexFile:&quot;</span>, dexfileobj);</span><br><span class="line">                                <span class="keyword">const</span> classNames = [];</span><br><span class="line">                                <span class="keyword">const</span> enumeratorClassNames = dexfileobj.entries();</span><br><span class="line">                                <span class="keyword">while</span> (enumeratorClassNames.hasMoreElements()) &#123;</span><br><span class="line">                                    <span class="keyword">var</span> className = enumeratorClassNames.nextElement().toString();</span><br><span class="line">                                    classNames.push(className);</span><br><span class="line">                                    <span class="keyword">try</span> &#123;</span><br><span class="line">                                        loader.loadClass(className);</span><br><span class="line">                                    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                                        <span class="built_in">console</span>.log(<span class="string">&quot;loadClass error:&quot;</span>, error);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                                <span class="built_in">console</span>.log(<span class="string">&quot;dexfile error:&quot;</span>, error);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&quot;loader error:&quot;</span>, error);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                onComplete: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;load_all_class end.&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dex_maps = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print_dex_maps</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> dex <span class="keyword">in</span> dex_maps) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(dex, dex_maps[dex]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dump_dex</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    load_all_class();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> base <span class="keyword">in</span> dex_maps) &#123;</span><br><span class="line">        <span class="keyword">var</span> size = dex_maps[base];</span><br><span class="line">        <span class="built_in">console</span>.log(base);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> magic = ptr(base).readCString();</span><br><span class="line">        <span class="keyword">if</span> (magic.indexOf(<span class="string">&quot;dex&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> process_name = get_self_process_name();</span><br><span class="line">            <span class="keyword">if</span> (process_name != <span class="string">&quot;-1&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> dex_path = <span class="string">&quot;/data/data/&quot;</span> + process_name + <span class="string">&quot;/files/&quot;</span> + base.toString(<span class="number">16</span>) + <span class="string">&quot;_&quot;</span> + size.toString(<span class="number">16</span>) + <span class="string">&quot;.dex&quot;</span>;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;[find dex]:&quot;</span>, dex_path);</span><br><span class="line">                <span class="keyword">var</span> fd = <span class="keyword">new</span> File(dex_path, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (fd &amp;&amp; fd != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> dex_buffer = ptr(base).readByteArray(size);</span><br><span class="line">                    fd.write(dex_buffer);</span><br><span class="line">                    fd.flush();</span><br><span class="line">                    fd.close();</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;[dump dex]:&quot;</span>, dex_path);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_dex</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> libart = Process.findModuleByName(<span class="string">&quot;libart.so&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> addr_DefineClass = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> symbols = libart.enumerateSymbols();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; symbols.length; index++) &#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[index];</span><br><span class="line">        <span class="keyword">var</span> symbol_name = symbol.name;</span><br><span class="line">        <span class="comment">//这个DefineClass的函数签名是Android9的</span></span><br><span class="line">        <span class="comment">//_ZN3art11ClassLinker11DefineClassEPNS_6ThreadEPKcmNS_6HandleINS_6mirror11ClassLoaderEEERKNS_7DexFileERKNS9_8ClassDefE</span></span><br><span class="line">        <span class="keyword">if</span> (symbol_name.indexOf(<span class="string">&quot;ClassLinker&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">            symbol_name.indexOf(<span class="string">&quot;DefineClass&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">            symbol_name.indexOf(<span class="string">&quot;Thread&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">            symbol_name.indexOf(<span class="string">&quot;DexFile&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(symbol_name, symbol.address);</span><br><span class="line">            addr_DefineClass = symbol.address;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;[DefineClass:]&quot;</span>, addr_DefineClass);</span><br><span class="line">    <span class="keyword">if</span> (addr_DefineClass) &#123;</span><br><span class="line">        Interceptor.attach(addr_DefineClass, &#123;</span><br><span class="line">            onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> dex_file = args[<span class="number">5</span>];</span><br><span class="line">                <span class="comment">//ptr(dex_file).add(Process.pointerSize) is &quot;const uint8_t* const begin_;&quot;</span></span><br><span class="line">                <span class="comment">//ptr(dex_file).add(Process.pointerSize + Process.pointerSize) is &quot;const size_t size_;&quot;</span></span><br><span class="line">                <span class="keyword">var</span> base = ptr(dex_file).add(Process.pointerSize).readPointer();</span><br><span class="line">                <span class="keyword">var</span> size = ptr(dex_file).add(Process.pointerSize + Process.pointerSize).readUInt();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (dex_maps[base] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">                    dex_maps[base] = size;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;hook_dex:&quot;</span>, base, size);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            onLeave: <span class="function"><span class="keyword">function</span> (<span class="params">retval</span>) </span>&#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> is_hook_libart = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_dlopen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Interceptor.attach(Module.findExportByName(<span class="literal">null</span>, <span class="string">&quot;dlopen&quot;</span>), &#123;</span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (pathptr !== <span class="literal">undefined</span> &amp;&amp; pathptr != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> path = ptr(pathptr).readCString();</span><br><span class="line">                <span class="comment">//console.log(&quot;dlopen:&quot;, path);</span></span><br><span class="line">                <span class="keyword">if</span> (path.indexOf(<span class="string">&quot;libart.so&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.can_hook_libart = <span class="literal">true</span>;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;[dlopen:]&quot;</span>, path);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span> (<span class="params">retval</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.can_hook_libart &amp;&amp; !is_hook_libart) &#123;</span><br><span class="line">                hook_dex();</span><br><span class="line">                is_hook_libart = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    Interceptor.attach(Module.findExportByName(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>), &#123;</span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (pathptr !== <span class="literal">undefined</span> &amp;&amp; pathptr != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> path = ptr(pathptr).readCString();</span><br><span class="line">                <span class="comment">//console.log(&quot;android_dlopen_ext:&quot;, path);</span></span><br><span class="line">                <span class="keyword">if</span> (path.indexOf(<span class="string">&quot;libart.so&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.can_hook_libart = <span class="literal">true</span>;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;[android_dlopen_ext:]&quot;</span>, path);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span> (<span class="params">retval</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.can_hook_libart &amp;&amp; !is_hook_libart) &#123;</span><br><span class="line">                hook_dex();</span><br><span class="line">                is_hook_libart = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setImmediate(hook_dex);</span><br></pre></td></tr></table></figure><h1 id="指针运算符和读写-API"><a href="#指针运算符和读写-API" class="headerlink" title="指针运算符和读写 API"></a>指针运算符和读写 API</h1><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2022-02-18-084554.jpg" alt="img"></p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2022-02-18-84550.jpg" alt="img"></p><h2 id="hook-so-readPointer"><a href="#hook-so-readPointer" class="headerlink" title="hook so readPointer()"></a>hook so readPointer()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> libc_addr = Process.findModuleByName(<span class="string">&quot;libc.so&quot;</span>).base;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;libc address is &quot;</span> + libc_addr);</span><br><span class="line">        <span class="comment">// 0x10 转为十进制为 16, 读取</span></span><br><span class="line">        <span class="built_in">console</span>.log(libc_addr.readByteArray(<span class="number">0x10</span>));</span><br><span class="line">        <span class="comment">// readPointer(), 从此内存位置读取 NativePointer</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;pointer size&quot;</span>, Process.pointerSize);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;readPointer() is &quot;</span> + libc_addr.readPointer());</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Memory.readPointer()&quot;</span> + Memory.readPointer(libc_addr.add(Process.pointerSize)));</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="hook-so-writePointer"><a href="#hook-so-writePointer" class="headerlink" title="hook so writePointer()"></a>hook so writePointer()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> libc_addr = Process.findModuleByName(<span class="string">&quot;libc.so&quot;</span>).base;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;libc_addr : &quot;</span> + libc_addr);</span><br><span class="line">        <span class="comment">// 分配四个字节的空间地址</span></span><br><span class="line">        <span class="keyword">const</span> r = Memory.alloc(<span class="number">4</span>);</span><br><span class="line">        <span class="comment">// 将 libc_addr 指针写入刚申请的 r 中</span></span><br><span class="line">        r.writePointer(libc_addr);</span><br><span class="line">        <span class="comment">// 读取 r 指针的数据</span></span><br><span class="line">        <span class="keyword">var</span> buffer = Memory.readByteArray(r, <span class="number">4</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(buffer);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//libc_addr : 0x7da7fdf000</span></span><br><span class="line">        <span class="comment">//    0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span></span><br><span class="line"><span class="comment">// 00000000  00 f0 fd a7                                      ....</span></span><br></pre></td></tr></table></figure><h2 id="hook-so-readS32-readU32"><a href="#hook-so-readS32-readU32" class="headerlink" title="hook so readS32(), readU32()"></a>hook so readS32(), readU32()</h2><p>从指定内存地址读取有符号或者无符号 8/16/21/etc 或浮点数/双精度值, 并将其作为数字返回;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> libc_addr = Process.findModuleByName(<span class="string">&quot;libc.so&quot;</span>).base;</span><br><span class="line">        <span class="built_in">console</span>.log(hexdump(libc_addr));</span><br><span class="line">        <span class="built_in">console</span>.log(libc_addr.readS32(), (libc_addr.readS32()).toString(<span class="number">16</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(libc_addr.readU32(), (libc_addr.readU32()).toString(<span class="number">16</span>));</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2022-02-18-084553.png" alt="img"></p><h2 id="hook-so-writeS32-writeU32"><a href="#hook-so-writeS32-writeU32" class="headerlink" title="hook so writeS32(), writeU32()"></a>hook so writeS32(), writeU32()</h2><p>将有符号或无符号8/16/32/等或浮点数/双精度值写入此内存位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 开辟四个字节的内存空间</span></span><br><span class="line">        <span class="keyword">const</span> r = Memory.alloc(<span class="number">4</span>);</span><br><span class="line">        r.writeS32(<span class="number">0x12345678</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(r.readByteArray(<span class="number">0x10</span>));</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;!--  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line"><span class="number">00000000</span>  <span class="number">78</span> <span class="number">56</span> <span class="number">34</span> <span class="number">12</span> 7d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">98</span> c0 bb a8 7d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  xV4.&#125;.......&#125;...</span><br><span class="line"> --&gt;</span><br></pre></td></tr></table></figure><h2 id="hook-so-readByteArray-writeByteArray"><a href="#hook-so-readByteArray-writeByteArray" class="headerlink" title="hook so readByteArray(), writeByteArray()"></a>hook so readByteArray(), writeByteArray()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 定义一个需要写入的字节数组</span></span><br><span class="line">        <span class="keyword">var</span> arr = [ <span class="number">0x72</span>, <span class="number">0x6F</span>, <span class="number">0x79</span>, <span class="number">0x73</span>, <span class="number">0x75</span>, <span class="number">0x65</span>];</span><br><span class="line">       <span class="comment">//这里申请以arr大小的内存空间</span></span><br><span class="line">        <span class="keyword">var</span> r = Memory.alloc(arr.length);</span><br><span class="line">        <span class="comment">// 将 arr 写入 r 中</span></span><br><span class="line">        r.writeByteArray(arr);</span><br><span class="line">        <span class="comment">// Memory.writeByteArray(r, arr); 同样可以写入</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;memory readbyteArray: &quot;</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(r.readByteArray(arr.length));</span><br><span class="line">        <span class="built_in">console</span>.log(Memory.readByteArray(r, arr.length));</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="hook-so-readCString-writeUtf8String"><a href="#hook-so-readCString-writeUtf8String" class="headerlink" title="hook so readCString(), writeUtf8String()"></a>hook so readCString(), writeUtf8String()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 开辟内存空间 存有字符串</span></span><br><span class="line">        <span class="keyword">var</span> r = Memory.allocUtf8String(<span class="string">&quot;你好,世界&quot;</span>);</span><br><span class="line">        <span class="comment">// 读取内存中的字符串</span></span><br><span class="line">        <span class="built_in">console</span>.log(hexdump(r));</span><br><span class="line">        <span class="built_in">console</span>.log(r.readCString());</span><br><span class="line">        <span class="comment">// 往内存中写入新的字符串</span></span><br><span class="line">        r.writeUtf8String(<span class="string">&quot;Hello,World&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(hexdump(r));</span><br><span class="line">        <span class="built_in">console</span>.log(r.readCString())</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h1 id="hook-获取-jni-array"><a href="#hook-获取-jni-array" class="headerlink" title="hook 获取 jni array"></a>hook 获取 jni array</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 jbytesArray 的指针</span></span><br><span class="line"><span class="keyword">var</span> arg1Ptr = Java.vm.getEnv().getByteArrayElements(<span class="built_in">this</span>.arg1, <span class="literal">null</span>) </span><br><span class="line"><span class="comment">// 获取到指针后可以直接 hexdump 打印</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;arg1Ptr&quot;</span>,hexdump(arg1Ptr));</span><br><span class="line"><span class="comment">// 如果是字符串可以直接转</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;arg1Ptr&quot;</span>,arg1Ptr.readCString());</span><br></pre></td></tr></table></figure><h1 id="ida-动态调试"><a href="#ida-动态调试" class="headerlink" title="ida 动态调试"></a>ida 动态调试</h1><ol><li> 将 ida 中的 android-server 推入到手机中 <code>adb push /Applications/IDA\ Pro\ 7.0/ida.app/Contents/MacOS/dbgsrv/android_server /data/local/tmp/as</code> android_server 负责调试 32 位的app, android_server64 负责调试 64 位的app, 改名为 as 可以防止部分 android_server 名称检测</li><li> 给 android_server 增加权限</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">chmod +x /data/<span class="built_in">local</span>/tmp/as</span><br></pre></td></tr></table></figure><ol><li> 进行端口转发 <code>adb forward tcp:11678 tcp:11678</code></li><li> 启动 android_server 并指定端口为 11678</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">/data/<span class="built_in">local</span>/tmp/as -p11678</span><br></pre></td></tr></table></figure><ol><li> 调试之前先注入 frida</li><li> 新建一个 ida 界面</li><li> Debugger - Remote ARMLinux/Android debugger</li><li> hostname: localhost; Port: 11678; 勾选 Save network settings as default</li><li> frida 打印出目标 function 最终的地址, ida 中 g 到目标 function 地址, 查看是否是 thumb 指令集, 如果是 thumb 则 option + g, 将 T 修改为1, 再按 c;</li><li> File - Script file - 读取 ida trace 脚本, 需要更改目标 so 文件和 function 的起始地址和结束地址; 读取之后会出现断点; 快捷键: <code>option F7</code>;</li><li> frida 主动调用脚本, 检测断点是否触发</li><li> 断点检测正常后, ida 中执行 starthook()命令, 进行 hook 操作; 执行<code>suspend_other_thread()</code>挂起其他线程(可选择)</li><li> ida 中 Debugger - tracing - tracing options - 设置 Trace file 路径 和 取消 Trace over debugger segments 的勾选</li><li> ida 中 Debugger - tracing - 勾选 instruction tracing</li><li> frida 主动调用触发断点</li><li> ida 点击运行按钮进行执行, 此时 ida 中黄色部分为已经执行完的指令, 点击 Debugger -tracing - tracing window 可以看到当前执行进度;</li></ol><h1 id="ida-添加自有-python-路径"><a href="#ida-添加自有-python-路径" class="headerlink" title="ida 添加自有 python 路径"></a>ida 添加自有 python 路径</h1><p>修改路径下的文件 : /Applications/IDA Pro 7.0/ida.app/Contents/MacOS/python/init.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Prepare sys.path so loading of the shared objects works</span></span><br><span class="line">lib_dynload = os.path.join(</span><br><span class="line">    sys.executable,</span><br><span class="line">    IDAPYTHON_DYNLOAD_BASE,</span><br><span class="line">    <span class="string">&quot;python&quot;</span>, <span class="string">&quot;lib&quot;</span>, <span class="string">&quot;python2.7&quot;</span>, <span class="string">&quot;lib-dynload&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># added by kevin</span></span><br><span class="line">sys.path.insert(<span class="number">0</span>, <span class="string">&quot;/Users/zhangyang/anaconda3/envs/py2/lib/python2.7/site-packages&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="idapython-脚本调试"><a href="#idapython-脚本调试" class="headerlink" title="idapython 脚本调试"></a>idapython 脚本调试</h1><p>在 pycharm 中开启调试</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2022-02-18-84553.png" alt="img"></p><p>在需要调试的脚本中添加断点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pydevd_pycharm</span><br><span class="line"></span><br><span class="line">pydevd_pycharm.settrace(<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">12345</span>, stdoutToServer=<span class="literal">True</span>, stderrToServer=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>在 idapython 的<code>__init__.py</code>文件中添加自有的 python 路径;</p><p>先在 pycharm 中打开调试监听, 在 ida 中运行要调试的脚本即可;</p><h1 id="jni-helper"><a href="#jni-helper" class="headerlink" title="jni_helper"></a>jni_helper</h1><ol><li> 进入目录 <code>~/androidFxxk/idaTools/jni_helper</code></li><li> <code>java -jar JadxFindJNI/JadxFindJNI.jar &lt;apk.path&gt; &lt;output.json&gt;</code></li><li> ida 中<code>Script File</code>运行 <code>jni_help</code>脚本, 路径 <code>~/androidFxxk/idaTools/jni_helper/ida/jni_helper.py</code></li><li> 导入刚才生成的 <code>output.json</code> 文件即可自动识别</li></ol><h1 id="frida-dump-内存中的-so-文件"><a href="#frida-dump-内存中的-so-文件" class="headerlink" title="frida dump 内存中的 so 文件"></a>frida dump 内存中的 so 文件</h1><p>给应用提供 sdcard 权限, 方便将 dump 下来的内容直接写入 sdcard 中;</p><ol><li> <code>adb shell dumpsys window | grep mCurrentFocus</code> 查看当前 app 的包名</li><li> 根据包名查看进程 pid</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> ✔  adb shell</span><br><span class="line">sailfish:/ $ su</span><br><span class="line">sailfish:/ <span class="comment"># ps -ef | grep com.kevin.sotest</span></span><br><span class="line">u0_a136      29251   641 0 16:10:14 ?     00:00:00 com.kevin.sotest</span><br><span class="line">root         29845 29827 0 16:17:46 pts/3 00:00:00 grep com.kevin.sotest</span><br></pre></td></tr></table></figure><ol><li> 通过对应进程id 和 so 名称, 查看其在虚拟地址空间中的映射</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sailfish:/ <span class="comment"># cat /proc/29251/maps | grep libnative-lib.so</span></span><br><span class="line">7593f4a000-7593f7a000 r-xp 00000000 103:13 1180186                       /data/app/com.kevin.sotest-Wmu_QuZYJCLa0CPho2HTHw==/lib/arm64/libnative-lib.so</span><br><span class="line">7593f7b000-7593f7f000 r--p 00030000 103:13 1180186                       /data/app/com.kevin.sotest-Wmu_QuZYJCLa0CPho2HTHw==/lib/arm64/libnative-lib.so</span><br><span class="line">7593f7f000-7593f80000 rw-p 00034000 103:13 1180186                       /data/app/com.kevin.sotest-Wmu_QuZYJCLa0CPho2HTHw==/lib/arm64/libnative-lib.so</span><br></pre></td></tr></table></figure><ol><li> frida 脚本将该内存中的内容全部 dump 下来</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///&lt;reference path=&#x27;./index.d.ts&#x27;/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用需要申请 sdcard 权限, dump下来的内容直接写入 sdcard 中</span></span><br><span class="line"><span class="keyword">var</span> global_so_name = <span class="string">&quot;libnative-lib.so&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">catMaps</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;执行 -&gt; &quot;</span>, <span class="string">&quot;hook starting dump&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> ProcessClass = Java.use(<span class="string">&quot;android.os.Process&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> pid = ProcessClass.myPid();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;pid&quot;</span>, ProcessClass.myPid());</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;cat /proc/&quot;</span> + pid + <span class="string">&quot;/maps | grep &quot;</span> + global_so_name);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dump</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> inputArgs = <span class="built_in">arguments</span>;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> inputArgs) &#123;</span><br><span class="line">            <span class="keyword">var</span> fileHandle = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                fileHandle = <span class="keyword">new</span> File(<span class="string">&quot;/sdcard/&quot;</span> + global_so_name, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                fileHandle = <span class="keyword">new</span> File(<span class="string">&quot;/sdcard/&quot;</span> + global_so_name, <span class="string">&quot;ab&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fileHandle &amp;&amp; fileHandle != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> base = <span class="string">&quot;0x&quot;</span> + inputArgs[i].split(<span class="string">&quot;-&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">var</span> end = <span class="string">&quot;0x&quot;</span> + inputArgs[i].split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">var</span> size = <span class="built_in">parseInt</span>(<span class="built_in">parseInt</span>(end) - <span class="built_in">parseInt</span>(base));</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;size&quot;</span>, size, <span class="keyword">typeof</span> size);</span><br><span class="line">                <span class="comment">// Memory.protect(ptr(base), size, &#x27;rwx&#x27;);</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;base&quot;</span>, base, <span class="keyword">typeof</span> base);</span><br><span class="line">                <span class="keyword">var</span> libso_buffer = ptr(base).readByteArray(size);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;buffer&quot;</span>, libso_buffer);</span><br><span class="line">                fileHandle.write(libso_buffer);</span><br><span class="line">                fileHandle.flush();</span><br><span class="line">                fileHandle.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// dump(&#x27;7593f4a000-7593f7a000&#x27;, &#x27;7593f7b000-7593f7f000&#x27;, &#x27;7593f7f000-7593f80000&#x27;)</span></span><br></pre></td></tr></table></figure><h1 id="hook-system-properties-get"><a href="#hook-system-properties-get" class="headerlink" title="hook system_properties_get"></a>hook system_properties_get</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///&lt;reference path=&#x27;./index.d.ts&#x27;/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hook libc.so</span></span><br><span class="line"><span class="keyword">var</span> targetAddr = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(JSON.stringify(Process.enumerateModules()));</span></span><br><span class="line"><span class="comment">// Process.enumerateModules() 枚举加载的so文件</span></span><br><span class="line"><span class="keyword">var</span> symbols = Process.findModuleByName(<span class="string">&quot;libc.so&quot;</span>).enumerateSymbols();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; symbols.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (symbols[i].name === <span class="string">&quot;__system_property_get&quot;</span>)&#123;</span><br><span class="line">        targetAddr = symbols[i].address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">Interceptor.attach(targetAddr, &#123;</span><br><span class="line">    onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>._name = args[<span class="number">0</span>].readCString();</span><br><span class="line">        <span class="built_in">this</span>._value = args[<span class="number">1</span>];</span><br><span class="line">    &#125;,</span><br><span class="line">    onLeave: <span class="function"><span class="keyword">function</span> (<span class="params">retval</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">            result_length: retval,</span><br><span class="line">            name: <span class="built_in">this</span>._name,</span><br><span class="line">            val: <span class="built_in">this</span>._value.readCString()</span><br><span class="line">        &#125;))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Process-对象API"><a href="#Process-对象API" class="headerlink" title="Process 对象API"></a>Process 对象API</h1><h2 id="Process-id"><a href="#Process-id" class="headerlink" title="Process.id"></a><a href="http://process.id/">Process.id</a></h2><p>返回附加目标进程的 PID</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Process_pid</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(Process.id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 10190</span></span><br></pre></td></tr></table></figure><p>调用的结果和在 android 中通过 <code>ps -ef | grep hellojni_sign2</code>的pid 相同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u0_a139      <span class="number">10190</span>   <span class="number">639</span> <span class="number">0</span> <span class="number">15</span>:<span class="number">03</span>:<span class="number">40</span> ?     <span class="number">00</span>:<span class="number">00</span>:<span class="number">10</span> com.example.hellojni_sign2</span><br></pre></td></tr></table></figure><h2 id="Process-isDebuggerAttached"><a href="#Process-isDebuggerAttached" class="headerlink" title="Process.isDebuggerAttached()"></a>Process.isDebuggerAttached()</h2><p>检测当前是否对目标程序已经附加</p><h2 id="Process-enumerateModules"><a href="#Process-enumerateModules" class="headerlink" title="Process.enumerateModules()"></a>Process.enumerateModules()</h2><p>枚举当前加载的模块，返回模块对象的数组。 Process.enumerateModules()会枚举当前所有已加载的so模块，并且返回了数组Module对象; 可以通过 <code>JSON.stringify()</code>打印module 对象;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ProcessTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> modules = Process.enumerateModules();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; modules.length; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(modules[i]));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">module</span> = modules[i];</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;module.name&quot;</span>, <span class="built_in">module</span>.name);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;module.base&quot;</span>, <span class="built_in">module</span>.base);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;module.size&quot;</span>, <span class="built_in">module</span>.size);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;module.path&quot;</span>, <span class="built_in">module</span>.path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 module 对象中含有的属性为:</p><ul><li>  name: so 的名称</li><li>  base: so 加载的基础地址</li><li>  size: so 文件的大小</li><li>  path: so 文件的路径</li></ul><h2 id="Process-enumerateThreads"><a href="#Process-enumerateThreads" class="headerlink" title="Process.enumerateThreads()"></a>Process.enumerateThreads()</h2><p><code>Process.enumerateThreads()</code>：枚举当前所有的线程，返回包含以下属性的对象数组：</p><table><thead><tr><th>索引</th><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>1</td><td>id</td><td>线程id</td></tr><tr><td>2</td><td>state</td><td>当前运行状态有running, stopped, waiting, uninterruptible or halted</td></tr><tr><td>3</td><td>context</td><td>带有键pc和sp的对象，它们是分别为ia32/x64/arm指定EIP/RIP/PC和ESP/RSP/SP的NativePointer对象。也可以使用其他处理器特定的密钥，例如eax、rax、r0、x0等</td></tr></tbody></table><h1 id="Module-对象-API-和属性"><a href="#Module-对象-API-和属性" class="headerlink" title="Module 对象 API 和属性"></a>Module 对象 API 和属性</h1><h2 id="Module-对象的属性"><a href="#Module-对象的属性" class="headerlink" title="Module 对象的属性"></a>Module 对象的属性</h2><p>索引    属性    含义 1    name    模块名称 2    base    模块地址，其变量类型为NativePointer 3    size    大小 4    path    完整文件系统路径</p><h2 id="Module-load"><a href="#Module-load" class="headerlink" title="Module.load()"></a>Module.load()</h2><p>主要用于加载指定 so 文件, 返回一个 Module 对象;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">frida_Module</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="comment">//参数为so的名称 返回一个Module对象</span></span><br><span class="line">         <span class="keyword">const</span> hooks = Module.load(<span class="string">&#x27;libhello.so&#x27;</span>);</span><br><span class="line">         <span class="comment">//输出</span></span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&quot;模块名称:&quot;</span>,hooks.name);</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&quot;模块地址:&quot;</span>,hooks.base);</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&quot;大小:&quot;</span>,hooks.size);</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&quot;文件系统路径&quot;</span>,hooks.path);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(frida_Module,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">输出如下：</span><br><span class="line">模块名称: libhello.so</span><br><span class="line">模块地址: <span class="number">0xdf2d3000</span></span><br><span class="line">大小: <span class="number">24576</span></span><br><span class="line">文件系统路径 /data/app/com.roysue.roysueapplication-7adQZoYIyp5t3G5Ef5wevQ==<span class="regexp">/lib/</span>arm/libhello.so</span><br></pre></td></tr></table></figure><h2 id="Module-enumerateImports"><a href="#Module-enumerateImports" class="headerlink" title="Module.enumerateImports()"></a>Module.enumerateImports()</h2><p>枚举模块中的所有 import 函数;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">frida_Module</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> hooks = Module.load(<span class="string">&#x27;libhello.so&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> Imports = hooks.enumerateImports();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; Imports.length; i++) &#123;</span><br><span class="line">            <span class="comment">//函数类型</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;type:&quot;</span>,Imports[i].type);</span><br><span class="line">            <span class="comment">//函数名称</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;name:&quot;</span>,Imports[i].name);</span><br><span class="line">            <span class="comment">//属于的模块</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;module:&quot;</span>,Imports[i].module);</span><br><span class="line">            <span class="comment">//函数地址</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;address:&quot;</span>,Imports[i].address);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(frida_Module,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">输出如下：</span><br><span class="line">[Google Pixel::com.roysue.roysueapplication]-&gt; type: <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function"><span class="title">name</span>: <span class="title">__cxa_atexit</span></span></span><br><span class="line"><span class="function"><span class="title">module</span>: /<span class="title">system</span>/<span class="title">lib</span>/<span class="title">libc</span>.<span class="title">so</span></span></span><br><span class="line"><span class="function"><span class="title">address</span>: 0<span class="title">xf58f4521</span></span></span><br><span class="line"><span class="function"><span class="title">type</span>: <span class="function"><span class="keyword">function</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="title">name</span>: <span class="title">__cxa_finalize</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="title">module</span>: /<span class="title">system</span>/<span class="title">lib</span>/<span class="title">libc</span>.<span class="title">so</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="title">address</span>: 0<span class="title">xf58f462d</span>                                                                                                                                           </span></span></span><br><span class="line"><span class="function"><span class="function"><span class="title">type</span>: <span class="function"><span class="keyword">function</span></span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="title">name</span>: <span class="title">__stack_chk_fail</span></span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="title">module</span>: /<span class="title">system</span>/<span class="title">lib</span>/<span class="title">libc</span>.<span class="title">so</span></span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="title">address</span>: 0<span class="title">xf58e2681</span></span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function">...</span></span></span></span><br></pre></td></tr></table></figure><h2 id="Module-enumerateExports"><a href="#Module-enumerateExports" class="headerlink" title="Module.enumerateExports()"></a>Module.enumerateExports()</h2><p>获取指定 so 的所有导出函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">frida_Module</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> hooks = Module.load(<span class="string">&#x27;libhello.so&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> Exports = hooks.enumerateExports();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; Exports.length; i++) &#123;</span><br><span class="line">            <span class="comment">//函数类型</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;type:&quot;</span>,Exports[i].type);</span><br><span class="line">            <span class="comment">//函数名称</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;name:&quot;</span>,Exports[i].name);</span><br><span class="line">            <span class="comment">//函数地址</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;address:&quot;</span>,Exports[i].address);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(frida_Module,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">输出如下：</span><br><span class="line">[Google Pixel::com.roysue.roysueapplication]-&gt; type: <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function"><span class="title">name</span>: <span class="title">Java_com_roysue_roysueapplication_hellojni_getSum</span></span></span><br><span class="line"><span class="function"><span class="title">address</span>: 0<span class="title">xdf2d411b</span></span></span><br><span class="line"><span class="function"><span class="title">type</span>: <span class="function"><span class="keyword">function</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="title">name</span>: <span class="title">unw_save_vfp_as_X</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="title">address</span>: 0<span class="title">xdf2d4c43</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="title">type</span>: <span class="function"><span class="keyword">function</span></span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="title">address</span>: 0<span class="title">xdf2d4209</span></span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="title">type</span>: <span class="function"><span class="keyword">function</span></span></span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="function">...</span></span></span></span></span><br></pre></td></tr></table></figure><h2 id="Module-enumerateSymbols"><a href="#Module-enumerateSymbols" class="headerlink" title="Module.enumerateSymbols()"></a>Module.enumerateSymbols()</h2><p>获取指定 so 的所有符号表</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">frida_Module</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> hooks = Module.load(<span class="string">&#x27;libc.so&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">Symbol</span> = hooks.enumerateSymbols();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">Symbol</span>.length; i++) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;isGlobal:&quot;</span>,<span class="built_in">Symbol</span>[i].isGlobal);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;type:&quot;</span>,<span class="built_in">Symbol</span>[i].type);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;section:&quot;</span>,<span class="built_in">JSON</span>.stringify(<span class="built_in">Symbol</span>[i].section));</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;name:&quot;</span>,<span class="built_in">Symbol</span>[i].name);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;address:&quot;</span>,<span class="built_in">Symbol</span>[i].address);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(frida_Module,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">输出如下：</span><br><span class="line">isGlobal: <span class="literal">true</span></span><br><span class="line">type: <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function"><span class="title">section</span>: </span>&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;13.text&quot;</span>,<span class="string">&quot;protection&quot;</span>:<span class="string">&quot;r-x&quot;</span>&#125;</span><br><span class="line">name: _Unwind_GetRegionStart</span><br><span class="line">address: <span class="number">0xf591c798</span></span><br><span class="line">isGlobal: <span class="literal">true</span></span><br><span class="line">type: <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function"><span class="title">section</span>: </span>&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;13.text&quot;</span>,<span class="string">&quot;protection&quot;</span>:<span class="string">&quot;r-x&quot;</span>&#125;</span><br><span class="line">name: _Unwind_GetTextRelBase</span><br><span class="line">address: <span class="number">0xf591c7cc</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Module-findExportByName-exportName-Module-getExportByName-exportName"><a href="#Module-findExportByName-exportName-Module-getExportByName-exportName" class="headerlink" title="Module.findExportByName(exportName), Module.getExportByName(exportName)"></a>Module.findExportByName(exportName), Module.getExportByName(exportName)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">frida_Module</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Module.getExportByName(<span class="string">&#x27;libhello.so&#x27;</span>, <span class="string">&#x27;c_getStr&#x27;</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Java_com_roysue_roysueapplication_hellojni_getStr address:&quot;</span>,Module.findExportByName(<span class="string">&#x27;libhello.so&#x27;</span>, <span class="string">&#x27;Java_com_roysue_roysueapplication_hellojni_getStr&#x27;</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Java_com_roysue_roysueapplication_hellojni_getStr address:&quot;</span>,Module.getExportByName(<span class="string">&#x27;libhello.so&#x27;</span>, <span class="string">&#x27;Java_com_roysue_roysueapplication_hellojni_getStr&#x27;</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(frida_Module,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">输出如下：</span><br><span class="line">Java_com_roysue_roysueapplication_hellojni_getStr address: <span class="number">0xdf2d413d</span></span><br><span class="line">Java_com_roysue_roysueapplication_hellojni_getStr address: <span class="number">0xdf2d413d</span></span><br></pre></td></tr></table></figure><h2 id="Module-findBaseAddress-name-、Module-getBaseAddress-name"><a href="#Module-findBaseAddress-name-、Module-getBaseAddress-name" class="headerlink" title="Module.findBaseAddress(name)、Module.getBaseAddress(name)"></a>Module.findBaseAddress(name)、Module.getBaseAddress(name)</h2><p>返回 name 模块的绝对基地址</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">frida_Module</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> name = <span class="string">&quot;libhello.so&quot;</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;so address:&quot;</span>,Module.findBaseAddress(name));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;so address:&quot;</span>,Module.getBaseAddress(name));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(frida_Module,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">输出如下：</span><br><span class="line">so address: <span class="number">0xdf2d3000</span></span><br><span class="line">so address: <span class="number">0xdf2d3000</span></span><br></pre></td></tr></table></figure><h1 id="Memory-对象"><a href="#Memory-对象" class="headerlink" title="Memory 对象"></a>Memory 对象</h1><p>Memory 的一些 API 通常是对内存处理, 譬如 <code>Memroy.copy()</code>用来复制内存; 又或者<code>Memory.writeByteArray</code>写入字节到指定内存中;</p><h2 id="Memory-scan搜索内存数据"><a href="#Memory-scan搜索内存数据" class="headerlink" title="Memory.scan搜索内存数据"></a>Memory.scan搜索内存数据</h2><p>其主要功能是搜索内存中以<code>address</code>地址开始，搜索长度为<code>size</code>，需要搜是条件是<code>pattern，callbacks</code>搜索之后的回调函数；此函数相当于搜索内存的功能。</p><p><img src="https://secure2.wostatic.cn/static/s4TvuvJFChcSmq4pPCUpDd/image.png" alt="img"></p><p>如果我想搜索在内存中<code>112A</code>地址的起始数据要怎么做，代码示例如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">frida_Memory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//先获取so的module对象</span></span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">module</span> = Process.findModuleByName(<span class="string">&quot;libhello.so&quot;</span>); </span><br><span class="line">        <span class="comment">//??是通配符</span></span><br><span class="line">        <span class="keyword">var</span> pattern = <span class="string">&quot;03 49 ?? 50 20 44&quot;</span>;</span><br><span class="line">        <span class="comment">//基址</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;base:&quot;</span>+<span class="built_in">module</span>.base)</span><br><span class="line">        <span class="comment">//从so的基址开始搜索，搜索大小为so文件的大小，搜指定条件03 49 ?? 50 20 44的数据</span></span><br><span class="line">        <span class="keyword">var</span> res = Memory.scan(<span class="built_in">module</span>.base, <span class="built_in">module</span>.size, pattern, &#123;</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span>(<span class="params">address, size</span>)</span>&#123;</span><br><span class="line">                <span class="comment">//搜索成功</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;搜索到 &#x27;</span> +pattern +<span class="string">&quot; 地址是:&quot;</span>+ address.toString());  </span><br><span class="line">            &#125;, </span><br><span class="line">            onError: <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">                <span class="comment">//搜索失败</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;搜索失败&#x27;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            onComplete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="comment">//搜索完毕</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;搜索完毕&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(frida_Memory,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>先来看看回调函数的含义，<code>onMatch：function(address，size)</code>：使用包含作为<code>NativePointer</code>的实例地址的<code>address</code>和指定大小为数字的<code>size</code>调用，此函数可能会返回字符串<code>STOP</code>以提前取消内存扫描。<code>onError：Function(Reason)</code>：当扫描时出现内存访问错误时使用原因调用。<code>onComplete：function()</code>：当内存范围已完全扫描时调用。</p><p>我们来来说上面这段代码做了什么事情：搜索<code>libhello.so</code>文件在内存中的数据，搜索以<code>pattern</code>条件的在内存中能匹配的数据。搜索到之后根据回调函数返回数据。</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2022-02-18-084808.png"></p><h2 id="搜索内存数据Memory-scanSync"><a href="#搜索内存数据Memory-scanSync" class="headerlink" title="搜索内存数据Memory.scanSync"></a>搜索内存数据Memory.scanSync</h2><p>功能与<code>Memory.scan</code>一样，只不过它是返回多个匹配到条件的数据。代码示例如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">frida_Memory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">module</span> = Process.findModuleByName(<span class="string">&quot;[libhello.so](http://libhello.so)&quot;</span>); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> pattern = <span class="string">&quot;03 49 ?? 50 20 44&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> scanSync = Memory.scanSync(<span class="built_in">module</span>.base, <span class="built_in">module</span>.size, pattern);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;scanSync:&quot;</span>+<span class="built_in">JSON</span>.stringify(scanSync));</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(frida_Memory,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出如下，可以看到地址搜索出来是一样的</span></span><br><span class="line"></span><br><span class="line">scanSync:[&#123;<span class="string">&quot;address&quot;</span>:<span class="string">&quot;0xdf2d412a&quot;</span>,<span class="string">&quot;size&quot;</span>:<span class="number">6</span>&#125;]</span><br></pre></td></tr></table></figure><h2 id="Memory-alloc"><a href="#Memory-alloc" class="headerlink" title="Memory.alloc()"></a>Memory.alloc()</h2><p>在目标进程中的堆上申请<code>size</code>大小的内存，并且会按照<code>Process.pageSize</code>对齐，返回一个<code>NativePointer</code>，并且申请的内存如果在<code>JavaScript</code>里面没有对这个内存的使用的时候会自动释放的。也就是说，如果你不想要这个内存被释放，你需要自己保存一份对这个内存块的引用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">frida_Memory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> r = Memory.alloc(<span class="number">10</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(hexdump(r, &#123;</span><br><span class="line">            offset: <span class="number">0</span>,</span><br><span class="line">            length: <span class="number">10</span>,</span><br><span class="line">            header: <span class="literal">true</span>,</span><br><span class="line">            ansi: <span class="literal">false</span></span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(frida_Memory,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="Memory-allocUtf8String-Memory-allocUtf16String-Memory-allocAnsiString"><a href="#Memory-allocUtf8String-Memory-allocUtf16String-Memory-allocAnsiString" class="headerlink" title="Memory.allocUtf8String(),Memory.allocUtf16String(),Memory.allocAnsiString()"></a>Memory.allocUtf8String(),Memory.allocUtf16String(),Memory.allocAnsiString()</h2><p><code>Memory.allocUtf8String(str)</code> 分配utf字符串</p><p><code>Memory.allocUtf16String</code> 分配utf16字符串</p><p><code>Memory.allocAnsiString</code> 分配ansi字符串</p><h2 id="内存复制Memory-copy"><a href="#内存复制Memory-copy" class="headerlink" title="内存复制Memory.copy"></a>内存复制Memory.copy</h2><p>如同<code>c api memcp</code>一样调用，使用案例如下。</p><p>从<code>module.base</code>中复制<code>10</code>个字节的内存到新年申请的<code>r</code>内</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">frida_Memory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//获取so模块的Module对象</span></span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">module</span> = Process.findModuleByName(<span class="string">&quot;libhello.so&quot;</span>); </span><br><span class="line">        <span class="comment">//条件</span></span><br><span class="line">        <span class="keyword">var</span> pattern = <span class="string">&quot;03 49 ?? 50 20 44&quot;</span>;</span><br><span class="line">        <span class="comment">//搜字符串 只是为了将so的内存数据复制出来 方便演示~</span></span><br><span class="line">        <span class="keyword">var</span> scanSync = Memory.scanSync(<span class="built_in">module</span>.base, <span class="built_in">module</span>.size, pattern);</span><br><span class="line">        <span class="comment">//申请一个内存空间大小为10个字节</span></span><br><span class="line">        <span class="keyword">const</span> r = Memory.alloc(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//复制以module.base地址开始的10个字节 那肯定会是7F 45 4C 46...因为一个ELF文件的Magic属性如此。</span></span><br><span class="line">        Memory.copy(r,<span class="built_in">module</span>.base,<span class="number">10</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(hexdump(r, &#123;</span><br><span class="line">            offset: <span class="number">0</span>,</span><br><span class="line">            length: <span class="number">10</span>,</span><br><span class="line">            header: <span class="literal">true</span>,</span><br><span class="line">            ansi: <span class="literal">false</span></span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(frida_Memory,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="写入内存Memory-writeByteArray"><a href="#写入内存Memory-writeByteArray" class="headerlink" title="写入内存Memory.writeByteArray"></a>写入内存Memory.writeByteArray</h2><p>将字节数组写入一个指定内存，代码示例如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">frida_Memory</span>(<span class="params"></span>) </span>&#123;     </span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//定义需要写入的字节数组 这个字节数组是字符串&quot;roysue&quot;的十六进制</span></span><br><span class="line">        <span class="keyword">var</span> arr = [ <span class="number">0x72</span>, <span class="number">0x6F</span>, <span class="number">0x79</span>, <span class="number">0x73</span>, <span class="number">0x75</span>, <span class="number">0x65</span>];</span><br><span class="line">        <span class="comment">//申请一个新的内存空间 返回指针 大小是arr.length</span></span><br><span class="line">        <span class="keyword">const</span> r = Memory.alloc(arr.length);</span><br><span class="line">        <span class="comment">//将arr数组写入R地址中</span></span><br><span class="line">        Memory.writeByteArray(r,arr);</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        <span class="built_in">console</span>.log(hexdump(r, &#123;</span><br><span class="line">            offset: <span class="number">0</span>,</span><br><span class="line">            length: arr.length,</span><br><span class="line">            header: <span class="literal">true</span>,</span><br><span class="line">            ansi: <span class="literal">false</span></span><br><span class="line">        &#125;));  </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(frida_Memory,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">输出如下。</span><br><span class="line">           <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line"><span class="number">00000000</span>  <span class="number">72</span> 6f <span class="number">79</span> <span class="number">73</span> <span class="number">75</span> <span class="number">65</span>                                roysue</span><br></pre></td></tr></table></figure><h2 id="读取内存Memory-readByteArray"><a href="#读取内存Memory-readByteArray" class="headerlink" title="读取内存Memory.readByteArray"></a>读取内存Memory.readByteArray</h2><p>将一个指定地址的数据按照 c 中bytearray进行读取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">frida_Memory</span>(<span class="params"></span>) </span>&#123;     </span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//定义需要写入的字节数组 这个字节数组是字符串&quot;roysue&quot;的十六进制</span></span><br><span class="line">        <span class="keyword">var</span> arr = [ <span class="number">0x72</span>, <span class="number">0x6F</span>, <span class="number">0x79</span>, <span class="number">0x73</span>, <span class="number">0x75</span>, <span class="number">0x65</span>];</span><br><span class="line">        <span class="comment">//申请一个新的内存空间 返回指针 大小是arr.length</span></span><br><span class="line">        <span class="keyword">const</span> r = Memory.alloc(arr.length);</span><br><span class="line">        <span class="comment">//将arr数组写入R地址中</span></span><br><span class="line">        Memory.writeByteArray(r,arr);</span><br><span class="line">        <span class="comment">//读取r指针，长度是arr.length 也就是会打印上面一样的值</span></span><br><span class="line">        <span class="keyword">var</span> buffer = Memory.readByteArray(r, arr.length);</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Memory.readByteArray:&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(hexdump(buffer, &#123;</span><br><span class="line">            offset: <span class="number">0</span>,</span><br><span class="line">            length: arr.length,</span><br><span class="line">            header: <span class="literal">true</span>,</span><br><span class="line">            ansi: <span class="literal">false</span></span><br><span class="line">        &#125;));</span><br><span class="line">      &#125;);  </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(frida_Memory,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出如下。</span></span><br><span class="line">[Google Pixel::com.roysue.roysueapplication]-&gt; Memory.readByteArray:</span><br><span class="line">           <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line"><span class="number">00000000</span>  <span class="number">72</span> 6f <span class="number">79</span> <span class="number">73</span> <span class="number">75</span> <span class="number">65</span>                                roysue</span><br></pre></td></tr></table></figure><h1 id="hook-fgets-让-TracerPid-为-0"><a href="#hook-fgets-让-TracerPid-为-0" class="headerlink" title="hook fgets 让 TracerPid 为 0"></a>hook fgets 让 TracerPid 为 0</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> anti_fgets = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fgetsPtr = Module.findExportByName(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;fgets&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> fgets = <span class="keyword">new</span> NativeFunction(fgetsPtr, <span class="string">&#x27;pointer&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>]);</span><br><span class="line">    Interceptor.replace(fgetsPtr, <span class="keyword">new</span> NativeCallback(<span class="function"><span class="keyword">function</span> (<span class="params">buffer, size, fp</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> retval = fgets(buffer, size, fp);</span><br><span class="line">        <span class="keyword">var</span> bufstr = Memory.readUtf8String(buffer);</span><br><span class="line">        <span class="keyword">if</span> (bufstr.indexOf(<span class="string">&quot;TracerPid:&quot;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(bufstr); <span class="comment">//此代码由我添加，打印TracerPid的值</span></span><br><span class="line">            Memory.writeUtf8String(buffer, <span class="string">&quot;TracerPid:\t0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retval;</span><br><span class="line">    &#125;, <span class="string">&#x27;pointer&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>]));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="frida-批量-trace"><a href="#frida-批量-trace" class="headerlink" title="frida 批量 trace"></a>frida 批量 trace</h1><ol><li> 使用 native_trace 对关键函数进行批量 trace, 获取 trace.log</li><li> 使用 python 脚本提取其中的地址, 编辑了模板快速使用 <code>trace</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">native_trace = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">16071 ms     | sub_1494c4()                  ;debug 最终结果出现位置 (md5resultPtr, len, resultPtr)</span></span><br><span class="line"><span class="string"> 16071 ms     | sub_2546c()</span></span><br><span class="line"><span class="string"> 16071 ms     | sub_28d18()</span></span><br><span class="line"><span class="string"> 16071 ms     |    | sub_bc028()</span></span><br><span class="line"><span class="string"> 16071 ms     |    |    | sub_cf970()</span></span><br><span class="line"><span class="string"> 16071 ms     |    |    |    | sub_d4680()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">addr_list = re.findall(<span class="string">r&quot;sub_(.*)\(\)&quot;</span>, native_trace)</span><br><span class="line">addr_list = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:<span class="string">&quot;0x&quot;</span> + x, addr_list))</span><br><span class="line">print(addr_list)</span><br></pre></td></tr></table></figure><ol><li> 使用 trace 出来的地址使用 frida 批量进行 hook; 编辑了模板快速使用 <code>print_arg</code>和 <code>trace</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// native</span></span><br><span class="line"><span class="keyword">var</span> base = Process.findModuleByName(<span class="string">&quot;libhello-jni.so&quot;</span>).base;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print_arg</span>(<span class="params">addr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> range = Process.findRangeByAddress(addr);</span><br><span class="line">    <span class="keyword">if</span> (range != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> hexdump(addr) + <span class="string">&#x27;\r\n&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ptr(addr) + <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">native_trace</span>(<span class="params">addr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> offset = addr;</span><br><span class="line">    addr = base.add(addr);</span><br><span class="line">    Interceptor.attach(addr, &#123;</span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// frida 设计的时候就无法获知 args 的长度</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;======================onenter sub_&quot;</span> + offset + <span class="string">&quot;==========================&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="built_in">eval</span>(<span class="string">&quot;this.arg&quot;</span> + i + <span class="string">&quot;=args[&quot;</span> + i + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;this.arg&quot;</span> + i, print_arg(<span class="built_in">eval</span>(<span class="string">&quot;this.arg&quot;</span> + i)));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span> (<span class="params">returnValue</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;======================onleave sub_&quot;</span> + offset + <span class="string">&quot;==========================&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;this.arg&quot;</span> + i, print_arg(<span class="built_in">eval</span>(<span class="string">&quot;this.arg&quot;</span> + i)))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;returnVlaue&quot;</span>, print_arg(returnValue));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> trace_list = [<span class="string">&#x27;0x1494c4&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; trace_list.length; i++) &#123;</span><br><span class="line">        native_trace(trace_list[i]);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><ul><li>  r0ysue</li><li>  yang</li></ul>]]></content>
      
      
      <categories>
          
          <category> frida </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frida hook java</title>
      <link href="frida/frida-hook-java/"/>
      <url>frida/frida-hook-java/</url>
      
        <content type="html"><![CDATA[<h1 id="frida-hook-java"><a href="#frida-hook-java" class="headerlink" title="frida hook java"></a>frida hook java</h1><hr><h1 id="Frida-启动"><a href="#Frida-启动" class="headerlink" title="Frida 启动"></a>Frida 启动</h1><h2 id="attach-启动"><a href="#attach-启动" class="headerlink" title="attach 启动"></a>attach 启动</h2><p>直接附加到指定包名的应用中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U com.kevin.android -l hook.js</span><br></pre></td></tr></table></figure><p>直接附加到当前应用中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -UF -l hook.js</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">import frida</span><br><span class="line"></span><br><span class="line">def on_message(message,data):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;message&quot;</span>,message)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data&quot;</span>,data)</span><br><span class="line"></span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line">session = device.attach(<span class="string">&quot;com.kevin.demo1&quot;</span>)</span><br><span class="line"></span><br><span class="line">with open(<span class="string">&quot;./demo1.js&quot;</span>,<span class="string">&quot;r&quot;</span>) as f:</span><br><span class="line">    script = session.create_script(f.read())</span><br><span class="line"></span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>,on_message)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><h2 id="spawn-启动"><a href="#spawn-启动" class="headerlink" title="spawn 启动"></a>spawn 启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U -f com.kevin.android -l demo1.js --no-pause</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">import frida</span><br><span class="line"></span><br><span class="line">def on_message(message,data):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;message&quot;</span>,message)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data&quot;</span>,data)</span><br><span class="line"></span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line">pid = device.spawn([<span class="string">&quot;com.kevin.demo1&quot;</span>])</span><br><span class="line">device.resume(pid)</span><br><span class="line">session = device.attach(pid)</span><br><span class="line"></span><br><span class="line">with open(<span class="string">&quot;./rpc_demo.js&quot;</span>,<span class="string">&#x27;r&#x27;</span>) as f:</span><br><span class="line">    script = session.create_script(f.read())</span><br><span class="line"></span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>,on_message)</span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><h1 id="frida-server-自定义端口"><a href="#frida-server-自定义端口" class="headerlink" title="frida-server 自定义端口"></a>frida-server 自定义端口</h1><h2 id="frida-server"><a href="#frida-server" class="headerlink" title="frida server"></a>frida server</h2><p>更改 frida server 默认端口: 27042 并开启远程连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su -</span><br><span class="line"><span class="built_in">cd</span> /data/<span class="built_in">local</span>/tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入 wifiadb 对应的 ip 和自定义端口</span></span><br><span class="line">./frida-server -l 192.168.0.1:6666</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用默认端口启动</span></span><br><span class="line">./frida-server -l 192.168.0.1</span><br></pre></td></tr></table></figure><h2 id="frida"><a href="#frida" class="headerlink" title="frida"></a>frida</h2><p>frida 远程连接自定义端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接指定 6666 端口</span></span><br><span class="line">frida -H 192.168.0.1:6666 com.demo1.app -l demo1.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认使用端口 27042</span></span><br><span class="line">frida -H 192.168.0.1 -l demo1.js</span><br></pre></td></tr></table></figure><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> frida, sys</span><br><span class="line"></span><br><span class="line">jsCode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">console.log(&quot;test&quot;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">message</span>(<span class="params">message, data</span>):</span></span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;send&#x27;</span>:</span><br><span class="line">        print(<span class="string">f&quot;[*] <span class="subst">&#123;message[<span class="string">&#x27;payload&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(message)</span><br><span class="line"><span class="comment"># ./fs120800 -l &quot;0.0.0.0:6666&quot;</span></span><br><span class="line"><span class="comment"># adb wifi 10.0.0.23</span></span><br><span class="line">process = frida.get_device_manager().add_remote_device(<span class="string">&#x27;127.0.0.1:6666&#x27;</span>).attach(<span class="string">&#x27;com.kevin.app&#x27;</span>)</span><br><span class="line">script = process.create_script(jsCode)</span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>,message)</span><br><span class="line">script.load()</span><br><span class="line"><span class="built_in">input</span>()</span><br></pre></td></tr></table></figure><h1 id="Frida-rpc-远程调用"><a href="#Frida-rpc-远程调用" class="headerlink" title="Frida rpc 远程调用"></a>Frida rpc 远程调用</h1><h2 id="python-1"><a href="#python-1" class="headerlink" title="python"></a>python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, request</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">message</span>(<span class="params">message, data</span>):</span></span><br><span class="line">  <span class="keyword">if</span> message[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;send&#x27;</span>:</span><br><span class="line">    print(<span class="string">f&quot;[*] <span class="subst">&#123;message[<span class="string">&#x27;payload&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    print(message)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ./fs120800 -l &quot;0.0.0.0:6666&quot;</span></span><br><span class="line"><span class="comment"># adb wifi 10.0.0.123</span></span><br><span class="line"><span class="comment"># 远程 frida-server 路径 adb wifi 的 ip : frida-server 启动的端口</span></span><br><span class="line">session = frida.get_device_manager().add_remote_device(<span class="string">&#x27;10.0.0.123:6666&#x27;</span>).attach(<span class="string">&#x27;com.example.demoso1&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/Users/zhangyang/codes/fridaProject/rpcDemo/hook.js&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    jsCode = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;加载代码&quot;, jsCode)</span></span><br><span class="line">script = session.create_script(jsCode)</span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>,message)</span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;加密&quot;,&quot;1213&quot;)</span></span><br><span class="line"><span class="comment"># encodeResult = script.exports.invokemethod01(&quot;123&quot;)</span></span><br><span class="line"><span class="comment"># decodeResult = script.exports.invokemethod02(encodeResult)</span></span><br><span class="line"><span class="comment"># print(decodeResult)</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/encrypt&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span><span class="comment">#data解密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_class</span>():</span></span><br><span class="line">    data = request.get_data()</span><br><span class="line">    json_data = json.loads(data.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    postdata = json_data.get(<span class="string">&quot;data&quot;</span>)</span><br><span class="line">    res = script.exports.invokemethod01(postdata)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/decrypt&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span><span class="comment">#url加密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_class</span>():</span></span><br><span class="line">    data = request.get_data()</span><br><span class="line">    json_data = json.loads(data.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    postdata = json_data.get(<span class="string">&quot;data&quot;</span>)</span><br><span class="line">    print(postdata)</span><br><span class="line">    res = script.exports.invokemethod02(postdata)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  app.run()</span><br></pre></td></tr></table></figure><h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///&lt;reference path=&#x27;/Users/zhangyang/node_modules/@types/frida-gum/index.d.ts&#x27;/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先 hook 方法 method01</span></span><br><span class="line"><span class="comment">// function hookmethod1()&#123;</span></span><br><span class="line"><span class="comment">//     Java.perform(function()&#123;</span></span><br><span class="line"><span class="comment">//         var targetClass = Java.use(&quot;com.example.demoso1.MainActivity&quot;);</span></span><br><span class="line"><span class="comment">//         targetClass.method01.implementation = function(str)&#123;</span></span><br><span class="line"><span class="comment">//             console.log(&quot;str is &quot;, str);</span></span><br><span class="line"><span class="comment">//             var result = this.method01(str);</span></span><br><span class="line"><span class="comment">//             console.log(&quot;result is &quot;, result);</span></span><br><span class="line"><span class="comment">//             return result;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;)</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主动调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fridamethod01</span>(<span class="params">inputStr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="literal">null</span>;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> targetClass = Java.use(<span class="string">&quot;com.example.demoso1.MainActivity&quot;</span>);</span><br><span class="line">        result = targetClass.method01(inputStr);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fridamethod02</span>(<span class="params">inputStr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// public native String method02(String str);</span></span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.choose(<span class="string">&quot;com.example.demoso1.MainActivity&quot;</span>,&#123;</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span>(<span class="params">ins</span>)</span>&#123;</span><br><span class="line">                result = ins.method02(inputStr);</span><br><span class="line">            &#125;,</span><br><span class="line">            onComplete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优先测试 js 中的主动调用</span></span><br><span class="line"><span class="comment">// function main()&#123;</span></span><br><span class="line"><span class="comment">//     console.log(&quot;你好 -&gt; 结果为:&quot;, fridamethod01(&quot;你好&quot;));</span></span><br><span class="line"><span class="comment">//     console.log(&quot;27cae29a0913f6791705ca10be31a3e0 -&gt; 结果为&quot;, fridamethod02(&quot;27cae29a0913f6791705ca10be31a3e0&quot;))</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// setImmediate(main);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于主动调用设置 rpc</span></span><br><span class="line">rpc.exports = &#123;</span><br><span class="line">    invokemethod01: fridamethod01,</span><br><span class="line">    invokemethod02: fridamethod02,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h2><p>tmp.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;data&quot;</span>: <span class="string">&quot;62feb9a98a01945ab06c0dd7823adc57&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">siege -c30 -r1 <span class="string">&quot;&lt;http://127.0.0.1:5000/encrypt&gt; POST &lt; tmp.json&quot;</span></span><br></pre></td></tr></table></figure><h2 id="nps-进行内网穿透"><a href="#nps-进行内网穿透" class="headerlink" title="nps 进行内网穿透"></a>nps 进行内网穿透</h2><ol><li><p>nps server 启动<br />mac: <code>sudo nps start</code></p></li><li><p>新建客户端<br /><br />安卓手机连接客户端 <code>./npc -server=10.0.0.124:8024 -vkey=hm40rtjpf2j3c1up -type=tcp</code><br> <img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2022-02-18-083034.png" title="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-01-14-032324.png"></p></li><li><p>给客户端添加和 frida server 的端口映射<br />安卓手机启动 frida-server: <code>./fs12800 -l 0.0.0.0:6666</code><br /><br />将目标 frida-server 的端口映射到 56666 端口上<br> <img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2022-02-18-083032.png" title="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-01-14-032703.png"></p></li><li><p>python 脚本更改和 frida-server 的连接<br />此时就可以将 frida-server 开放到公网了;</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session = frida.get_device_manager().add_remote_device(<span class="string">&#x27;10.0.0.124:56666&#x27;</span>).attach(<span class="string">&#x27;com.example.demoso1&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><h1 id="Hook-普通方法"><a href="#Hook-普通方法" class="headerlink" title="Hook 普通方法"></a>Hook 普通方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> UtilsClass = Java.use(<span class="string">&quot;com.kevin.app.Utils&quot;</span>);</span><br><span class="line">        UtilsClass.getCalc.implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">          <span class="comment">// 打印信息</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;a:&#x27;</span> + a + <span class="string">&#x27; &#x27;</span> + <span class="string">&#x27;b:&#x27;</span> + b);</span><br><span class="line">          <span class="comment">// 调用原方法获取结果</span></span><br><span class="line">          <span class="keyword">var</span> value = <span class="built_in">this</span>.getCalc(a, b);</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;result:&#x27;</span>,value);</span><br><span class="line">            <span class="comment">// 修改返回值</span></span><br><span class="line">          <span class="keyword">return</span> <span class="number">123456</span>;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><h1 id="Hook-重载方法"><a href="#Hook-重载方法" class="headerlink" title="Hook 重载方法"></a>Hook 重载方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> UtilsClass = Java.use(<span class="string">&quot;com.kevin.app.Utils&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重载无参方法</span></span><br><span class="line">        UtilsClass.test.overload().implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;hook overload no args&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.test();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 重载有参方法 - 基础数据类型</span></span><br><span class="line">    UtilsClass.test.overload(<span class="string">&#x27;int&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;hook overload int args&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> myNum = <span class="number">9999</span>;</span><br><span class="line">            <span class="keyword">var</span> oriResult = <span class="built_in">this</span>.test(num);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;oriResult is :&quot;</span> + oriResult);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.test(myNum);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 重载有参方法 - 引用数据类型</span></span><br><span class="line">        UtilsClass.test.overload(<span class="string">&#x27;com.kevin.app.Money&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">money</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;hook Money args&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.test(money);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// hook 指定方法的所有重载</span></span><br><span class="line">        <span class="keyword">var</span> ClassName = Java.use(<span class="string">&quot;com.xiaojianbang.app.Utils&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> overloadsLength = ClassName.test.overloads.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; overloadsLength; i++)&#123;</span><br><span class="line">            ClassName.test.overloads[i].implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 遍历打印 arguments </span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="number">0</span>; a &lt; <span class="built_in">arguments</span>.length; a++)&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(a + <span class="string">&quot; : &quot;</span> + <span class="built_in">arguments</span>[a]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 调用原方法</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.test.apply(<span class="built_in">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><h1 id="Hook-构造方法"><a href="#Hook-构造方法" class="headerlink" title="Hook 构造方法"></a>Hook 构造方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// hook 构造方法 $init</span></span><br><span class="line">        <span class="keyword">var</span> MoneyClass = Java.use(<span class="string">&quot;com.kevin.app.Money&quot;</span>);</span><br><span class="line">        MoneyClass.$init.overload().implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;hook Money $init&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.$init();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><h1 id="Hook-对象"><a href="#Hook-对象" class="headerlink" title="Hook 对象"></a>Hook 对象</h1><ol><li>通过 <code>Java.choose</code>找到指定对象</li><li>通过<code>Java.use</code>找到对应的类, 在手动调用构造方法构造对象</li><li>hook 动态方法, 此时的<code>this</code>就是对象本身; </li><li>hook 以目标对象作为参数的方法, 此时该参数就是对象;</li></ol><p>使用 choose 查找对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// hook instance</span></span><br><span class="line">        Java.choose(<span class="string">&quot;com.xiaojianbang.app.Money&quot;</span>,&#123;</span><br><span class="line">            onMatch : <span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;find it!!&quot;</span>, instance.getInfo());</span><br><span class="line">                <span class="comment">// something to do...</span></span><br><span class="line">            &#125;,</span><br><span class="line">            </span><br><span class="line">            onComplete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;compelete!!!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><p>使用 retain 保存对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> Activity = Java.use(<span class="string">&#x27;android.app.Activity&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> lastActivity = <span class="literal">null</span>;</span><br><span class="line">  Activity.onResume.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    lastActivity = Java.retain(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.onResume();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Hook-动静态成员属性"><a href="#Hook-动静态成员属性" class="headerlink" title="Hook 动静态成员属性"></a>Hook 动静态成员属性</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> MoneyClass = Java.use(<span class="string">&quot;com.xiaojianbang.app.Money&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// get static properties</span></span><br><span class="line">        <span class="comment">// need to use .value</span></span><br><span class="line">        <span class="keyword">var</span> ori_property = MoneyClass.flag.value;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;ori_property: &quot;</span>, ori_property);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// change static properties </span></span><br><span class="line">        MoneyClass.flag.value = <span class="string">&quot;change the value&quot;</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;change to : &quot;</span>, MoneyClass.flag.value);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// get dynamic properties </span></span><br><span class="line">        Java.choose(<span class="string">&quot;com.xiaojianbang.app.Money&quot;</span>,&#123;</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">                instance.num.value = <span class="number">50000</span>;</span><br><span class="line">                <span class="comment">// 当对象的成员属性和成员方法名重复时,成员属性前加`_`,进行区分</span></span><br><span class="line">                instance._name.value = <span class="string">&quot;ouyuan&quot;</span>; </span><br><span class="line">                <span class="built_in">console</span>.log(instance._name.value, instance.num.value, instance.flag.value);</span><br><span class="line">            &#125;,</span><br><span class="line">            </span><br><span class="line">            onComplete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;complete!!&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><h1 id="Hook-内部类"><a href="#Hook-内部类" class="headerlink" title="Hook 内部类"></a>Hook 内部类</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perfor(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// hook 内部类</span></span><br><span class="line">        <span class="comment">// 内部类使用$进行分隔 不使用.</span></span><br><span class="line">        <span class="keyword">var</span> InnerClass = Java.use(<span class="string">&quot;com.xiaojianbang.app.Money$innerClass&quot;</span>);</span><br><span class="line">        <span class="comment">// 重写内部类的 $init 方法</span></span><br><span class="line">        InnerClass.$init.overload(<span class="string">&quot;java.lang.String&quot;</span>,<span class="string">&quot;int&quot;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;x: &quot;</span>,x);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;y: &quot;</span>,y);</span><br><span class="line">            <span class="built_in">this</span>.$init(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><h1 id="Hook-匿名类"><a href="#Hook-匿名类" class="headerlink" title="Hook 匿名类"></a>Hook 匿名类</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口, 抽象类, 不可以被new</span></span><br><span class="line"><span class="comment">// 接口, 抽象类 要使用必须要实例化, 实例化不是通过new, 而是通过实现接口方法, 继承抽象类等方式</span></span><br><span class="line"><span class="comment">// new __接口__&#123;&#125; 可以理解成 new 了一个实现接口的匿名类, 在匿名类的内部(花括号内),实现了这个接口</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// hook 匿名类</span></span><br><span class="line">        <span class="comment">// 匿名类在 smail中以 $1, $2 等方式存在, 需要通过 java 行号去 smail 找到准确的匿名类名称 </span></span><br><span class="line">        <span class="keyword">var</span> NiMingClass = Java.use(<span class="string">&quot;com.xiaojianbang.app.MainActivity$1&quot;</span>);</span><br><span class="line">        NiMingClass.getInfo.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;kevin change 匿名类&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><h1 id="Hook-类的所有方法"><a href="#Hook-类的所有方法" class="headerlink" title="Hook 类的所有方法"></a>Hook 类的所有方法</h1><ul><li><code>Java.enumerateLoadedClasses()</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.enumerateLoadedClasses(&#123;</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span>(<span class="params">name,handle</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (name.indexOf(<span class="string">&quot;com.xiaojianbang.app.Money&quot;</span>) != -<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(name,handle);</span><br><span class="line">                    <span class="comment">// 利用反射 获取类中的所有方法</span></span><br><span class="line">                    <span class="keyword">var</span> TargetClass = Java.use(name);</span><br><span class="line">                    <span class="comment">// return Method Object List</span></span><br><span class="line">                    <span class="keyword">var</span> methodsList = TargetClass.class.getDeclaredMethods(); </span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; methodsList.length; i++)&#123;</span><br><span class="line">                        <span class="comment">// Method Objection getName()</span></span><br><span class="line">                        <span class="built_in">console</span>.log(methodsList[i].getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            </span><br><span class="line">            onComplete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;complete!!!&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Java.enumerateLoadedClassesSync()</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// return String[] class name</span></span><br><span class="line">        <span class="keyword">var</span> classList = Java.enumerateLoadedClassesSync();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; classList.length; i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> targetClass = classList[i];</span><br><span class="line">            <span class="keyword">if</span> (targetClass.indexOf(<span class="string">&quot;com.xiaojianbang.app.Money&quot;</span>) != -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;hook the class: &quot;</span>, targetClass);</span><br><span class="line">              <span class="keyword">var</span> TargetClass = Java.use(targetClass);</span><br><span class="line">                <span class="comment">// 利用反射获取类中的所有方法</span></span><br><span class="line">              <span class="keyword">var</span> methodsList = TargetClass.class.getDeclaredMethods();</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">var</span> k=<span class="number">0</span>; k &lt; methodsList.length; k++)&#123;</span><br><span class="line">                  <span class="built_in">console</span>.log(methodsList[k].getName());</span><br><span class="line">              &#125;               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><h1 id="Hook-类的所有方法及重载"><a href="#Hook-类的所有方法及重载" class="headerlink" title="Hook 类的所有方法及重载"></a>Hook 类的所有方法及重载</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// hook md5 class in app</span></span><br><span class="line">        <span class="comment">// 1. iterate classes</span></span><br><span class="line">        <span class="keyword">var</span> classList = Java.enumerateLoadedClassesSync();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; classList.length; i++)&#123;</span><br><span class="line">            <span class="comment">// 筛选过滤 只遍历 MD5 下面的方法</span></span><br><span class="line">            <span class="keyword">if</span> (classList[i].indexOf(<span class="string">&quot;com.xiaojianbang.app.MD5&quot;</span>) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> className = classList[i];</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;class name is :&quot;</span>, className);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 2. get methods of the class</span></span><br><span class="line">                <span class="comment">// 返回一个 Methods对象的数组</span></span><br><span class="line">                <span class="keyword">var</span> methodsList = Java.use(className).class.getDeclaredMethods();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> k=<span class="number">0</span>; k&lt;methodsList.length; k++)&#123;                    </span><br><span class="line">                    <span class="comment">// console.log(&quot;method is :&quot;,methodsList[k],typeof(methodsList[k]));</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 3. Method object.getName() --&gt; methodName and class[methodName] to hook method</span></span><br><span class="line">                    <span class="keyword">var</span> methodName = methodsList[k].getName(); <span class="comment">// </span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// console.log(&#x27;methodName&#x27;,methodName);</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 4. use apply and arguments to implementation</span></span><br><span class="line">                    <span class="keyword">var</span> hookClass = Java.use(className);</span><br><span class="line">                    <span class="comment">// 5. overloads</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> o = <span class="number">0</span>; o&lt; hookClass[methodName].overloads.length; o++)&#123;</span><br><span class="line">                        hookClass[methodName].overloads[o].implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">var</span> a=<span class="number">0</span>; a&lt;<span class="built_in">arguments</span>.length; a++)&#123;</span><br><span class="line">                                <span class="built_in">console</span>.log(<span class="string">&#x27;argument &#x27;</span>,a,<span class="built_in">arguments</span>[a]);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">// return this[methodName].apply(this,arguments);</span></span><br><span class="line">                            <span class="keyword">return</span> <span class="string">&quot;fucking the md5&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-动态加载的-dex"><a href="#Hook-动态加载的-dex" class="headerlink" title="Hook 动态加载的 dex"></a>Hook 动态加载的 dex</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.enumerateClassLoaders(&#123;</span><br><span class="line">            onMatch : <span class="function"><span class="keyword">function</span>(<span class="params">loader</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// loadClass or findClass</span></span><br><span class="line">                    <span class="keyword">if</span> (loader.loadClass(<span class="string">&quot;com.xiaojianbang.app.Dynamic&quot;</span>))&#123;</span><br><span class="line">                        Java.classFactory.loader = loader;</span><br><span class="line">                        <span class="keyword">var</span> hookClass = Java.use(<span class="string">&quot;com.xiaojianbang.app.Dynamic&quot;</span>);</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&quot;success hook it :&quot;</span>, hookClass);</span><br><span class="line">                        <span class="comment">// something to do;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                    <span class="comment">// pass</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            </span><br><span class="line">            onComplete: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;complete !!! &quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><p>经常在加壳的 app 中, 没办法正确找到正常加载 app 类的 classloader, 可以使用以下代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Java.enumerateClassLoadersSync().forEach(<span class="function"><span class="keyword">function</span> (<span class="params">classloader</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;classloader&quot;</span>, classloader);</span><br><span class="line">                classloader.loadClass(<span class="string">&quot;com.kanxue.encrypt01.MainActivity&quot;</span>);</span><br><span class="line">                Java.classFactory.loader = classloader;</span><br><span class="line">                <span class="keyword">var</span> mainActivityClass = Java.use(<span class="string">&quot;com.kanxue.encrypt01.MainActivity&quot;</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;mainActivityClass&quot;</span>, mainActivityClass);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;error&quot;</span>, error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-主动构造数组"><a href="#Hook-主动构造数组" class="headerlink" title="Hook 主动构造数组"></a>Hook 主动构造数组</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mainArray</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> myCharList = Java.array(<span class="string">&quot;char&quot;</span>,[<span class="string">&#x27;一&#x27;</span>,<span class="string">&#x27;去&#x27;</span>,<span class="string">&#x27;二&#x27;</span>,<span class="string">&#x27;三&#x27;</span>,<span class="string">&#x27;里&#x27;</span>]);</span><br><span class="line">        <span class="keyword">var</span> myStringList = Java.array(<span class="string">&quot;java.lang.String&quot;</span>,[<span class="string">&quot;一&quot;</span>,<span class="string">&quot;二&quot;</span>,<span class="string">&quot;三&quot;</span>]);</span><br><span class="line">        <span class="keyword">var</span> ArrayClass = Java.use(<span class="string">&quot;java.util.Arrays&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(ArrayClass.toString(myCharList));</span><br><span class="line">        <span class="built_in">console</span>.log(ArrayClass.toString(myStringList));</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-cast-强制类型转换"><a href="#Hook-cast-强制类型转换" class="headerlink" title="Hook cast 强制类型转换"></a>Hook cast 强制类型转换</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java.cast() 子类可以强转成父类, 父类不能转成子类</span></span><br><span class="line"><span class="comment">// 可以使用Java.cast()将子类强转成父类, 再调用父类的动态方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">castDemo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> JuiceHandle = <span class="literal">null</span>; <span class="comment">// 用来存储内存中找到的Juice对象</span></span><br><span class="line">        <span class="keyword">var</span> WaterClass = Java.use(<span class="string">&quot;com.r0ysue.a0526printout.Water&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        Java.choose(<span class="string">&quot;com.r0ysue.a0526printout.Juice&quot;</span>,&#123;</span><br><span class="line">      onComplete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">                JuiceHandle = instance;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;instance:&quot;</span>, instance);</span><br><span class="line">                <span class="comment">// 调用Juice对象的方法</span></span><br><span class="line">                <span class="built_in">console</span>.log(JuiceHandle.fillEnergy());</span><br><span class="line">                <span class="comment">// 子类Juice转父类Water 并调用父类的动态方法</span></span><br><span class="line">                <span class="keyword">var</span> WaterInstance = Java.cast(JuiceHandle,WaterClass);</span><br><span class="line">                <span class="built_in">console</span>.log(WaterInstance.still(WaterInstance));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-打印类实现的接口"><a href="#Hook-打印类实现的接口" class="headerlink" title="Hook 打印类实现的接口"></a>Hook 打印类实现的接口</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">searchInterface</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.enumerateLoadedClasses(&#123;</span><br><span class="line">            onComplete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span>(<span class="params">name,handle</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (name.indexOf(<span class="string">&quot;com.r0ysue.a0526printout&quot;</span>) &gt; -<span class="number">1</span>) &#123; <span class="comment">// 使用包名进行过滤</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;find class&quot;</span>);</span><br><span class="line">                    <span class="keyword">var</span> targetClass = Java.use(name);</span><br><span class="line">                    <span class="keyword">var</span> interfaceList = targetClass.class.getInterfaces(); <span class="comment">// 使用反射获取类实现的接口数组</span></span><br><span class="line">                    <span class="keyword">if</span> (interfaceList.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(name) <span class="comment">// 打印类名</span></span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> interfaceList) &#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(<span class="string">&quot;\t&quot;</span>, interfaceList[i].toString()); <span class="comment">// 直接打印接口名称</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-enum-枚举"><a href="#Hook-enum-枚举" class="headerlink" title="Hook enum 枚举"></a>Hook enum 枚举</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enumPrint</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.choose(<span class="string">&quot;com.r0ysue.a0526printout.Signal&quot;</span>,&#123;</span><br><span class="line">            onComplete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;find it ,&#x27;</span>,instance);</span><br><span class="line">                <span class="built_in">console</span>.log(instance.class.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-获取-context"><a href="#Hook-获取-context" class="headerlink" title="Hook 获取 context"></a>Hook 获取 context</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getContext</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> currentApplication = Java.use(<span class="string">&quot;android.app.ActivityThread&quot;</span>).currentApplication();</span><br><span class="line">        <span class="built_in">console</span>.log(currentApplication);</span><br><span class="line">        <span class="keyword">var</span> context = currentApplication.getApplicationContext();</span><br><span class="line">        <span class="built_in">console</span>.log(context);</span><br><span class="line">        <span class="keyword">var</span> packageName = context.getPackageName();</span><br><span class="line">        <span class="built_in">console</span>.log(packageName);</span><br><span class="line">        <span class="built_in">console</span>.log(currentApplication.getPackageName());</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-主动调用构造方法"><a href="#Hook-主动调用构造方法" class="headerlink" title="Hook 主动调用构造方法"></a>Hook 主动调用构造方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> StringClass = Java.use(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> MoneyClass = Java.use(<span class="string">&quot;com.xiaojianbang.app.Money&quot;</span>);</span><br><span class="line">        MoneyClass.$init.overload(<span class="string">&#x27;java.lang.String&#x27;</span>,<span class="string">&#x27;int&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;hook Money init&#x27;</span>);</span><br><span class="line">            <span class="keyword">var</span> myX = StringClass.new(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> myY = <span class="number">9999</span>;</span><br><span class="line">            <span class="built_in">this</span>.$init(myX,myY);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><h1 id="Hook-主动调用静态方法"><a href="#Hook-主动调用静态方法" class="headerlink" title="Hook 主动调用静态方法"></a>Hook 主动调用静态方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main_rsa</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> RSA = Java.use(<span class="string">&quot;com.xiaojianbang.app.RSA&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> StringClass = Java.use(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> base64Class = Java.use(<span class="string">&quot;android.util.Base64&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> myBytes = StringClass.$new(<span class="string">&quot;Hello World&quot;</span>).getBytes();</span><br><span class="line">        <span class="keyword">var</span> result = RSA.encrypt(myBytes);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;result is :&quot;</span>, result);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;json result is: &quot;</span>,<span class="built_in">JSON</span>.stringify(result));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;base64 result is :&quot;</span>, base64Class.encodeToString(result,<span class="number">0</span>));</span><br><span class="line">        <span class="comment">// console.log(&quot;new String is : &quot;, StringClass.$new(result)); // 加密之后的内容有很多不可见字符, 不能直接 new String()</span></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main_rsa);</span><br></pre></td></tr></table></figure><h1 id="Hook-主动调用动态方法"><a href="#Hook-主动调用动态方法" class="headerlink" title="Hook 主动调用动态方法"></a>Hook 主动调用动态方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非静态方法的主动调用 自定义instance 并调用 非静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main_getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> instance = Java.use(<span class="string">&quot;com.xiaojianbang.app.Money&quot;</span>).$new(<span class="string">&quot;日元&quot;</span>,<span class="number">300000</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(instance.getInfo());</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历所有的对象并调用 需要进行过滤</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main_instance_getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.choose(<span class="string">&quot;com.xiaojianbang.app.Money&quot;</span>,&#123;</span><br><span class="line">            onComplete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(instance.getInfo());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-frida-和-python-交互"><a href="#Hook-frida-和-python-交互" class="headerlink" title="Hook frida 和 python 交互"></a>Hook frida 和 python 交互</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">frida 传递参数</span><br><span class="line">function main()&#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        console.log(&quot;enter perform&quot;);</span><br><span class="line">        &#x2F;&#x2F; 获取要hook的类</span><br><span class="line">        var TextViewClass &#x3D; Java.use(&quot;android.widget.TextView&quot;);</span><br><span class="line">        &#x2F;&#x2F; 要hook的方法</span><br><span class="line">        TextViewClass.setText.overload(&#39;java.lang.CharSequence&#39;).implementation &#x3D; function (ori_input) &#123;</span><br><span class="line">            console.log(&#39;enter&#39;, &#39;java.lang.CharSequence&#39;);</span><br><span class="line">            console.log(&#39;ori_input&#39;,ori_input.toString());</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 定义用于接受python传参的data</span><br><span class="line">            var receive_data;</span><br><span class="line">            &#x2F;&#x2F; 将原参数传递给python 在python中进行处理</span><br><span class="line">            send(ori_input.toString());</span><br><span class="line">            &#x2F;&#x2F; recv 从python接收传递的内容 默认传过来的是个json对象</span><br><span class="line">            recv(function (json_data) &#123;</span><br><span class="line">                console.log(&#39;data from python &#39; + json_data.data);</span><br><span class="line">                receive_data &#x3D; json_data.data;</span><br><span class="line">                console.log(typeof (receive_data));</span><br><span class="line">            &#125;).wait(); &#x2F;&#x2F;wait() 等待python处理 阻塞</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 转java字符串</span><br><span class="line">            receive_data &#x3D; Java.use(&quot;java.lang.String&quot;).$new(receive_data);</span><br><span class="line">            this.setText(receive_data);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br><span class="line">python 处理收到的参数</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">__author__ &#x3D; &quot;K&quot;</span><br><span class="line">__time__ &#x3D; &quot;2020-08-06 09:48&quot;</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">import base64</span><br><span class="line">import frida</span><br><span class="line">from loguru import logger</span><br><span class="line"></span><br><span class="line">def on_message(message,data):</span><br><span class="line">    logger.info(str(message)) # dict</span><br><span class="line">    logger.info(str(data) if data else &quot;None&quot;)</span><br><span class="line"></span><br><span class="line">    if message[&#39;type&#39;] &#x3D;&#x3D; &#39;error&#39;:</span><br><span class="line">        logger.error(&#39;error:&#39; + str(message[&#39;description&#39;]))</span><br><span class="line">        logger.error(&#39;stack: &#39; + str(message[&#39;stack&#39;]))</span><br><span class="line"></span><br><span class="line">    if message[&#39;type&#39;] &#x3D;&#x3D; &#39;send&#39;:</span><br><span class="line">        logger.info(&#39;get message [*] --&gt; &#39; + message[&#39;payload&#39;])</span><br><span class="line"></span><br><span class="line">        payload &#x3D; message[&#39;payload&#39;]</span><br><span class="line">        # 处理逻辑 sending to the server: YWFhOmJiYg&#x3D;&#x3D;</span><br><span class="line">        tmp &#x3D; payload.split(&#39;:&#39;)</span><br><span class="line">        sts &#x3D; tmp[0]</span><br><span class="line">        need_to_db64 &#x3D; tmp[1]</span><br><span class="line">        user_pass &#x3D; base64.b64decode(need_to_db64.encode()).decode()</span><br><span class="line"></span><br><span class="line">        mine_str &#x3D; &#39;admin&#39; + &#39;:&#39; + user_pass.split(&#39;:&#39;)[-1]</span><br><span class="line">        mine_b64_str &#x3D; base64.b64encode(mine_str.encode()).decode()</span><br><span class="line">        mine_b64_str &#x3D; sts + mine_b64_str</span><br><span class="line">        logger.info(mine_b64_str)</span><br><span class="line"></span><br><span class="line">        # python返回数据给js script.post</span><br><span class="line">        script.post(&#123;&#39;data&#39;:mine_b64_str&#125;)</span><br><span class="line">        logger.info(&#39;python complete&#39;)</span><br><span class="line"></span><br><span class="line">device &#x3D; frida.get_usb_device()</span><br><span class="line"># pid &#x3D; device.spawn([&#39;com.kevin.demo04&#39;])</span><br><span class="line"># time.sleep(1)</span><br><span class="line">session &#x3D; device.attach(&#39;com.kevin.demo02&#39;)</span><br><span class="line">with open(&#39;.&#x2F;hulianhutong.js&#39;,&#39;r&#39;) as f:</span><br><span class="line">    script &#x3D; session.create_script(f.read())</span><br><span class="line"></span><br><span class="line">script.on(&quot;message&quot;,on_message)</span><br><span class="line">script.load()</span><br><span class="line">input()</span><br></pre></td></tr></table></figure><h1 id="Hook-打印-char"><a href="#Hook-打印-char" class="headerlink" title="Hook 打印 char"></a>Hook 打印 char</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印char字符, 直接调用java.lang.Character toString()即可</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> CharClass = Java.use(<span class="string">&quot;java.lang.Character&quot;</span>);</span><br><span class="line">        CharClass.toString.overload(<span class="string">&quot;char&quot;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">inputChar</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="built_in">this</span>.toString(inputChar);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;inputChar, result: &quot;</span>, inputChar, result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-打印-char-数组"><a href="#Hook-打印-char-数组" class="headerlink" title="Hook 打印 char 数组"></a>Hook 打印 char 数组</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 使用 java.util.Arrays 的 toString 方法 打印 [C </span></span><br><span class="line"><span class="comment">// 2. 使用 js 的 JSON.stringify 打印 [C</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printCharArray</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ArrayClass = Java.use(<span class="string">&quot;java.util.Arrays&quot;</span>);</span><br><span class="line">        ArrayClass.toString.overload(<span class="string">&#x27;[C&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">charArray</span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 1. java.util.Arrays.toString()</span></span><br><span class="line">            <span class="keyword">var</span> result = <span class="built_in">this</span>.toString(charArray);</span><br><span class="line">            <span class="comment">// 2. javascript JSON.stringify()</span></span><br><span class="line">            <span class="keyword">var</span> result1 = <span class="built_in">JSON</span>.stringify(charArray);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;charArray, result : &#x27;</span>, charArray, result);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;charArray, result :&#x27;</span>, charArray, result1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-打印和修改-HashMap"><a href="#Hook-打印和修改-HashMap" class="headerlink" title="Hook 打印和修改 HashMap"></a>Hook 打印和修改 HashMap</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">遍历打印</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> targetClass = Java.use(<span class="string">&quot;com.xiaojianbang.app.ShufferMap&quot;</span>);</span><br><span class="line">        targetClass.show.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">map</span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 遍历 map</span></span><br><span class="line">          <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">          <span class="keyword">var</span> it = map.keySet().iterator();</span><br><span class="line">          <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">              <span class="keyword">var</span> keyStr = it.next();</span><br><span class="line">              <span class="keyword">var</span> valueStr = map.get(keyStr);</span><br><span class="line">                result += valueStr;</span><br><span class="line">          &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;result :&quot;</span>, result);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 修改 map</span></span><br><span class="line">            map.put(<span class="string">&quot;pass&quot;</span>,<span class="string">&quot;fxxk&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;code&quot;</span>,<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(map));</span><br><span class="line">            <span class="built_in">this</span>.show(map);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.show(map);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br><span class="line"></span><br><span class="line"><span class="comment">// cast打印 HashMap</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> HashMapNode = Java.use(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> targetClass = Java.use(<span class="string">&quot;com.xiaojianbang.app.ShufferMap&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> targetClass.show.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">map</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">var</span> iterator = map.entrySet().iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;entry&quot;</span>, iterator.next());</span><br><span class="line">                <span class="keyword">var</span> entry = Java.cast(iterator.next(), HashMapNode);</span><br><span class="line">                <span class="built_in">console</span>.log(entry.getKey());</span><br><span class="line">                <span class="built_in">console</span>.log(entry.getValue());</span><br><span class="line">                <span class="keyword">return</span> += entry.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;result is :&quot;</span>, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><p><code>toString()</code>打印</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> targetClass = Java.use(<span class="string">&quot;com.xiaojianbang.app.ShufferMap&quot;</span>);</span><br><span class="line">        targetClass.show.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">map</span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 直接调用 toString()</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;打印hashmap: -&gt; &quot;</span> + map.toString());</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.show.apply(<span class="built_in">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printHashMap</span>(<span class="params">flag, param_hm</span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> HashMap = Java.use(<span class="string">&#x27;java.util.HashMap&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> args_map = Java.cast(param_hm, HashMap);</span><br><span class="line">        send(flag +<span class="string">&quot;:&quot;</span> + args_map.toString());</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-打印-byte-数组"><a href="#Hook-打印-byte-数组" class="headerlink" title="Hook 打印 byte 数组"></a>Hook 打印 byte 数组</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">方法 <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> StringClass = Java.use(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> byteArray = StringClass.$new(<span class="string">&quot;Hello World&quot;</span>).getBytes();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// load r0gson</span></span><br><span class="line">          <span class="comment">// openClassFile 返回 dex对象, dex对象.load()加载dex文件内容</span></span><br><span class="line">            Java.openClassFile(<span class="string">&quot;/data/local/tmp/r0gson.dex&quot;</span>).load();</span><br><span class="line">            <span class="keyword">var</span> gson = Java.use(<span class="string">&quot;com.r0ysue.gson.Gson&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(gson.$new().toJson(byteArray));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// // console byte[]</span></span><br><span class="line">            <span class="comment">// var ByteString = Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span></span><br><span class="line">            <span class="comment">// console.log(ByteString.of(byteArray).hex()); // byte转16进制字符串</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// // 创建自定义Java数组 并打印</span></span><br><span class="line">            <span class="comment">// var MyArray = Java.array(&quot;byte&quot;,[13,4,4,2]);</span></span><br><span class="line">            <span class="comment">// console.log(gson.$new().toJson(MyArray));</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> TargetClass = Java.use(<span class="string">&quot;com.xiaojianbang.app.ShufferMap&quot;</span>);</span><br><span class="line">            TargetClass.show.implementation =  <span class="function"><span class="keyword">function</span>(<span class="params">map</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(gson.$new().toJson(map));</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.show(map);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br><span class="line">方法 <span class="number">2</span></span><br><span class="line"><span class="comment">// 1. 使用 java.util.Arrays.toString() 打印 [B</span></span><br><span class="line"><span class="comment">// 2. 使用 javascript JSON.stringify() 打印 [B</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printByteArray</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ArrayClass = Java.use(<span class="string">&quot;java.util.Arrays&quot;</span>);</span><br><span class="line">        ArrayClass.toString.overload(<span class="string">&#x27;[B&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">byteArray</span>)</span>&#123;</span><br><span class="line">      <span class="comment">// 1. 使用 java.util.Arrays.toString() 打印 [B</span></span><br><span class="line">            <span class="keyword">var</span> result = <span class="built_in">this</span>.toString(byteArray);</span><br><span class="line">      <span class="comment">// 2. 使用 javascript JSON.stringify() 打印 [B</span></span><br><span class="line">            <span class="keyword">var</span> result1 = <span class="built_in">JSON</span>.stringify(byteArray);</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;byteArray,result: &#x27;</span>, byteArray, result);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;byteArray,result1 :&#x27;</span>, byteArray, result1);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">方法 <span class="number">3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printByteArray</span>(<span class="params">byteArray</span>)</span>&#123;</span><br><span class="line">  Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ByteString = Java.use(<span class="string">&quot;com.android.okhttp.okio.ByteString&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(ByteString.of(byteArray).hex())</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-打印调用栈"><a href="#Hook-打印调用栈" class="headerlink" title="Hook 打印调用栈"></a>Hook 打印调用栈</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printStacks</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;====== printStacks start ====== &quot;</span> + name + <span class="string">&quot;==============================&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// sample 1</span></span><br><span class="line">    <span class="keyword">var</span> throwable = Java.use(<span class="string">&quot;android.util.Log&quot;</span>).getStackTraceString(Java.use(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new());</span><br><span class="line">    <span class="built_in">console</span>.log(throwable);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sample 2</span></span><br><span class="line">    <span class="keyword">var</span> exception = Java.use(<span class="string">&quot;android.util.Log&quot;</span>).getStackTraceString(Java.use(<span class="string">&quot;java.lang.Exception&quot;</span>).$new());</span><br><span class="line">    <span class="built_in">console</span>.log(exception);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;====== printStacks end ======== &quot;</span> + name + <span class="string">&quot;==============================&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-gson-打印"><a href="#Hook-gson-打印" class="headerlink" title="Hook gson 打印"></a>Hook gson 打印</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> StringClass = Java.use(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> byteArray = StringClass.$new(<span class="string">&quot;Hello World&quot;</span>).getBytes();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// load r0gson</span></span><br><span class="line">          <span class="comment">// openClassFile 返回 dex对象, dex对象.load()加载dex文件内容</span></span><br><span class="line">            Java.openClassFile(<span class="string">&quot;/data/local/tmp/r0gson.dex&quot;</span>).load();</span><br><span class="line">            <span class="keyword">var</span> gson = Java.use(<span class="string">&quot;com.r0ysue.gson.Gson&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(gson.$new().toJson(byteArray));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// // console byte[]</span></span><br><span class="line">            <span class="comment">// var ByteString = Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span></span><br><span class="line">            <span class="comment">// console.log(ByteString.of(byteArray).hex()); // byte转16进制字符串</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// // 创建自定义Java数组 并打印</span></span><br><span class="line">            <span class="comment">// var MyArray = Java.array(&quot;byte&quot;,[13,4,4,2]);</span></span><br><span class="line">            <span class="comment">// console.log(gson.$new().toJson(MyArray));</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> TargetClass = Java.use(<span class="string">&quot;com.xiaojianbang.app.ShufferMap&quot;</span>);</span><br><span class="line">            TargetClass.show.implementation =  <span class="function"><span class="keyword">function</span>(<span class="params">map</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(gson.$new().toJson(map));</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.show(map);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><h1 id="Hook-打印-non-ascii-和特殊字符"><a href="#Hook-打印-non-ascii-和特殊字符" class="headerlink" title="Hook 打印 non-ascii 和特殊字符"></a>Hook 打印 non-ascii 和特殊字符</h1><p>一些特殊字符和不可见字符, 可以先通过编码再解码的方式进行 <code>hook</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ֏(<span class="keyword">int</span> x) &#123;</span><br><span class="line">        <span class="keyword">return</span> x + <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>针对上面的<code>֏</code>, 直接用<code>js</code>编码, 在通过<code>类名[js解码的方法名]</code>进行<code>implementation</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> targetClass = <span class="string">&quot;com.example.hooktest.MainActivity&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> hookCls = Java.use(targetClass);</span><br><span class="line">            <span class="keyword">var</span> methods = hookCls.class.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> methods) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(methods[i].toString());</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">encodeURIComponent</span>(methods[i].toString().replace(<span class="regexp">/^.*?\.([^\s\.\(\)]+)\(.*?$/</span>, <span class="string">&quot;$1&quot;</span>)));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            hookCls[<span class="built_in">decodeURIComponent</span>(<span class="string">&quot;%D6%8F&quot;</span>)]</span><br><span class="line">                .implementation = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;original call: fun(&quot;</span> + x + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">                    <span class="keyword">var</span> result = <span class="built_in">this</span>[<span class="built_in">decodeURIComponent</span>(<span class="string">&quot;%D6%8F&quot;</span>)](<span class="number">900</span>);</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h1 id="简易-wallbreaker-内存打印"><a href="#简易-wallbreaker-内存打印" class="headerlink" title="简易 wallbreaker 内存打印"></a>简易 wallbreaker 内存打印</h1><p>内存漫游, 打印实例的字段和方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> Class = Java.use(<span class="string">&quot;java.lang.Class&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">inspectObject</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> obj_class = Java.cast(obj.getClass(), Class);</span><br><span class="line">            <span class="keyword">var</span> fields = obj_class.getDeclaredFields();</span><br><span class="line">            <span class="keyword">var</span> methods = obj_class.getMethods();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;Inspectiong &quot;</span> + obj.getClass().toString());</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;\t Fields:&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> fields)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;\t\t&quot;</span> + fields[i].toString());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;\t Methods:&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> methods)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;\t\t&quot;</span> + methods[i].toString())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Java.choose(<span class="string">&quot;com.baidu.lbs.waimai.WaimaiActivity&quot;</span>,&#123;</span><br><span class="line">            onComplete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;complete!&quot;</span>);</span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;find instance&quot;</span>, instance);</span><br><span class="line">                inspectObject(instance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><h1 id="hook-frida-实现-runnable"><a href="#hook-frida-实现-runnable" class="headerlink" title="hook frida 实现 runnable"></a>hook frida 实现 runnable</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">// https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_SECURE</span></span><br><span class="line">   <span class="keyword">var</span> FLAG_SECURE = <span class="number">0x2000</span>;</span><br><span class="line">   <span class="keyword">var</span> Runnable = Java.use(<span class="string">&quot;java.lang.Runnable&quot;</span>);</span><br><span class="line">   <span class="keyword">var</span> DisableSecureRunnable = Java.registerClass(&#123;</span><br><span class="line">      name: <span class="string">&quot;me.bhamza.DisableSecureRunnable&quot;</span>,</span><br><span class="line">      implements: [Runnable],</span><br><span class="line">      fields: &#123;</span><br><span class="line">          activity: <span class="string">&quot;android.app.Activity&quot;</span>,</span><br><span class="line">       &#125;,</span><br><span class="line">       methods: &#123;</span><br><span class="line">          $init: [&#123;</span><br><span class="line">             returnType: <span class="string">&quot;void&quot;</span>,</span><br><span class="line">             argumentTypes: [<span class="string">&quot;android.app.Activity&quot;</span>],</span><br><span class="line">             implementation: <span class="function"><span class="keyword">function</span> (<span class="params">activity</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.activity.value = activity;</span><br><span class="line">             &#125;</span><br><span class="line">          &#125;],</span><br><span class="line">          run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">             <span class="keyword">var</span> flags = <span class="built_in">this</span>.activity.value.getWindow().getAttributes().flags.value; <span class="comment">// get current value</span></span><br><span class="line">             flags &amp;= ~FLAG_SECURE; <span class="comment">// toggle it</span></span><br><span class="line">             <span class="built_in">this</span>.activity.value.getWindow().setFlags(flags, FLAG_SECURE); <span class="comment">// disable it!</span></span><br><span class="line">             <span class="built_in">console</span>.log(<span class="string">&quot;Done disabling SECURE flag...&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    Java.choose(<span class="string">&quot;com.example.app.FlagSecureTestActivity&quot;</span>, &#123;</span><br><span class="line">       <span class="string">&quot;onMatch&quot;</span>: <span class="function"><span class="keyword">function</span> (<span class="params">instance</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> runnable = DisableSecureRunnable.$new(instance);</span><br><span class="line">          instance.runOnUiThread(runnable);</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="string">&quot;onComplete&quot;</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><h1 id="Hook-监控控件-onClick"><a href="#Hook-监控控件-onClick" class="headerlink" title="Hook 监控控件 onClick"></a>Hook 监控控件 onClick</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jclazz = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> jobj = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getObjClassName</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!jclazz) &#123;</span><br><span class="line">        <span class="keyword">var</span> jclazz = Java.use(<span class="string">&quot;java.lang.Class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!jobj) &#123;</span><br><span class="line">        <span class="keyword">var</span> jobj = Java.use(<span class="string">&quot;java.lang.Object&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jclazz.getName.call(jobj.getClass.call(obj));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">watch</span>(<span class="params">obj, mtdName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> listener_name = getObjClassName(obj);</span><br><span class="line">    <span class="keyword">var</span> target = Java.use(listener_name);</span><br><span class="line">    <span class="keyword">if</span> (!target || !mtdName <span class="keyword">in</span> target) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// send(&quot;[WatchEvent] hooking &quot; + mtdName + &quot;: &quot; + listener_name);</span></span><br><span class="line">    target[mtdName].overloads.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">overload</span>) </span>&#123;</span><br><span class="line">        overload.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//send(&quot;[WatchEvent] &quot; + mtdName + &quot;: &quot; + getObjClassName(this));</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;[WatchEvent] &quot;</span> + mtdName + <span class="string">&quot;: &quot;</span> + getObjClassName(<span class="built_in">this</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>[mtdName].apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">OnClickListener</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//以spawn启动进程的模式来attach的话</span></span><br><span class="line">        Java.use(<span class="string">&quot;android.view.View&quot;</span>).setOnClickListener.implementation = <span class="function"><span class="keyword">function</span> (<span class="params">listener</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (listener != <span class="literal">null</span>) &#123;</span><br><span class="line">                watch(listener, <span class="string">&#x27;onClick&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.setOnClickListener(listener);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果frida以attach的模式进行attch的话</span></span><br><span class="line">        Java.choose(<span class="string">&quot;android.view.View$ListenerInfo&quot;</span>, &#123;</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span> (<span class="params">instance</span>) </span>&#123;</span><br><span class="line">                instance = instance.mOnClickListener.value;</span><br><span class="line">                <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;mOnClickListener name is :&quot;</span> + getObjClassName(instance));</span><br><span class="line">                    watch(instance, <span class="string">&#x27;onClick&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            onComplete: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(OnClickListener);</span><br></pre></td></tr></table></figure><h1 id="Hook-startActivity"><a href="#Hook-startActivity" class="headerlink" title="Hook startActivity"></a>Hook startActivity</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Activity = Java.use(<span class="string">&quot;android.app.Activity&quot;</span>);</span><br><span class="line">    <span class="comment">//console.log(Object.getOwnPropertyNames(Activity));</span></span><br><span class="line">    Activity.startActivity.overload(<span class="string">&#x27;android.content.Intent&#x27;</span>).implementation=<span class="function"><span class="keyword">function</span>(<span class="params">p1</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Hooking android.app.Activity.startActivity(p1) successfully,p1=&quot;</span>+p1);</span><br><span class="line">        <span class="built_in">console</span>.log(Java.use(<span class="string">&quot;android.util.Log&quot;</span>).getStackTraceString(Java.use(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">decodeURIComponent</span>(p1.toUri(<span class="number">256</span>)));</span><br><span class="line">        <span class="built_in">this</span>.startActivity(p1);</span><br><span class="line">    &#125;</span><br><span class="line">    Activity.startActivity.overload(<span class="string">&#x27;android.content.Intent&#x27;</span>, <span class="string">&#x27;android.os.Bundle&#x27;</span>).implementation=<span class="function"><span class="keyword">function</span>(<span class="params">p1,p2</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Hooking android.app.Activity.startActivity(p1,p2) successfully,p1=&quot;</span>+p1+<span class="string">&quot;,p2=&quot;</span>+p2);</span><br><span class="line">        <span class="built_in">console</span>.log(Java.use(<span class="string">&quot;android.util.Log&quot;</span>).getStackTraceString(Java.use(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">decodeURIComponent</span>(p1.toUri(<span class="number">256</span>)));</span><br><span class="line">        <span class="built_in">this</span>.startActivity(p1,p2);</span><br><span class="line">    &#125;</span><br><span class="line">    Activity.startService.overload(<span class="string">&#x27;android.content.Intent&#x27;</span>).implementation=<span class="function"><span class="keyword">function</span>(<span class="params">p1</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Hooking android.app.Activity.startService(p1) successfully,p1=&quot;</span>+p1);</span><br><span class="line">        <span class="built_in">console</span>.log(Java.use(<span class="string">&quot;android.util.Log&quot;</span>).getStackTraceString(Java.use(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">decodeURIComponent</span>(p1.toUri(<span class="number">256</span>)));</span><br><span class="line">        <span class="built_in">this</span>.startService(p1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Hook-frida-实现-activity-跳转"><a href="#Hook-frida-实现-activity-跳转" class="headerlink" title="Hook frida 实现 activity 跳转"></a>Hook frida 实现 activity 跳转</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function jumpActivity() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var context = Java.use(&quot;android.app.ActivityThread&quot;).currentApplication().getApplicationContext();</span><br><span class="line">        var intentClazz = Java.use(&quot;android.content.Intent&quot;);</span><br><span class="line">        var activityClazz = Java.use(&quot;ctrip.android.hotel.view.UI.inquire.HotelInquireActivity&quot;);</span><br><span class="line">        var intentObj = intentClazz.$new(context, activityClazz.class);</span><br><span class="line">        intentObj.setFlags(0x10000000);</span><br><span class="line">        context.startActivity(intentObj);</span><br><span class="line">        console.log(&quot;startActivity&quot;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-frida-绕过-root-检测"><a href="#Hook-frida-绕过-root-检测" class="headerlink" title="Hook frida 绕过 root 检测"></a>Hook frida 绕过 root 检测</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $ frida -l antiroot.js -U -f com.example.app --no-pause</span></span><br><span class="line"><span class="comment">// CHANGELOG by Pichaya Morimoto (p.morimoto@sth.sh): </span></span><br><span class="line"><span class="comment">//  - I added extra whitelisted items to deal with the latest versions </span></span><br><span class="line"><span class="comment">//             of RootBeer/Cordova iRoot as of August 6, 2019</span></span><br><span class="line"><span class="comment">//  - The original one just fucked up (kill itself) if Magisk is installed lol</span></span><br><span class="line"><span class="comment">// Credit &amp; Originally written by: https://codeshare.frida.re/@dzonerzy/fridantiroot/</span></span><br><span class="line"><span class="comment">// If this isn&#x27;t working in the future, check console logs, rootbeer src, or libtool-checker.so</span></span><br><span class="line"></span><br><span class="line">Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> RootPackages = [<span class="string">&quot;com.noshufou.android.su&quot;</span>, <span class="string">&quot;com.noshufou.android.su.elite&quot;</span>, <span class="string">&quot;eu.chainfire.supersu&quot;</span>,</span><br><span class="line">        <span class="string">&quot;com.koushikdutta.superuser&quot;</span>, <span class="string">&quot;com.thirdparty.superuser&quot;</span>, <span class="string">&quot;com.yellowes.su&quot;</span>, <span class="string">&quot;com.koushikdutta.rommanager&quot;</span>,</span><br><span class="line">        <span class="string">&quot;com.koushikdutta.rommanager.license&quot;</span>, <span class="string">&quot;com.dimonvideo.luckypatcher&quot;</span>, <span class="string">&quot;com.chelpus.lackypatch&quot;</span>,</span><br><span class="line">        <span class="string">&quot;com.ramdroid.appquarantine&quot;</span>, <span class="string">&quot;com.ramdroid.appquarantinepro&quot;</span>, <span class="string">&quot;com.devadvance.rootcloak&quot;</span>, <span class="string">&quot;com.devadvance.rootcloakplus&quot;</span>,</span><br><span class="line">        <span class="string">&quot;de.robv.android.xposed.installer&quot;</span>, <span class="string">&quot;com.saurik.substrate&quot;</span>, <span class="string">&quot;com.zachspong.temprootremovejb&quot;</span>, <span class="string">&quot;com.amphoras.hidemyroot&quot;</span>,</span><br><span class="line">        <span class="string">&quot;com.amphoras.hidemyrootadfree&quot;</span>, <span class="string">&quot;com.formyhm.hiderootPremium&quot;</span>, <span class="string">&quot;com.formyhm.hideroot&quot;</span>, <span class="string">&quot;me.phh.superuser&quot;</span>,</span><br><span class="line">        <span class="string">&quot;eu.chainfire.supersu.pro&quot;</span>, <span class="string">&quot;com.kingouser.com&quot;</span>, <span class="string">&quot;com.android.vending.billing.InAppBillingService.COIN&quot;</span>,<span class="string">&quot;com.topjohnwu.magisk&quot;</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> RootBinaries = [<span class="string">&quot;su&quot;</span>, <span class="string">&quot;busybox&quot;</span>, <span class="string">&quot;supersu&quot;</span>, <span class="string">&quot;Superuser.apk&quot;</span>, <span class="string">&quot;KingoUser.apk&quot;</span>, <span class="string">&quot;SuperSu.apk&quot;</span>,<span class="string">&quot;magisk&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> RootProperties = &#123;</span><br><span class="line">        <span class="string">&quot;ro.build.selinux&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ro.debuggable&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;service.adb.root&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ro.secure&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> RootPropertiesKeys = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> RootProperties) RootPropertiesKeys.push(k);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> PackageManager = Java.use(<span class="string">&quot;android.app.ApplicationPackageManager&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> Runtime = Java.use(<span class="string">&#x27;java.lang.Runtime&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> NativeFile = Java.use(<span class="string">&#x27;java.io.File&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">String</span> = Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> SystemProperties = Java.use(<span class="string">&#x27;android.os.SystemProperties&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> BufferedReader = Java.use(<span class="string">&#x27;java.io.BufferedReader&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ProcessBuilder = Java.use(<span class="string">&#x27;java.lang.ProcessBuilder&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> StringBuffer = Java.use(<span class="string">&#x27;java.lang.StringBuffer&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> loaded_classes = Java.enumerateLoadedClassesSync();</span><br><span class="line"></span><br><span class="line">    send(<span class="string">&quot;Loaded &quot;</span> + loaded_classes.length + <span class="string">&quot; classes!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> useKeyInfo = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> useProcessManager = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    send(<span class="string">&quot;loaded: &quot;</span> + loaded_classes.indexOf(<span class="string">&#x27;java.lang.ProcessManager&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (loaded_classes.indexOf(<span class="string">&#x27;java.lang.ProcessManager&#x27;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//useProcessManager = true;</span></span><br><span class="line">            <span class="comment">//var ProcessManager = Java.use(&#x27;java.lang.ProcessManager&#x27;);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            send(<span class="string">&quot;ProcessManager Hook failed: &quot;</span> + err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        send(<span class="string">&quot;ProcessManager hook not loaded&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> KeyInfo = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (loaded_classes.indexOf(<span class="string">&#x27;android.security.keystore.KeyInfo&#x27;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//useKeyInfo = true;</span></span><br><span class="line">            <span class="comment">//var KeyInfo = Java.use(&#x27;android.security.keystore.KeyInfo&#x27;);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            send(<span class="string">&quot;KeyInfo Hook failed: &quot;</span> + err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        send(<span class="string">&quot;KeyInfo hook not loaded&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PackageManager.getPackageInfo.overload(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">pname, flags</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> shouldFakePackage = (RootPackages.indexOf(pname) &gt; -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (shouldFakePackage) &#123;</span><br><span class="line">            send(<span class="string">&quot;Bypass root check for package: &quot;</span> + pname);</span><br><span class="line">            pname = <span class="string">&quot;set.package.name.to.a.fake.one.so.we.can.bypass.it&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getPackageInfo.call(<span class="built_in">this</span>, pname, flags);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    NativeFile.exists.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> name = NativeFile.getName.call(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">var</span> shouldFakeReturn = (RootBinaries.indexOf(name) &gt; -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (shouldFakeReturn) &#123;</span><br><span class="line">            send(<span class="string">&quot;Bypass return value for binary: &quot;</span> + name);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.exists.call(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> exec = Runtime.exec.overload(<span class="string">&#x27;[Ljava.lang.String;&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> exec1 = Runtime.exec.overload(<span class="string">&#x27;java.lang.String&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> exec2 = Runtime.exec.overload(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;[Ljava.lang.String;&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> exec3 = Runtime.exec.overload(<span class="string">&#x27;[Ljava.lang.String;&#x27;</span>, <span class="string">&#x27;[Ljava.lang.String;&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> exec4 = Runtime.exec.overload(<span class="string">&#x27;[Ljava.lang.String;&#x27;</span>, <span class="string">&#x27;[Ljava.lang.String;&#x27;</span>, <span class="string">&#x27;java.io.File&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> exec5 = Runtime.exec.overload(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;[Ljava.lang.String;&#x27;</span>, <span class="string">&#x27;java.io.File&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    exec5.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">cmd, env, dir</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cmd.indexOf(<span class="string">&quot;getprop&quot;</span>) != -<span class="number">1</span> || cmd == <span class="string">&quot;mount&quot;</span> || cmd.indexOf(<span class="string">&quot;build.prop&quot;</span>) != -<span class="number">1</span> || cmd == <span class="string">&quot;id&quot;</span> || cmd == <span class="string">&quot;sh&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> fakeCmd = <span class="string">&quot;grep&quot;</span>;</span><br><span class="line">            send(<span class="string">&quot;Bypass &quot;</span> + cmd + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, fakeCmd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cmd == <span class="string">&quot;su&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> fakeCmd = <span class="string">&quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;</span>;</span><br><span class="line">            send(<span class="string">&quot;Bypass &quot;</span> + cmd + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, fakeCmd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cmd == <span class="string">&quot;which&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> fakeCmd = <span class="string">&quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;</span>;</span><br><span class="line">            send(<span class="string">&quot;Bypass which command&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, fakeCmd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> exec5.call(<span class="built_in">this</span>, cmd, env, dir);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    exec4.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">cmdarr, env, file</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cmdarr.length; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> tmp_cmd = cmdarr[i];</span><br><span class="line">            <span class="keyword">if</span> (tmp_cmd.indexOf(<span class="string">&quot;getprop&quot;</span>) != -<span class="number">1</span> || tmp_cmd == <span class="string">&quot;mount&quot;</span> || tmp_cmd.indexOf(<span class="string">&quot;build.prop&quot;</span>) != -<span class="number">1</span> || tmp_cmd == <span class="string">&quot;id&quot;</span> || tmp_cmd == <span class="string">&quot;sh&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> fakeCmd = <span class="string">&quot;grep&quot;</span>;</span><br><span class="line">                send(<span class="string">&quot;Bypass &quot;</span> + cmdarr + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, fakeCmd);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (tmp_cmd == <span class="string">&quot;su&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> fakeCmd = <span class="string">&quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;</span>;</span><br><span class="line">                send(<span class="string">&quot;Bypass &quot;</span> + cmdarr + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, fakeCmd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> exec4.call(<span class="built_in">this</span>, cmdarr, env, file);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    exec3.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">cmdarr, envp</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cmdarr.length; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> tmp_cmd = cmdarr[i];</span><br><span class="line">            <span class="keyword">if</span> (tmp_cmd.indexOf(<span class="string">&quot;getprop&quot;</span>) != -<span class="number">1</span> || tmp_cmd == <span class="string">&quot;mount&quot;</span> || tmp_cmd.indexOf(<span class="string">&quot;build.prop&quot;</span>) != -<span class="number">1</span> || tmp_cmd == <span class="string">&quot;id&quot;</span> || tmp_cmd == <span class="string">&quot;sh&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> fakeCmd = <span class="string">&quot;grep&quot;</span>;</span><br><span class="line">                send(<span class="string">&quot;Bypass &quot;</span> + cmdarr + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, fakeCmd);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (tmp_cmd == <span class="string">&quot;su&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> fakeCmd = <span class="string">&quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;</span>;</span><br><span class="line">                send(<span class="string">&quot;Bypass &quot;</span> + cmdarr + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, fakeCmd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> exec3.call(<span class="built_in">this</span>, cmdarr, envp);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    exec2.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">cmd, env</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cmd.indexOf(<span class="string">&quot;getprop&quot;</span>) != -<span class="number">1</span> || cmd == <span class="string">&quot;mount&quot;</span> || cmd.indexOf(<span class="string">&quot;build.prop&quot;</span>) != -<span class="number">1</span> || cmd == <span class="string">&quot;id&quot;</span> || cmd == <span class="string">&quot;sh&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> fakeCmd = <span class="string">&quot;grep&quot;</span>;</span><br><span class="line">            send(<span class="string">&quot;Bypass &quot;</span> + cmd + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, fakeCmd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cmd == <span class="string">&quot;su&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> fakeCmd = <span class="string">&quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;</span>;</span><br><span class="line">            send(<span class="string">&quot;Bypass &quot;</span> + cmd + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, fakeCmd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> exec2.call(<span class="built_in">this</span>, cmd, env);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    exec.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">cmd</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cmd.length; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> tmp_cmd = cmd[i];</span><br><span class="line">            <span class="keyword">if</span> (tmp_cmd.indexOf(<span class="string">&quot;getprop&quot;</span>) != -<span class="number">1</span> || tmp_cmd == <span class="string">&quot;mount&quot;</span> || tmp_cmd.indexOf(<span class="string">&quot;build.prop&quot;</span>) != -<span class="number">1</span> || tmp_cmd == <span class="string">&quot;id&quot;</span> || tmp_cmd == <span class="string">&quot;sh&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> fakeCmd = <span class="string">&quot;grep&quot;</span>;</span><br><span class="line">                send(<span class="string">&quot;Bypass &quot;</span> + cmd + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, fakeCmd);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (tmp_cmd == <span class="string">&quot;su&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> fakeCmd = <span class="string">&quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;</span>;</span><br><span class="line">                send(<span class="string">&quot;Bypass &quot;</span> + cmd + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, fakeCmd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> exec.call(<span class="built_in">this</span>, cmd);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    exec1.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">cmd</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cmd.indexOf(<span class="string">&quot;getprop&quot;</span>) != -<span class="number">1</span> || cmd == <span class="string">&quot;mount&quot;</span> || cmd.indexOf(<span class="string">&quot;build.prop&quot;</span>) != -<span class="number">1</span> || cmd == <span class="string">&quot;id&quot;</span> || cmd == <span class="string">&quot;sh&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> fakeCmd = <span class="string">&quot;grep&quot;</span>;</span><br><span class="line">            send(<span class="string">&quot;Bypass &quot;</span> + cmd + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, fakeCmd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cmd == <span class="string">&quot;su&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> fakeCmd = <span class="string">&quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;</span>;</span><br><span class="line">            send(<span class="string">&quot;Bypass &quot;</span> + cmd + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, fakeCmd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, cmd);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>.contains.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="string">&quot;test-keys&quot;</span>) &#123;</span><br><span class="line">            send(<span class="string">&quot;Bypass test-keys check&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.contains.call(<span class="built_in">this</span>, name);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> get = SystemProperties.get.overload(<span class="string">&#x27;java.lang.String&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    get.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (RootPropertiesKeys.indexOf(name) != -<span class="number">1</span>) &#123;</span><br><span class="line">            send(<span class="string">&quot;Bypass &quot;</span> + name);</span><br><span class="line">            <span class="keyword">return</span> RootProperties[name];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.get.call(<span class="built_in">this</span>, name);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Interceptor.attach(Module.findExportByName(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;fopen&quot;</span>), &#123;</span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> path1 = Memory.readCString(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">var</span> path = path1.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> executable = path[path.length - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">var</span> shouldFakeReturn = (RootBinaries.indexOf(executable) &gt; -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> (shouldFakeReturn) &#123;</span><br><span class="line">                Memory.writeUtf8String(args[<span class="number">0</span>], <span class="string">&quot;/ggezxxx&quot;</span>);</span><br><span class="line">                send(<span class="string">&quot;Bypass native fopen &gt;&gt; &quot;</span>+path1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    Interceptor.attach(Module.findExportByName(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;fopen&quot;</span>), &#123;</span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> path1 = Memory.readCString(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">var</span> path = path1.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> executable = path[path.length - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">var</span> shouldFakeReturn = (RootBinaries.indexOf(executable) &gt; -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> (shouldFakeReturn) &#123;</span><br><span class="line">                Memory.writeUtf8String(args[<span class="number">0</span>], <span class="string">&quot;/ggezxxx&quot;</span>);</span><br><span class="line">                send(<span class="string">&quot;Bypass native fopen &gt;&gt; &quot;</span>+path1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    Interceptor.attach(Module.findExportByName(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;system&quot;</span>), &#123;</span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> cmd = Memory.readCString(args[<span class="number">0</span>]);</span><br><span class="line">            send(<span class="string">&quot;SYSTEM CMD: &quot;</span> + cmd);</span><br><span class="line">            <span class="keyword">if</span> (cmd.indexOf(<span class="string">&quot;getprop&quot;</span>) != -<span class="number">1</span> || cmd == <span class="string">&quot;mount&quot;</span> || cmd.indexOf(<span class="string">&quot;build.prop&quot;</span>) != -<span class="number">1</span> || cmd == <span class="string">&quot;id&quot;</span>) &#123;</span><br><span class="line">                send(<span class="string">&quot;Bypass native system: &quot;</span> + cmd);</span><br><span class="line">                Memory.writeUtf8String(args[<span class="number">0</span>], <span class="string">&quot;grep&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cmd == <span class="string">&quot;su&quot;</span>) &#123;</span><br><span class="line">                send(<span class="string">&quot;Bypass native system: &quot;</span> + cmd);</span><br><span class="line">                Memory.writeUtf8String(args[<span class="number">0</span>], <span class="string">&quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    TO IMPLEMENT:</span></span><br><span class="line"><span class="comment">    Exec Family</span></span><br><span class="line"><span class="comment">    int execl(const char *path, const char *arg0, ..., const char *argn, (char *)0);</span></span><br><span class="line"><span class="comment">    int execle(const char *path, const char *arg0, ..., const char *argn, (char *)0, char *const envp[]);</span></span><br><span class="line"><span class="comment">    int execlp(const char *file, const char *arg0, ..., const char *argn, (char *)0);</span></span><br><span class="line"><span class="comment">    int execlpe(const char *file, const char *arg0, ..., const char *argn, (char *)0, char *const envp[]);</span></span><br><span class="line"><span class="comment">    int execv(const char *path, char *const argv[]);</span></span><br><span class="line"><span class="comment">    int execve(const char *path, char *const argv[], char *const envp[]);</span></span><br><span class="line"><span class="comment">    int execvp(const char *file, char *const argv[]);</span></span><br><span class="line"><span class="comment">    int execvpe(const char *file, char *const argv[], char *const envp[]);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    BufferedReader.readLine.overload().implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> text = <span class="built_in">this</span>.readLine.call(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (text === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// just pass , i know it&#x27;s ugly as hell but test != null won&#x27;t work :(</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> shouldFakeRead = (text.indexOf(<span class="string">&quot;ro.build.tags=test-keys&quot;</span>) &gt; -<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (shouldFakeRead) &#123;</span><br><span class="line">                send(<span class="string">&quot;Bypass build.prop file read&quot;</span>);</span><br><span class="line">                text = text.replace(<span class="string">&quot;ro.build.tags=test-keys&quot;</span>, <span class="string">&quot;ro.build.tags=release-keys&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> text;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> executeCommand = ProcessBuilder.command.overload(<span class="string">&#x27;java.util.List&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    ProcessBuilder.start.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cmd = <span class="built_in">this</span>.command.call(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">var</span> shouldModifyCommand = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cmd.size(); i = i + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> tmp_cmd = cmd.get(i).toString();</span><br><span class="line">            <span class="keyword">if</span> (tmp_cmd.indexOf(<span class="string">&quot;getprop&quot;</span>) != -<span class="number">1</span> || tmp_cmd.indexOf(<span class="string">&quot;mount&quot;</span>) != -<span class="number">1</span> || tmp_cmd.indexOf(<span class="string">&quot;build.prop&quot;</span>) != -<span class="number">1</span> || tmp_cmd.indexOf(<span class="string">&quot;id&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                shouldModifyCommand = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (shouldModifyCommand) &#123;</span><br><span class="line">            send(<span class="string">&quot;Bypass ProcessBuilder &quot;</span> + cmd);</span><br><span class="line">            <span class="built_in">this</span>.command.call(<span class="built_in">this</span>, [<span class="string">&quot;grep&quot;</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.start.call(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cmd.indexOf(<span class="string">&quot;su&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">            send(<span class="string">&quot;Bypass ProcessBuilder &quot;</span> + cmd);</span><br><span class="line">            <span class="built_in">this</span>.command.call(<span class="built_in">this</span>, [<span class="string">&quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.start.call(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.start.call(<span class="built_in">this</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (useProcessManager) &#123;</span><br><span class="line">        <span class="keyword">var</span> ProcManExec = ProcessManager.exec.overload(<span class="string">&#x27;[Ljava.lang.String;&#x27;</span>, <span class="string">&#x27;[Ljava.lang.String;&#x27;</span>, <span class="string">&#x27;java.io.File&#x27;</span>, <span class="string">&#x27;boolean&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> ProcManExecVariant = ProcessManager.exec.overload(<span class="string">&#x27;[Ljava.lang.String;&#x27;</span>, <span class="string">&#x27;[Ljava.lang.String;&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.io.FileDescriptor&#x27;</span>, <span class="string">&#x27;java.io.FileDescriptor&#x27;</span>, <span class="string">&#x27;java.io.FileDescriptor&#x27;</span>, <span class="string">&#x27;boolean&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        ProcManExec.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">cmd, env, workdir, redirectstderr</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> fake_cmd = cmd;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cmd.length; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> tmp_cmd = cmd[i];</span><br><span class="line">                <span class="keyword">if</span> (tmp_cmd.indexOf(<span class="string">&quot;getprop&quot;</span>) != -<span class="number">1</span> || tmp_cmd == <span class="string">&quot;mount&quot;</span> || tmp_cmd.indexOf(<span class="string">&quot;build.prop&quot;</span>) != -<span class="number">1</span> || tmp_cmd == <span class="string">&quot;id&quot;</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> fake_cmd = [<span class="string">&quot;grep&quot;</span>];</span><br><span class="line">                    send(<span class="string">&quot;Bypass &quot;</span> + cmdarr + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (tmp_cmd == <span class="string">&quot;su&quot;</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> fake_cmd = [<span class="string">&quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;</span>];</span><br><span class="line">                    send(<span class="string">&quot;Bypass &quot;</span> + cmdarr + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ProcManExec.call(<span class="built_in">this</span>, fake_cmd, env, workdir, redirectstderr);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ProcManExecVariant.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">cmd, env, directory, stdin, stdout, stderr, redirect</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> fake_cmd = cmd;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cmd.length; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> tmp_cmd = cmd[i];</span><br><span class="line">                <span class="keyword">if</span> (tmp_cmd.indexOf(<span class="string">&quot;getprop&quot;</span>) != -<span class="number">1</span> || tmp_cmd == <span class="string">&quot;mount&quot;</span> || tmp_cmd.indexOf(<span class="string">&quot;build.prop&quot;</span>) != -<span class="number">1</span> || tmp_cmd == <span class="string">&quot;id&quot;</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> fake_cmd = [<span class="string">&quot;grep&quot;</span>];</span><br><span class="line">                    send(<span class="string">&quot;Bypass &quot;</span> + cmdarr + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (tmp_cmd == <span class="string">&quot;su&quot;</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> fake_cmd = [<span class="string">&quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;</span>];</span><br><span class="line">                    send(<span class="string">&quot;Bypass &quot;</span> + cmdarr + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ProcManExecVariant.call(<span class="built_in">this</span>, fake_cmd, env, directory, stdin, stdout, stderr, redirect);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (useKeyInfo) &#123;</span><br><span class="line">        KeyInfo.isInsideSecureHardware.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            send(<span class="string">&quot;Bypass isInsideSecureHardware&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Hook-frida-强制在主线程运行"><a href="#Hook-frida-强制在主线程运行" class="headerlink" title="Hook frida 强制在主线程运行"></a>Hook frida 强制在主线程运行</h1><p>针对使用一些方法的时候出现报错 <code>on a thread that has not called Looper.prepare()</code></p><p>强制让代码运行在主线程中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> Toast = Java.use(<span class="string">&#x27;android.widget.Toast&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> currentApplication = Java.use(<span class="string">&#x27;android.app.ActivityThread&#x27;</span>).currentApplication(); </span><br><span class="line">  <span class="keyword">var</span> context = currentApplication.getApplicationContext();</span><br><span class="line"></span><br><span class="line">  Java.scheduleOnMainThread(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Toast.makeText(context, <span class="string">&quot;Hello World&quot;</span>, Toast.LENGTH_LONG.value).show();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Hook-frida-指定方法中过滤打印"><a href="#Hook-frida-指定方法中过滤打印" class="headerlink" title="Hook frida 指定方法中过滤打印"></a>Hook frida 指定方法中过滤打印</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_lnf</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> activate = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> hashmapClass = Java.use(<span class="string">&quot;java.util.HashMap&quot;</span>);</span><br><span class="line">        hashmapClass.put.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (activate)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;key:&quot;</span>, key, <span class="string">&quot;value:&quot;</span>, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.put(key,value);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> lnfClazz = Java.use(<span class="string">&quot;tb.lnf&quot;</span>);</span><br><span class="line">        lnfClazz.a.overload(<span class="string">&#x27;java.util.HashMap&#x27;</span>, <span class="string">&#x27;java.util.HashMap&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;boolean&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">hashmap, hashmap2, str, str2, z</span>) </span>&#123;</span><br><span class="line">                printHashMap(<span class="string">&quot;hashmap&quot;</span>, hashmap);</span><br><span class="line">                printHashMap(<span class="string">&quot;hashmap2&quot;</span>, hashmap2);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;str&quot;</span>, str);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;str2&quot;</span>, str2);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;boolean&quot;</span>, z);</span><br><span class="line">                activate = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">var</span> result = <span class="built_in">this</span>.a(hashmap, hashmap2, str, str2, z);</span><br><span class="line">                activate = <span class="literal">false</span></span><br><span class="line">                printHashMap(<span class="string">&quot;result&quot;</span>, result);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-禁止-app-退出"><a href="#Hook-禁止-app-退出" class="headerlink" title="Hook 禁止 app 退出"></a>Hook 禁止 app 退出</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hookExit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;[*] Starting hook exit&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> exitClass = Java.use(<span class="string">&quot;java.lang.System&quot;</span>);</span><br><span class="line">        exitClass.exit.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;[*] System.exit.called&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;[*] hooking calls to System.exit&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(hookExit);</span><br></pre></td></tr></table></figure><h1 id="Hook-修改设备参数"><a href="#Hook-修改设备参数" class="headerlink" title="Hook 修改设备参数"></a>Hook 修改设备参数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// frida hook 修改设备参数</span></span><br><span class="line">Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> TelephonyManager = Java.use(<span class="string">&quot;android.telephony.TelephonyManager&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//IMEI hook</span></span><br><span class="line">    TelephonyManager.getDeviceId.overload().implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">&quot;[*]Called - getDeviceId()&quot;</span>);</span><br><span class="line">               <span class="keyword">var</span> temp = <span class="built_in">this</span>.getDeviceId();</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">&quot;real IMEI: &quot;</span>+temp);</span><br><span class="line">               <span class="keyword">return</span> <span class="string">&quot;867979021642856&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// muti IMEI</span></span><br><span class="line">    TelephonyManager.getDeviceId.overload(<span class="string">&#x27;int&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">p</span>) </span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">&quot;[*]Called - getDeviceId(int) param is&quot;</span>+p);</span><br><span class="line">               <span class="keyword">var</span> temp = <span class="built_in">this</span>.getDeviceId(p);</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">&quot;real IMEI &quot;</span>+p+<span class="string">&quot;: &quot;</span>+temp);</span><br><span class="line">               <span class="keyword">return</span> <span class="string">&quot;867979021642856&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//IMSI hook</span></span><br><span class="line">  TelephonyManager.getSimSerialNumber.overload().implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">&quot;[*]Called - getSimSerialNumber(String)&quot;</span>);</span><br><span class="line">               <span class="keyword">var</span> temp = <span class="built_in">this</span>.getSimSerialNumber();</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">&quot;real IMSI: &quot;</span>+temp);</span><br><span class="line">               <span class="keyword">return</span> <span class="string">&quot;123456789&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//ANDOID_ID hook</span></span><br><span class="line">    <span class="keyword">var</span> Secure = Java.use(<span class="string">&quot;android.provider.Settings$Secure&quot;</span>);</span><br><span class="line">    Secure.getString.implementation = <span class="function"><span class="keyword">function</span> (<span class="params">p1,p2</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(p2.indexOf(<span class="string">&quot;android_id&quot;</span>)&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">this</span>.getString(p1,p2);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;[*]Called - get android_ID, param is:&quot;</span>+p2);</span><br><span class="line">      <span class="keyword">var</span> temp = <span class="built_in">this</span>.getString(p1,p2);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;real Android_ID: &quot;</span>+temp);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;844de23bfcf93801&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//android的hidden API，需要通过反射调用</span></span><br><span class="line">    <span class="keyword">var</span> SP = Java.use(<span class="string">&quot;android.os.SystemProperties&quot;</span>);</span><br><span class="line">    SP.get.overload(<span class="string">&#x27;java.lang.String&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">p1</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> tmp = <span class="built_in">this</span>.get(p1);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;[*]&quot;</span>+p1+<span class="string">&quot; : &quot;</span>+tmp);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    SP.get.overload(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">p1,p2</span>) </span>&#123;</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      <span class="keyword">var</span> tmp = <span class="built_in">this</span>.get(p1,p2)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;[*]&quot;</span>+p1+<span class="string">&quot;,&quot;</span>+p2+<span class="string">&quot; : &quot;</span>+tmp);</span><br><span class="line">      <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// hook MAC</span></span><br><span class="line">    <span class="keyword">var</span> wifi = Java.use(<span class="string">&quot;android.net.wifi.WifiInfo&quot;</span>);</span><br><span class="line">    wifi.getMacAddress.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> tmp = <span class="built_in">this</span>.getMacAddress();</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;[*]real MAC: &quot;</span>+tmp);</span><br><span class="line">      <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Hook-打印请求调用栈"><a href="#Hook-打印请求调用栈" class="headerlink" title="Hook 打印请求调用栈"></a>Hook 打印请求调用栈</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> class_Socket = Java.use(<span class="string">&quot;java.net.Socket&quot;</span>);</span><br><span class="line">class_Socket.getOutputStream.overload().implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    send(<span class="string">&quot;getOutputSteam&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> result = <span class="built_in">this</span>.getOutputStream();</span><br><span class="line">    <span class="keyword">var</span> bt = Java.use(<span class="string">&quot;android.util.Log&quot;</span>).getStackTraceString(</span><br><span class="line">        Java.use(<span class="string">&quot;java.lang.Exception&quot;</span>).$new();</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Backtrace:&quot;</span> + bt);</span><br><span class="line">    send(result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-UI-thread-注入"><a href="#Hook-UI-thread-注入" class="headerlink" title="Hook UI thread 注入"></a>Hook UI thread 注入</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> Toast = Java.use(<span class="string">&#x27;android.widget.Toast&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> currentApplication = Java.use(<span class="string">&#x27;android.app.ActivityThread&#x27;</span>).currentApplication(); </span><br><span class="line">  <span class="keyword">var</span> context = currentApplication.getApplicationContext();</span><br><span class="line"></span><br><span class="line">  Java.scheduleOnMainThread(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Toast.makeText(context, <span class="string">&quot;Hello World&quot;</span>, Toast.LENGTH_LONG.value).show();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="常用打印转换"><a href="#常用打印转换" class="headerlink" title="常用打印转换"></a>常用打印转换</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//工具相关函数</span></span><br><span class="line"><span class="keyword">var</span> base64EncodeChars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span>,</span><br><span class="line">    base64DecodeChars = <span class="keyword">new</span> <span class="built_in">Array</span>((-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), <span class="number">62</span>, (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), <span class="number">63</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// base64 解码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringToBase64</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r, a, c, h, o, t;</span><br><span class="line">    <span class="keyword">for</span> (c = e.length, a = <span class="number">0</span>, r = <span class="string">&#x27;&#x27;</span>; a &lt; c;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (h = <span class="number">255</span> &amp; e.charCodeAt(a++), a == c) &#123;</span><br><span class="line">            r += base64EncodeChars.charAt(h &gt;&gt; <span class="number">2</span>),</span><br><span class="line">                r += base64EncodeChars.charAt((<span class="number">3</span> &amp; h) &lt;&lt; <span class="number">4</span>),</span><br><span class="line">                r += <span class="string">&#x27;==&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o = e.charCodeAt(a++), a == c) &#123;</span><br><span class="line">            r += base64EncodeChars.charAt(h &gt;&gt; <span class="number">2</span>),</span><br><span class="line">                r += base64EncodeChars.charAt((<span class="number">3</span> &amp; h) &lt;&lt; <span class="number">4</span> | (<span class="number">240</span> &amp; o) &gt;&gt; <span class="number">4</span>),</span><br><span class="line">                r += base64EncodeChars.charAt((<span class="number">15</span> &amp; o) &lt;&lt; <span class="number">2</span>),</span><br><span class="line">                r += <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        t = e.charCodeAt(a++),</span><br><span class="line">            r += base64EncodeChars.charAt(h &gt;&gt; <span class="number">2</span>),</span><br><span class="line">            r += base64EncodeChars.charAt((<span class="number">3</span> &amp; h) &lt;&lt; <span class="number">4</span> | (<span class="number">240</span> &amp; o) &gt;&gt; <span class="number">4</span>),</span><br><span class="line">            r += base64EncodeChars.charAt((<span class="number">15</span> &amp; o) &lt;&lt; <span class="number">2</span> | (<span class="number">192</span> &amp; t) &gt;&gt; <span class="number">6</span>),</span><br><span class="line">            r += base64EncodeChars.charAt(<span class="number">63</span> &amp; t)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// base64 编码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64ToString</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r, a, c, h, o, t, d;</span><br><span class="line">    <span class="keyword">for</span> (t = e.length, o = <span class="number">0</span>, d = <span class="string">&#x27;&#x27;</span>; o &lt; t;) &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            r = base64DecodeChars[<span class="number">255</span> &amp; e.charCodeAt(o++)];</span><br><span class="line">        <span class="keyword">while</span> (o &lt; t &amp;&amp; r == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (r == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            a = base64DecodeChars[<span class="number">255</span> &amp; e.charCodeAt(o++)];</span><br><span class="line">        <span class="keyword">while</span> (o &lt; t &amp;&amp; a == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (a == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        d += <span class="built_in">String</span>.fromCharCode(r &lt;&lt; <span class="number">2</span> | (<span class="number">48</span> &amp; a) &gt;&gt; <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (c = <span class="number">255</span> &amp; e.charCodeAt(o++), <span class="number">61</span> == c)</span><br><span class="line">                <span class="keyword">return</span> d;</span><br><span class="line">            c = base64DecodeChars[c]</span><br><span class="line">        &#125; <span class="keyword">while</span> (o &lt; t &amp;&amp; c == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (c == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        d += <span class="built_in">String</span>.fromCharCode((<span class="number">15</span> &amp; a) &lt;&lt; <span class="number">4</span> | (<span class="number">60</span> &amp; c) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (h = <span class="number">255</span> &amp; e.charCodeAt(o++), <span class="number">61</span> == h)</span><br><span class="line">                <span class="keyword">return</span> d;</span><br><span class="line">            h = base64DecodeChars[h]</span><br><span class="line">        &#125; <span class="keyword">while</span> (o &lt; t &amp;&amp; h == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (h == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        d += <span class="built_in">String</span>.fromCharCode((<span class="number">3</span> &amp; c) &lt;&lt; <span class="number">6</span> | h)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hex 字符转 base64</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hexToBase64</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> base64Encode(<span class="built_in">String</span>.fromCharCode.apply(<span class="literal">null</span>, str.replace(<span class="regexp">/\r|\n/g</span>, <span class="string">&quot;&quot;</span>).replace(<span class="regexp">/([\da-fA-F]&#123;2&#125;) ?/g</span>, <span class="string">&quot;0x$1 &quot;</span>).replace(<span class="regexp">/ +$/</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot; &quot;</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// base64 转 hex</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64ToHex</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, bin = base64Decode(str.replace(<span class="regexp">/[ \r\n]+$/</span>, <span class="string">&quot;&quot;</span>)), hex = []; i &lt; bin.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = bin.charCodeAt(i).toString(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">if</span> (tmp.length === <span class="number">1</span>)</span><br><span class="line">            tmp = <span class="string">&quot;0&quot;</span> + tmp;</span><br><span class="line">        hex[hex.length] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hex.join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hexToBytes</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> len = str.length;</span><br><span class="line">    <span class="keyword">if</span> (len % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    len /= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> hexA = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> s = str.substr(pos, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">var</span> v = <span class="built_in">parseInt</span>(s, <span class="number">16</span>);</span><br><span class="line">        hexA.push(v);</span><br><span class="line">        pos += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hexA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bytesToHex</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> k, j;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        k = arr[i];</span><br><span class="line">        j = k;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            j = k + <span class="number">256</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j &lt; <span class="number">16</span>) &#123;</span><br><span class="line">            str += <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        str += j.toString(<span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringToHex</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> val = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (val == <span class="string">&quot;&quot;</span>)</span><br><span class="line">            val = str.charCodeAt(i).toString(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            val += str.charCodeAt(i).toString(<span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringToBytes</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ch, st, re = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        ch = str.charCodeAt(i);</span><br><span class="line">        st = [];</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            st.push(ch &amp; <span class="number">0xFF</span>);</span><br><span class="line">            ch = ch &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (ch);</span><br><span class="line">        re = re.concat(st.reverse());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将byte[]转成String的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bytesToString</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(arr);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">        str += <span class="built_in">String</span>.fromCharCode(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bytesToBase64</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r, a, c, h, o, t;</span><br><span class="line">    <span class="keyword">for</span> (c = e.length, a = <span class="number">0</span>, r = <span class="string">&#x27;&#x27;</span>; a &lt; c;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (h = <span class="number">255</span> &amp; e[a++], a == c) &#123;</span><br><span class="line">            r += base64EncodeChars.charAt(h &gt;&gt; <span class="number">2</span>),</span><br><span class="line">                r += base64EncodeChars.charAt((<span class="number">3</span> &amp; h) &lt;&lt; <span class="number">4</span>),</span><br><span class="line">                r += <span class="string">&#x27;==&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o = e[a++], a == c) &#123;</span><br><span class="line">            r += base64EncodeChars.charAt(h &gt;&gt; <span class="number">2</span>),</span><br><span class="line">                r += base64EncodeChars.charAt((<span class="number">3</span> &amp; h) &lt;&lt; <span class="number">4</span> | (<span class="number">240</span> &amp; o) &gt;&gt; <span class="number">4</span>),</span><br><span class="line">                r += base64EncodeChars.charAt((<span class="number">15</span> &amp; o) &lt;&lt; <span class="number">2</span>),</span><br><span class="line">                r += <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        t = e[a++],</span><br><span class="line">            r += base64EncodeChars.charAt(h &gt;&gt; <span class="number">2</span>),</span><br><span class="line">            r += base64EncodeChars.charAt((<span class="number">3</span> &amp; h) &lt;&lt; <span class="number">4</span> | (<span class="number">240</span> &amp; o) &gt;&gt; <span class="number">4</span>),</span><br><span class="line">            r += base64EncodeChars.charAt((<span class="number">15</span> &amp; o) &lt;&lt; <span class="number">2</span> | (<span class="number">192</span> &amp; t) &gt;&gt; <span class="number">6</span>),</span><br><span class="line">            r += base64EncodeChars.charAt(<span class="number">63</span> &amp; t)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64ToBytes</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r, a, c, h, o, t, d;</span><br><span class="line">    <span class="keyword">for</span> (t = e.length, o = <span class="number">0</span>, d = []; o &lt; t;) &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            r = base64DecodeChars[<span class="number">255</span> &amp; e.charCodeAt(o++)];</span><br><span class="line">        <span class="keyword">while</span> (o &lt; t &amp;&amp; r == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (r == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            a = base64DecodeChars[<span class="number">255</span> &amp; e.charCodeAt(o++)];</span><br><span class="line">        <span class="keyword">while</span> (o &lt; t &amp;&amp; a == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (a == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        d.push(r &lt;&lt; <span class="number">2</span> | (<span class="number">48</span> &amp; a) &gt;&gt; <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (c = <span class="number">255</span> &amp; e.charCodeAt(o++), <span class="number">61</span> == c)</span><br><span class="line">                <span class="keyword">return</span> d;</span><br><span class="line">            c = base64DecodeChars[c]</span><br><span class="line">        &#125; <span class="keyword">while</span> (o &lt; t &amp;&amp; c == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (c == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        d.push((<span class="number">15</span> &amp; a) &lt;&lt; <span class="number">4</span> | (<span class="number">60</span> &amp; c) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (h = <span class="number">255</span> &amp; e.charCodeAt(o++), <span class="number">61</span> == h)</span><br><span class="line">                <span class="keyword">return</span> d;</span><br><span class="line">            h = base64DecodeChars[h]</span><br><span class="line">        &#125; <span class="keyword">while</span> (o &lt; t &amp;&amp; h == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (h == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        d.push((<span class="number">3</span> &amp; c) &lt;&lt; <span class="number">6</span> | h)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="object-数组中嵌套-string-数组"><a href="#object-数组中嵌套-string-数组" class="headerlink" title="object 数组中嵌套 string 数组"></a>object 数组中嵌套 string 数组</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string1 = Java.use(<span class="string">&quot;java.lang.String&quot;</span>).$new(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> string2 = Java.use(<span class="string">&quot;java.lang.String&quot;</span>).$new(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">// var objarr0 = Java.array(&quot;Ljava.lang.String;&quot;, [string1, string2]);</span></span><br><span class="line"><span class="keyword">var</span> Ref_arr  = Java.use(<span class="string">&#x27;java.lang.reflect.Array&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> stringClass = Java.use(<span class="string">&quot;java.lang.String&quot;</span>).class</span><br><span class="line"><span class="keyword">var</span> arg1 = Ref_arr.newInstance(stringClass, <span class="number">2</span>);</span><br><span class="line">Ref_arr.set(arg1, <span class="number">0</span>, string1);</span><br><span class="line">Ref_arr.set(arg1, <span class="number">1</span>, string2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> objarr1 = Java.use(<span class="string">&quot;java.lang.String&quot;</span>).$new(<span class="string">&quot;24717361&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> objarr2 = Java.use(<span class="string">&quot;java.lang.Integer&quot;</span>).$new(<span class="number">19</span>);</span><br><span class="line"><span class="keyword">var</span> objarr3 = Java.use(<span class="string">&quot;java.lang.String&quot;</span>).$new(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> objarr = Java.array(<span class="string">&quot;Ljava.lang.Object;&quot;</span>, [arg1, objarr1, objarr2, objarr3]);</span><br></pre></td></tr></table></figure><h1 id="frida-主动加载-dex-并调用其中方法"><a href="#frida-主动加载-dex-并调用其中方法" class="headerlink" title="frida 主动加载 dex 并调用其中方法"></a>frida 主动加载 dex 并调用其中方法</h1><p>首先将要使用的 java 类写出来, 例如, 自定义的 base64 码表的 encode 和 decode 方法;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base64DIY</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">char</span>[] base64Code = &#123;<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;N&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] toInt = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储的是与base64编码对应的索引</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; base64Code.length; i++) &#123;</span><br><span class="line">            toInt[base64Code[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str  = <span class="string">&quot;0123456789bcdef&quot;</span>;</span><br><span class="line">        String str2 = toBase64(str.getBytes());</span><br><span class="line">        System.out.println(str2);</span><br><span class="line">        System.out.println(deBase64(str2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Base64编码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> String <span class="title">toBase64</span><span class="params">(<span class="keyword">byte</span>[] byteArr)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判空</span></span><br><span class="line">        <span class="keyword">if</span>(byteArr == <span class="keyword">null</span> || byteArr.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//确定字符数组的长度</span></span><br><span class="line">        <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[(byteArr.length + <span class="number">2</span>) / <span class="number">3</span> * <span class="number">4</span>];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; byteArr.length)&#123;</span><br><span class="line">            <span class="comment">//获取原始数据的ascii码值</span></span><br><span class="line">            <span class="keyword">byte</span> b0 = byteArr[i++];</span><br><span class="line">            <span class="keyword">byte</span> b1 = (i &lt; byteArr.length) ? byteArr[i++] : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">byte</span> b2 = (i &lt; byteArr.length) ? byteArr[i++] : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//转化为对应的base数</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 这是3位转4位</span></span><br><span class="line"><span class="comment">             * 第一位 右移两位高位补0没问题</span></span><br><span class="line"><span class="comment">             * 第二位 b0左移到高4位低四位补0  b1 右移到低四位  结合就是b0原本的低四位 + b1的高四位</span></span><br><span class="line"><span class="comment">             * 这里会有问题？ 我们只要b0的最后两位和b1的高四位， b0左移4位高2位不一定会是00</span></span><br><span class="line"><span class="comment">             * “&amp; 0x3f ”的作用就是保证高2位是00</span></span><br><span class="line"><span class="comment">             * 第三位第四位同理</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            chars[count++] = base64Code[(b0 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3f</span>];</span><br><span class="line">            chars[count++] = base64Code[((b0 &lt;&lt; <span class="number">4</span>) | (b1 &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x3f</span>];</span><br><span class="line">            chars[count++] = base64Code[((b1 &lt;&lt; <span class="number">2</span>) | (b2 &gt;&gt; <span class="number">6</span>)) &amp; <span class="number">0x3f</span>];</span><br><span class="line">            chars[count++] = base64Code[b2 &amp; <span class="number">0x3f</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//添加&#x27;=&#x27;  case渗透</span></span><br><span class="line">        <span class="keyword">switch</span> (byteArr.length % <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span> : chars[--count] = <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span> : chars[--count] = <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(chars);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Base64解码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> String <span class="title">deBase64</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="comment">//先判空</span></span><br><span class="line">        <span class="keyword">if</span>(str == <span class="keyword">null</span> || str.length() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>  str;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> tempNum  = str.endsWith(<span class="string">&quot;==&quot;</span>) ? <span class="number">2</span> : str.endsWith(<span class="string">&quot;=&quot;</span>) ? <span class="number">1</span> : <span class="number">0</span>;  <span class="comment">//判断字符串结尾有几个&#x27;=&#x27;</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[str.length() * <span class="number">3</span> / <span class="number">4</span> - tempNum];     <span class="comment">//删除对应个数</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//逆序读出明文</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; str.length();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> c0 = toInt[str.charAt(i++)];    <span class="comment">//Base64编码对应的索引</span></span><br><span class="line">            <span class="keyword">int</span> c1 =  toInt[str.charAt(i++)];</span><br><span class="line">            bytes[index++] = (<span class="keyword">byte</span>) ((c0 &lt;&lt; <span class="number">2</span>) | (c1 &gt;&gt; <span class="number">4</span>));</span><br><span class="line">            <span class="keyword">if</span>(index &gt;= bytes.length)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> String(bytes);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> c2 = toInt[str.charAt(i++)];</span><br><span class="line">            bytes[index++] = (<span class="keyword">byte</span>)((c1 &lt;&lt; <span class="number">4</span>) | (c2 &gt;&gt; <span class="number">2</span>));</span><br><span class="line">            <span class="keyword">if</span>(index &gt;= bytes.length)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> String(bytes);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> c3 = toInt[str.charAt(i)];</span><br><span class="line">            bytes[index++] = (<span class="keyword">byte</span>) ((c2 &lt;&lt; <span class="number">6</span>) | c3);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(bytes);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当前文件最好直接放在 src 文件目录下, 这样在执行命令的时候不会出现无法找到的情况;</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2022-02-18-083033.png"></p><ol><li>在 idea 中编译运行, 从 <code>.java</code>文件转换成<code>.class</code>文件; 找到对应的<code>Base64DIY.class</code>文件;</li><li>将<code>.class</code>文件转为<code>.jar</code>文件: <code>jar -cvf ddex.jar Base64DIY.class</code> </li><li>将<code>.jar</code>文件转为 <code>.dex</code>文件:  <code>~/Library/Android/sdk/build-tools/28.0.3/dx --dex --output=ddex.dex ddex.jar</code> </li><li>将 <code>.dex</code>文件推入手机中 <code>adb push ddex.dex /data/local/tmp/ddex.dex</code></li><li>给<code>.dex</code>文件添加权限: <code>chmod 777 ddex.dex</code></li></ol><p>在 frida 脚本中可以 hook 并调用自定义 dex 文件中的方法;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///&lt;reference path=&#x27;./index.d.ts&#x27;/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ddex = Java.openClassFile(<span class="string">&quot;/data/local/tmp/ddex.dex&quot;</span>);</span><br><span class="line">        ddex.load();</span><br><span class="line">        <span class="keyword">var</span> clazz = Java.use(<span class="string">&quot;Base64DIY&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> input = <span class="string">&quot;0123456789bcdef&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> encodeBase64 = clazz.toBase64(Java.use(<span class="string">&quot;java.lang.String&quot;</span>).$new(input).getBytes());</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;encodeBase64&quot;</span>, encodeBase64);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    hook();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><h1 id="检测判断是否是-rpc-调用"><a href="#检测判断是否是-rpc-调用" class="headerlink" title="检测判断是否是 rpc 调用"></a>检测判断是否是 rpc 调用</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">looperclazz = (*env)-&gt;FindClass(env, &amp;xmmword_39010);<span class="comment">// android/os/Looper</span></span><br><span class="line"> myLooper_methodID = (*env)-&gt;GetStaticMethodID(env, looperclazz, &amp;qword_39028, &amp;xmmword_39040);<span class="comment">// myLooper</span></span><br><span class="line"> <span class="keyword">if</span> ( !CallStaticObjectMethodV_(env, (__int64)looperclazz, (__int64)myLooper_methodID) )</span><br></pre></td></tr></table></figure><p>在 so 中调用<code>android.os.Looper.myLooper()</code>, 如果是正常的调用, 则通过<code>CallStaticObjectMethodV</code>调用的结果为非 0; 如果是通过 frida 的主动调用, 则返回结果为 0; 因为 frida 的主动调用不在主线程中; 可以作为一个主动调用的检测点</p><h1 id="frida-注册接口"><a href="#frida-注册接口" class="headerlink" title="frida 注册接口"></a>frida 注册接口</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_FridaActivity9</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// $接口</span></span><br><span class="line">        <span class="keyword">var</span> Frida9Interface = Java.use(<span class="string">&quot;com.github.lastingyang.androiddemo.Activity.FridaActivity9$Frida9Interface&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Frida9Interface&quot;</span>, Frida9Interface);</span><br><span class="line">        <span class="keyword">var</span> Frida9InterfaceImpl = Java.registerClass(&#123;</span><br><span class="line">            name: <span class="string">&quot;com.github.lastingyang.androiddemo.Activity.FridaActivity9.FridaInterfaceImpl&quot;</span>,</span><br><span class="line">            implements: [Frida9Interface],</span><br><span class="line">            methods: &#123;</span><br><span class="line">                <span class="function"><span class="title">check</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;FridaInterfaceImpl.check&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">var</span> FridaActivity9 = Java.use(<span class="string">&quot;com.github.lastingyang.androiddemo.Activity.FridaActivity9&quot;</span>);</span><br><span class="line">        FridaActivity9.getInstance.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;FridaActivity9.getInstance&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> Frida9InterfaceImpl.$new();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="frida-hook-thread-打印调用栈"><a href="#frida-hook-thread-打印调用栈" class="headerlink" title="frida hook thread 打印调用栈"></a>frida hook thread 打印调用栈</h1><p>通过 hook thread 打印出调用栈, 可以配合 r0capture 对发包位置进行回溯</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printJavaStack</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(tag + <span class="string">&quot;\n&quot;</span> + Java.use(<span class="string">&quot;android.util.Log&quot;</span>).getStackTraceString(Java.use(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> hook_thread = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> Thread = Java.use(<span class="string">&quot;java.lang.Thread&quot;</span>);</span><br><span class="line">        Thread.init.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">arg0, arg1, arg2, arg3</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> res = <span class="built_in">this</span>.init(arg0, arg1, arg2, arg3);</span><br><span class="line">            <span class="keyword">var</span> threadid = <span class="built_in">this</span>.getId();</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">var</span> target = <span class="built_in">this</span>.target.value;</span><br><span class="line">            <span class="keyword">if</span> (target)&#123;</span><br><span class="line">                <span class="keyword">var</span> className = target.$className;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;\nRunnable classname ==&gt;&quot;</span>, className, threadid);</span><br><span class="line">                printJavaStack(<span class="string">&quot;Runnable &quot;</span> + threadid);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> className = <span class="built_in">this</span>.$className;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;\nThe Thread classname ==&gt;&quot;</span>, className, threadid);</span><br><span class="line">                printJavaStack(<span class="string">&quot;The Thread &quot;</span> + threadid);</span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        Thread.run.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> threadid = <span class="built_in">this</span>.getId();</span><br><span class="line">            <span class="keyword">var</span> className = <span class="built_in">this</span>.$className;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;The Thread run classname ==&gt;&quot;</span>, className, threadid);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    hook_thread();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> frida </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
