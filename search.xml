<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>so基础入门</title>
      <link href="so1/"/>
      <url>so1/</url>
      
        <content type="html"><![CDATA[<h2 id="ARM-基础"><a href="#ARM-基础" class="headerlink" title="ARM 基础"></a>ARM 基础</h2><h3 id="三级流水"><a href="#三级流水" class="headerlink" title="三级流水"></a>三级流水</h3><p>PC 代表程序技术器, 三级流水是一个指令执行的三个阶段</p><ol><li> 取指(从存储器中装载一条指令)</li><li> 译码(识别将要执行的指令)</li><li> 执行(处理指令并将结果写回寄存器)</li></ol><p>PC 总是指向<code>正在取指</code>的指令, 而不是指向正在执行或者正在译码的指令;</p><p>假设当前在 arm 指令下, 每条指令占用 4 个字节; 那么 pc 指向的是正在取指的指令地址, cpu 正在译指的地址是 PC-4; cpu 正在执行的指令地址是 pc-8; </p><p>也就是说 PC 所指向的地址和现在所执行的指令地址相差 8;</p><h2 id="ELF-文件"><a href="#ELF-文件" class="headerlink" title="ELF 文件"></a>ELF 文件</h2><ul><li>为什么要学习 ELF parser<ul><li>  文件格式要跟着解析器一起学习</li></ul></li><li>为什么要 dump so; <ul><li>  很多加固和混淆的 so 在静态看的时候是无法正常查看的</li><li>  在静态 –&gt;  so 解密 –&gt;  加载到内存中 –&gt;   dump 下来的是经过解密之后的 so</li></ul></li><li>为什么 dump 下来的 so 无法直接反汇编<ul><li>  在 elf 文件装载过程中会丢失信息, 需要重新建立这些信息才能反汇编</li></ul></li><li>  dump 下来的 so 如何进行修复</li><li>  为什么修复之后就可以反汇编了</li></ul><h3 id="结构综述"><a href="#结构综述" class="headerlink" title="结构综述"></a>结构综述</h3><p>ELF 文件的开头是一个文件头, 它描述了整个文件的文件属性, 包括文件是否可执行, 是静态链接还是动态链接以及入口地址 (如果是可执行文件), 目标硬件, 目标操作系统等信息;</p><p> 文件头还包括一个段表(Section Table), 段表其实是一个描述文件中各个段的数组, 段表描述了文件中各个段在文件中的偏移位置以及段的属性等, 从段表中可以得到每个段的所有信息;</p><p>文件头后面就是就是各个段的内容, 比如代码段保存的就是程序的指令, 数据段保存的就是程序的静态变量等; 一般 C 语言编译后执行语句都编译成机器码, 保存在.text 段中; 已经初始化的全局变量和局部静态变量都保存在.data 段; 未初始化的全局变量和局部静态变量一般放在.bss 段中; .bss 段只是为未初始化的全局变量和局部静态变量预留位置而已, 它并没有内容, 所以它在文件中也不占据空间;</p><p>总体来说, 程序源代码编译之后主要分成两种段: 程序指令和程序数据; 代码段属于程序指令, 而数据段和.bss 段属于程序数据;</p><h3 id="文件头"><a href="#文件头" class="headerlink" title="文件头"></a>文件头</h3><p>可以使用 readelf 命令来查看 elf 文件; <code>readelf -h &lt;soPath&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ELF Header:</span><br><span class="line">  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00</span><br><span class="line">  Class:                             ELF32</span><br><span class="line">  Data:                              2<span class="string">&#x27;s complement, little endian</span></span><br><span class="line"><span class="string">  Version:                           1 (current)</span></span><br><span class="line"><span class="string">  OS/ABI:                            UNIX - System V</span></span><br><span class="line"><span class="string">  ABI Version:                       0</span></span><br><span class="line"><span class="string">  Type:                              DYN (Shared object file)</span></span><br><span class="line"><span class="string">  Machine:                           ARM</span></span><br><span class="line"><span class="string">  Version:                           0x1</span></span><br><span class="line"><span class="string">  Entry point address:               0x0</span></span><br><span class="line"><span class="string">  Start of program headers:          52 (bytes into file)</span></span><br><span class="line"><span class="string">  Start of section headers:          29216 (bytes into file)</span></span><br><span class="line"><span class="string">  Flags:                             0x5000200, Version5 EABI, soft-float ABI</span></span><br><span class="line"><span class="string">  Size of this header:               52 (bytes)</span></span><br><span class="line"><span class="string">  Size of program headers:           32 (bytes)</span></span><br><span class="line"><span class="string">  Number of program headers:         8</span></span><br><span class="line"><span class="string">  Size of section headers:           40 (bytes)</span></span><br><span class="line"><span class="string">  Number of section headers:         27</span></span><br><span class="line"><span class="string">  Section header string table index: 26</span></span><br></pre></td></tr></table></figure><p>ELF Header 数据结构</p><ol><li>e_ident 数组<ol><li> EI_MAG0 文件标识  –&gt;  7f</li><li> EI_MAG1 文件标识  –&gt;  45  –&gt;  E</li><li> EI_MAG2 文件标识  –&gt;  4c  –&gt;  L</li><li> EI_MAG3 文件标识  –&gt;  46  –&gt;  F</li><li>EL_CLASS 文件类型<ol><li> 0 非法类型</li><li> 1 32 位目标 ELFCLASS32</li><li> 2 64 位目标 ELFCLASS64</li></ol></li><li>EI_DATA<ol><li> 0 ELFDATANONE 非法数据编码</li><li> 1 ELFDATA2LSB 小端 高位在前</li><li> 2 ELFDATA2MSB 大端 低位在前</li></ol></li><li> EI_VERSION ELF 头部的版本号码, 目前必须是 EV_CURRENT</li><li> EI_PAD 标记 e_ident 中未使用字节的开始, 初始化为 0;</li></ol></li><li>e_type 目标文件类型<ol><li> 0 ET_NONE 未知目标文件格式</li><li> 1 ET_REL 可重定位文件</li><li> 2 ET_EXEC 可执行文件</li><li> 3 ET_DYN 共享目标文件, 一般为 so 文件</li><li> 4 ET_CORE Core 文件</li><li> 0xff00 ET_LOPPOC 特定处理器文件</li><li> 0xffff ET_HIPROC 特定处理器文件</li></ol></li><li>e_machine 给出文件的目标体系结构类型<ol><li> 0 EM_NONE 未指定</li><li> 1 EM_M32 AT&amp;T WE 32100</li><li> 2 EM_SPARC SPARC</li><li> 3 EM_386 INTEL80386</li><li> 4 EM_68K MOTOROLA 68000</li><li> 5 EM_88K MOTOROLA 88000</li><li> 7 EM_860 INTEL 80860</li><li> 8 EM_MIPS MIPS RS3000</li><li> 其他的都是保留的, 特定处理器 elf 名称会使用机器名进行区分</li></ol></li><li>e_version 目标文件版本<ol><li> 0 EV_NONE 非法版本</li><li> 1 EV_CURRENT 当前版本</li></ol></li><li> e_entry 程序入口的虚拟地址, 如果目标文件没有程序入口, 可以为 0</li><li> e_phoff 程序头部表格 Program Header Table 的偏移量, 如果程序没有头部表格, 可以为 0</li><li> e_shoff 节区头部表格 Section Header Table 的偏移量, 如果文件没有节区头部表格, 可以为 0</li><li> e_flags 保存与文件相关的特定处理器的标志</li><li> e_ehsize elf 头部的大小(以字节计算)</li><li> e_phentsize 程序头部表格的表项大小, 按字节计算</li><li> e_phnum 程序头部表格的表项数数量, 可以为 0</li><li> e_shentsize 节区头部表格的表项大小, 按字节计算</li><li> e_shnum 节区头部表格的表项数目, 可以为 0</li><li> e_shstrndx 节区头部表格中与节区名称字符串表相关的表项的索引, 如果文件没有节区名称字符串表, 此参数可以为 SHN_UNDEF</li></ol><h3 id="段表"><a href="#段表" class="headerlink" title="段表"></a>段表</h3><p>ELF 文件中有很多各种各样的段, 每个段表 Section Header Table 就是保存这些段的基本属性的结构; 段表是 ELF 文件中除了文件头以外最重要的结构, 它描述 了 ELF 的各个段的信息; 比如段的段名, 段的长度, 在文件中的偏移, 读写权限, 段的其他属性; </p><p>ELF 文件的段结构就是由段表决定的, 编译器,链接器和装载器都是根据段表来定位和访问各个段的属性的; 段表在 ELF 文件中由 ELF 文件头的 e_shoff 成员决定;</p><p>可以使用 <code>readelf -S &lt;soPath&gt;</code> 来查看段表结构;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">There are 27 section headers, starting at offset 0x7220:</span><br><span class="line"></span><br><span class="line">Section Headers:</span><br><span class="line">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</span><br><span class="line">  [ 0]                   NULL            00000000 000000 000000 00      0   0  0</span><br><span class="line">  [ 1] .note.androi[...] NOTE            00000134 000134 000098 00   A  0   0  4</span><br><span class="line">  [ 2] .note.gnu.bu[...] NOTE            000001cc 0001cc 000024 00   A  0   0  4</span><br><span class="line">  [ 3] .dynsym           DYNSYM          000001f0 0001f0 000770 10   A  4   1  4</span><br><span class="line">  [ 4] .dynstr           STRTAB          00000960 000960 0015ea 00   A  0   0  1</span><br><span class="line">  [ 5] .gnu.hash         GNU_HASH        00001f4c 001f4c 000284 04   A  3   0  4</span><br><span class="line">  [ 6] .<span class="built_in">hash</span>             HASH            000021d0 0021d0 000368 04   A  3   0  4</span><br><span class="line">  [ 7] .gnu.version      VERSYM          00002538 002538 0000ee 02   A  3   0  2</span><br><span class="line">  [ 8] .gnu.version_d    VERDEF          00002628 002628 00001c 00   A  4   1  4</span><br><span class="line">  [ 9] .gnu.version_r    VERNEED         00002644 002644 000040 00   A  4   2  4</span><br><span class="line">  [10] .rel.dyn          REL             00002684 002684 000318 08   A  3   0  4</span><br><span class="line">  [11] .rel.plt          REL             0000299c 00299c 0002a0 08   A  3   0  4</span><br><span class="line">  [12] .plt              PROGBITS        00002c3c 002c3c 000404 00  AX  0   0  4</span><br><span class="line">  [13] .text             PROGBITS        00003040 003040 00253c 00  AX  0   0  4</span><br><span class="line">  [14] .ARM.exidx        ARM_EXIDX       0000557c 00557c 000390 08  AL 13   0  4</span><br><span class="line">  [15] .ARM.extab        PROGBITS        0000590c 00590c 0004a4 00   A  0   0  4</span><br><span class="line">  [16] .rodata           PROGBITS        00005db0 005db0 000627 00   A  0   0  1</span><br><span class="line">  [17] .data.rel.ro      PROGBITS        00007bc4 006bc4 000188 00  WA  0   0  4</span><br><span class="line">  [18] .fini_array       FINI_ARRAY      00007d4c 006d4c 000008 00  WA  0   0  4</span><br><span class="line">  [19] .dynamic          DYNAMIC         00007d54 006d54 000118 08  WA  4   0  4</span><br><span class="line">  [20] .got              PROGBITS        00007e6c 006e6c 000194 00  WA  0   0  4</span><br><span class="line">  [21] .data             PROGBITS        00008000 007000 000004 00  WA  0   0  4</span><br><span class="line">  [22] .bss              NOBITS          00008004 007004 000001 00  WA  0   0  1</span><br><span class="line">  [23] .comment          PROGBITS        00000000 007004 0000b5 01  MS  0   0  1</span><br><span class="line">  [24] .note.gnu.go[...] NOTE            00000000 0070bc 00001c 00      0   0  4</span><br><span class="line">  [25] .ARM.attributes   ARM_ATTRIBUTES  00000000 0070d8 000036 00      0   0  1</span><br><span class="line">  [26] .shstrtab         STRTAB          00000000 00710e 00010f 00      0   0  1</span><br><span class="line">Key to Flags:</span><br><span class="line">  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),</span><br><span class="line">  L (link order), O (extra OS processing required), G (group), T (TLS),</span><br><span class="line">  C (compressed), x (unknown), o (OS specific), E (exclude),</span><br><span class="line">  y (purecode), p (processor specific)</span><br></pre></td></tr></table></figure><p>段表结构比较简单, 它是一个以<code>Elf32_Shdr</code>结构体为元素的数组, 数组元素的个数等于段的个数, 每个<code>Elf32_Shdr</code>结构体对应一个段, <code>Elf32_Shar</code>又被称为段描述符, 上面的 so 文件一共有0-26 个段描述符, 也就是由 27 个元素的数组; ELF 段表的第一个元素是无效的段描述符, 它的类型是 NULL; 除此之外每个段描述符都对应一个段, 也就是说该 so 文件共有 26 个有效的段;</p><p>简而言之, 段表就是一个大数组, 数组中每一个元素都是一个段描述符的结构体;</p><h4 id="段描述符"><a href="#段描述符" class="headerlink" title="段描述符"></a>段描述符</h4><ol><li> sh_name: Section name 段名; 段名是个字符串, 它位于一个叫做 .shstrtab 的字符串表, sh_name 是段名字符串在 .shstrtab 中的偏移;</li><li> sh_type: Section type 段的类型, 参考后面 –&gt;  段的类型</li><li> sh_flags: Section flag 段的标志位, 参考后面 –&gt;  段的标志位</li><li> sh_addr: Section Address 段虚拟地址; 如果该段可以被加载, 那么 sh_addr 为该段被加载后在进程地址空间中的虚拟地址, 否则为 0</li><li> sh_offset: Section Offset 段偏移; 如果该段存在于文件中, 则表示该段在文件中的偏移; 否则无意义; 例如, sh_offset 对于 BSS 段来说就没有意义</li><li> sh_size: Section Size 段的长度;</li><li> sh_link 和 sh_info: Section link 和 Section Information 段链接信息, 参考后面 –&gt;  段的链接信息</li><li> sh_addralign: 段地址对齐; 有些段对段地址对齐有要求, 由于地址对齐的数量都是 2 的指数倍, sh_addralign 表示地址对齐数量中的指数, 3 表示 2^3, 如果 sh_addralign 为 0 或 1, 则表示该段没有对齐要求</li><li> sh_entsize: Section Entry Size 项的长度; 有些段包含了一些固定大小的项, 比如符号表, 它包含的每个符号占用的大小都是一样的, 对于这种段, sh_entsize 表示每个项的大小, 如果为 0, 则表示该段不包含固定大小的项;</li></ol><h4 id="段的类型"><a href="#段的类型" class="headerlink" title="段的类型"></a>段的类型</h4><p>段的名字只在链接和编译的过程中有意义, 对于编译器和链接器而言, 主要决定段的属性的是段的类型和段的标志位, 段的类型如下, 主要以商量 SHT 开头</p><table><thead><tr><th>常量</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>SHT_NULL</td><td>0</td><td>无效段</td></tr><tr><td>SHT_PROGBITS</td><td>1</td><td>程序段, 代码段, 数据段都是这种类型的</td></tr><tr><td>SHT_SYMTAB</td><td>2</td><td>表示该段的内容是符号表</td></tr><tr><td>SHT_STRTAB</td><td>3</td><td>表示该段的内容为字符串表</td></tr><tr><td>SHT_RELA</td><td>4</td><td>重定位表, 该段包含了重定位信息, 可以参考后面的重定位</td></tr><tr><td>SHT_HASH</td><td>5</td><td>符号表的哈希表, 参考符号表</td></tr><tr><td>SHT_DYNAMIC</td><td>6</td><td>动态链接信息, 参考动态链接</td></tr><tr><td>SHT_NOTE</td><td>7</td><td>提示信息</td></tr><tr><td>SHT_NOBITS</td><td>8</td><td>表示该段在文件中没有内容, 比如.bss 段</td></tr><tr><td>SHT_REL</td><td>9</td><td>该段包含了重定位信息, 具体参考重定位</td></tr><tr><td>SHT_SHLIB</td><td>10</td><td>保留</td></tr><tr><td>SHT_DNYSYM</td><td>11</td><td>动态链接的符号表, 参考动态链接</td></tr></tbody></table><h4 id="段的标志位"><a href="#段的标志位" class="headerlink" title="段的标志位"></a>段的标志位</h4><p>段的标志位表示该段在程序虚拟地址空间中的属性, 比如是否可写, 是否可执行等; 相关常量通常以 SHF_开头;</p><table><thead><tr><th>常量</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>SHF_WRITE</td><td>1</td><td>表示该段在进程空间站中可写</td></tr><tr><td>SHF_ALLOC</td><td>2</td><td>表示该段在进程空间中需要分配空间, 像代码段,数据段和.bss 段都会有这个标志位</td></tr><tr><td>SHF_EXECINSTR</td><td>4</td><td>表示该段在进程空间中可以被执行, 一般指代码段</td></tr></tbody></table><p>系统保留段的属性</p><table><thead><tr><th>Name</th><th>sh_type</th><th>sh_flag</th></tr></thead><tbody><tr><td>.bss</td><td>SHT_NOBITS</td><td>SHF_ALLOC+SHF_WRITE</td></tr><tr><td>.comment</td><td>SHT_PROGBITS</td><td>none</td></tr><tr><td>.data</td><td>SHT_PROGBITS</td><td>SHF_ALLOC+SHF_WRITE</td></tr><tr><td>.data1</td><td>SHT_PROGBITS</td><td>SHF_ALLOC+SHF_WRITE</td></tr><tr><td>.debug</td><td>SHT_PROGBITS</td><td>none</td></tr><tr><td>.dynamic</td><td>SHT_DYNAMIC</td><td>SHF_ALLOC+SHF_WRITE</td></tr><tr><td>.hash</td><td>SHT_HASH</td><td>SHF_ALLOC</td></tr><tr><td>.line</td><td>SHT_PROGBITS</td><td>none</td></tr><tr><td>.note</td><td>SHT_NOTE</td><td>none</td></tr><tr><td>.rodata</td><td>SHT_PROGBITS</td><td>SHF_ALLOC</td></tr><tr><td>.rodata1</td><td>SHT_PROGBITS</td><td>SHF_ALLOC</td></tr><tr><td>.shstrtab</td><td>SHT_STRTAB</td><td>none</td></tr><tr><td>.strtab</td><td>SHT_STRTAB</td><td>如果该 ELF 文件中有可装载的段需要用到该字符串表, 那么该字符串表也将被装载到进程空间, 则有 SHF_ALLOC 标志位</td></tr><tr><td>.symtab</td><td>SHT_SYMTAB</td><td>同字符串表</td></tr><tr><td>.text</td><td>SHT_PROGBITS</td><td>SHF_ALLOC+SHF_EXECINSTR</td></tr></tbody></table><h4 id="段的链接信息"><a href="#段的链接信息" class="headerlink" title="段的链接信息"></a>段的链接信息</h4><p>如果段的类型是与链接相关的, 不论是动态链接或者静态链接, 比如重定位表, 符号表等; 那么 sh_link 和 sh_info 这两个成员所包含的意义如下图; 对于其他类型的段, 这两个成员没有意义;</p><table><thead><tr><th>sh_type</th><th>sh_link</th><th>sh_ info</th></tr></thead><tbody><tr><td>SHT_DYNAMIC</td><td>该段所使用的字符串在段表中的下标</td><td>0</td></tr><tr><td>SHT_HASH</td><td>该段所使用的符号表在段表中的下标</td><td>0</td></tr><tr><td>SHT_REL\SHT_RELA</td><td>该段所使用的相应符号表在段表中的下标</td><td>该重定向表所作用的段在段表中的下标</td></tr><tr><td>SHT_SYMTAB/SHT_DYNSYM</td><td>操作系统相关</td><td>操作系统相关</td></tr><tr><td>other</td><td>SHN_UNDEF</td><td>0</td></tr></tbody></table><h4 id="重定位表"><a href="#重定位表" class="headerlink" title="重定位表"></a>重定位表</h4><p>链接器在处理目标文件时, 需要对目标文件中某些部位进行重定位, 即代码段和数据段中那些对绝对地址的引用的位置; 这些重定位信息都会记录在 ELF 文件的重定位表里面; 对于每个需要重定位的代码段或者数据段, 都会有一个相应的重定位表; 比如 <code>.rel.text</code>就是对<code>.text</code>段的重定位表; <code>.rel.data</code>就是对 <code>.data</code>段的重定位表;</p><p>一个重定位表同时也是 ELF 的一个段, 那么这个段的类型就是 SHT_REL类型; 它的 sh_link 表示符号表的下标; 它的 sh_info 表示它作用于那个段; 比如 .rel.text 作用于 .text, 而.text 段的下标是 1, 那么 .rel.text 的 sh_info 为 1;</p><h4 id="字符串表"><a href="#字符串表" class="headerlink" title="字符串表"></a>字符串表</h4><p>ELF 文件中用到了很多字符串, 比如段名, 变量名等; 因为字符串的长度往往是不定的, 所以很难用固定的结构来表示; 常见的方式是把字符串集中起来放在一个表里, 然后使用字符串在表中的偏移来引用字符串;</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-07-19-063649.png"></p><p>在 ELF 文件中引用字符串值需要给出一个数字下标即可; 不用考虑字符串的长度问题; 一般字符串在 ELF 文件中也以段的形式保存, 常见的段名为<code>.strtab</code>或者 <code>.shstrtab</code>; 这两个字符串表分别为字符串表和段表字符串表; .strtab 字符串表就是用来保存普通的字符串, 比如符号的名字; 段表字符串表用来保存段中用到的字符串, 最常见的就是段名(sh_name);</p><p>e_shstrndx 是 ELF32_Ehdr 的最后一个成员, 是 Section header string table index 的缩写, 我们知道段表字符串本身也是 ELF 文件中的一个普通的段, 知道它的名字往往叫做 .shstrtab; 那么这个 e_shstrndx 就是表示 .shstrtab 在段表中的下标; 即段表字符串表在段表中的下标; </p><p>只有分析 ELF 文件头, 才可以得到段表和段表字符串表的位置, 从而才能解析整个 ELF 文件;</p><h4 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h4><p><code>objdump -h &lt;soPath&gt;</code> -h 参数可以将 ELF 文件中各个段的基本信息打印出来; 或者使用 -x 参数, 打印更详细的信息;</p><p><code>objdump -s -d &lt;soPath&gt;</code> -s 参数可以将所有段的内容以十六进制的方式打印出来, -d 参数可以将所有的包含指令的段反汇编; </p><h4 id="数据段和只读数据段"><a href="#数据段和只读数据段" class="headerlink" title="数据段和只读数据段"></a>数据段和只读数据段</h4><p>.data 段保存的是已经初始化的全局静态变量和局部静态变量;</p><p>.rodata 段存放的是只读数据, 一般是程序中只读变量,(如 const 修改的变量) 和字符串常量; 有时候编译器会把字符串常量放在 .data 段, 而不会单独放在.rodata段; </p><h4 id="bss-段"><a href="#bss-段" class="headerlink" title="bss 段"></a>bss 段</h4><p>.bss 段存放的是未初始化的全局变量和局部静态变量; </p><h4 id="其他段"><a href="#其他段" class="headerlink" title="其他段"></a>其他段</h4><table><thead><tr><th>常用的段名</th><th>说明</th></tr></thead><tbody><tr><td>.rodata1</td><td>Read only Data. 在这种段里存放的是只读数据, 比如字符常量, 全局 const 变量, 和 .rodata 一样</td></tr><tr><td>.comment</td><td>存放的是编译器版本信息, 比如字符串: “GCC: (GNU) 4.2.0”</td></tr><tr><td>.debug</td><td>调试信息</td></tr><tr><td>.dynamic</td><td>动态链接信息</td></tr><tr><td>.hash</td><td>符号哈希表</td></tr><tr><td>.line</td><td>调试时的行号表</td></tr><tr><td>.note</td><td>额外的编译器信息, 比如程序的公司名, 发布版本号等</td></tr><tr><td>.strtab</td><td>String Table 字符串表, 用于存储 ELF 文件中用到的各种字符串</td></tr><tr><td>.symtab</td><td>Symbol Table 符号表</td></tr><tr><td>.shstrtab</td><td>Section String Table 段名表</td></tr><tr><td>.plt .got</td><td>动态链接的跳转表和全局入口表</td></tr><tr><td>.init .fini</td><td>程序初始化与终结代码段</td></tr></tbody></table><h4 id="自定义段"><a href="#自定义段" class="headerlink" title="自定义段"></a>自定义段</h4><p>正常情况下, GCC 编译出来的目标文件中, 代码会被放在.text 段中; 初始化的全局变量和局部静态变量会被放到.data 段中; 未初始化的全局变量和静态变量会被放到.bss 段中; 如果想要某些部分的代码或者变量放到自己指定的段中, 可以通过通过下面代码指定变量所处的段:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__attribute__((section(<span class="string">&quot;FOO&quot;</span>))) <span class="keyword">int</span> global = <span class="number">42</span>;</span><br><span class="line">__attribute__((section(<span class="string">&quot;BAR&quot;</span>))) <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br></pre></td></tr></table></figure><p>我们通过在全局变量或者函数前面加上<code>__attribute__((section(&quot;name&quot;)))</code>属性就可以将相应的变量或者函数放到以 name 命名的段中;</p><h3 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h3><h4 id="符号定义"><a href="#符号定义" class="headerlink" title="符号定义"></a>符号定义</h4><h5 id="链接本质"><a href="#链接本质" class="headerlink" title="链接本质"></a>链接本质</h5><p>链接过程的本质就是将多个不同的目标文件之间相互粘在一起; 或者说是就像拼积木一样拼装成一个整体; 在链接中, 目标文件之间相互拼合实际上是对目标文件之间对地址的引用; </p><h5 id="定义和引用"><a href="#定义和引用" class="headerlink" title="定义和引用"></a>定义和引用</h5><p>比如目标文件 B 要用到目标文件 A 中的函数 foo, 那么目标文件 A 定义了函数 foo, 目标文件 B 引用了目标文件 A 中的函数 foo; 这个概念也同样适用于变量;</p><h5 id="符号名和符号值"><a href="#符号名和符号值" class="headerlink" title="符号名和符号值"></a>符号名和符号值</h5><p>在链接中, 我们将函数和变量统称为符号, 函数名和变量名就是符号名; </p><p>每个目标文件都会有一个相应的符号表, 这个表里记录了目标文件中所用到的所有符号; 每个定义的符号都有一个对应的值, 叫做符号值, 对于函数和变量来说, 符号值就是他们的地址;</p><h5 id="符号分类"><a href="#符号分类" class="headerlink" title="符号分类"></a>符号分类</h5><ul><li>  全局符号: 定义在本目标文件的全局符号, 可以被其他目标文件引用; </li><li>  外部符号: 在本目标文件中引用的全局符号, 却没有定义在本目标文件, 也叫做符号引用;</li><li>  段名: 一般是编译器产生的, 它的值就是该段的起始地址</li><li>  局部符号: 只在编译单元内部可见; 这些局部符号对于链接过程没有作用. 链接器也往往忽略它们;</li><li>  行号信息: 目标文件指令和源代码中代码行的对应关系, 可选;</li></ul><p>一般值得关注的就是全局符号和外部符号; 因为链接过程只关心全局符号的相互粘合;</p><h4 id="查看文件符号"><a href="#查看文件符号" class="headerlink" title="查看文件符号"></a>查看文件符号</h4><p><code>nm &lt;soPath&gt;</code></p><p><code>readelf -s &lt;soPath&gt;</code></p><h3 id="符号表结构"><a href="#符号表结构" class="headerlink" title="符号表结构"></a>符号表结构</h3><p>ELF 文件中的符号往往是一个文件中的一个段, 段名一般是<code>.symtab</code>; 符号表的结构比较简单, 它是一个 Elf32_Sym 结构的数组; 数组中的每个元素对应一个符号; 数组中的第一个元素也就是下标 0 的元素为无效的未定义符号; </p><p>数组中每个元素的结构如下:</p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>st_name</td><td>符号名, 包含了该符号名在字符串表中的下标</td></tr><tr><td>st_value</td><td>符号相对应的值, 这个值和符号有关, 可能是一个绝对值, 也可能是一个地址等; 不同的符号, 它所对应的值含义不同; 参考 –&gt;  符号值</td></tr><tr><td>st_size</td><td>符号大小, 对于包含数据的符号, 这个值是该数据类型的大小; 如果该值为 0, 则表示该符号大小为 0 或者未知;</td></tr><tr><td>st_info</td><td>符号类型和绑定信息</td></tr><tr><td>st_other</td><td>该成员目前是 0,没用</td></tr><tr><td>st_shndx</td><td>符号所在的段, 参考 –&gt;  符号所在段</td></tr></tbody></table><h4 id="st-info-符号类型和绑定信息"><a href="#st-info-符号类型和绑定信息" class="headerlink" title="st_info 符号类型和绑定信息"></a>st_info 符号类型和绑定信息</h4><p>该成员低 4 位表示符号的类型(Symbol Type), 高 28 位表示符号绑定信息(Symbol Binding):</p><p>符号绑定信息表:</p><table><thead><tr><th>名称</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>STB_LOCAL</td><td>0</td><td>局部符号, 对于目标文件的外部不可见</td></tr><tr><td>STB_GLOBAL</td><td>1</td><td>全局符号, 外部可见</td></tr><tr><td>STB_WEAK</td><td>2</td><td>弱引用, 参考 –&gt;  弱符号和强符号</td></tr></tbody></table><p>符号类型表:</p><table><thead><tr><th>名称</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>STT_NOTYPE</td><td>0</td><td>未知类型符号</td></tr><tr><td>STT_OBJECT</td><td>1</td><td>该符号是个数据对象, 比如变量, 数组等</td></tr><tr><td>STT_FUNC</td><td>2</td><td>该符号是个函数或者其他科执行代码</td></tr><tr><td>STT_SECTION</td><td>3</td><td>该符号表示一个段, 这种符号必须是 STB_LOCAL</td></tr><tr><td>STT_FILE</td><td>4</td><td>该符号表示文件名, 一般都是该目标文件所对应的源文件名; 它一定是 STB_LOCAL 类型的, 而且它的 st_shndx 一定是 SHN_ABS</td></tr></tbody></table><h4 id="st-shndx-符号所在段"><a href="#st-shndx-符号所在段" class="headerlink" title="st_shndx 符号所在段"></a>st_shndx 符号所在段</h4><p>如果符号定义在本目标文件中, 那么这个成员表示符号所在的段在段表中的下标; 如果符号不是定义在本目标文件中, 或者对于有些特殊符号, sh_shndx 的值有些特殊:</p><table><thead><tr><th>名称</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>SHN_ABS</td><td>0xfff1</td><td>该符号包含了一个绝对的值, 比如文件名符号就属于这种类型</td></tr><tr><td>SHN_COMMON</td><td>0xfff2</td><td>该符号是一个 COMMON 块类型的符号, 一般未初始化的全局符号定义就是这种类型的; 参考 –&gt;   COMMON 块</td></tr><tr><td>SHN_UNDEF</td><td>0</td><td>表示该符号未定义, 这个符号表示该符号在本目标文件被引用到, 但是定义在其他目标文件中;</td></tr></tbody></table><h4 id="st-value-符号值"><a href="#st-value-符号值" class="headerlink" title="st_value 符号值"></a>st_value 符号值</h4><p>每个符号都有对应的值, 如果这个符号是一个函数或者变量, 那么符号的值就是这个函数或者变量的地址; 但是这个地址需要分下面的情况区别对待:</p><ol><li> 在目标文件中, 如果是符号的定义且该符号不是 COMMON 块 (st_shndx 不是 SHN_COMMON), 则 st_value 表示该符号在段中的偏移; 也就是说符号所对应的函数或者变量位于由 st_shndx 指定的段, 偏移 st_value 的位置;</li><li> 在目标文件中, 如果符号是 COMMON 块, 即 st_shndx 为 SHN_COMMON 则 st_value 表示该符号的对齐属性;</li><li> 在可执行文件中, st_value 表示符号的虚拟地址; 这个虚拟地址对于动态链接器来说十分有用;</li></ol><p>使用 readelf 可以查看符号表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">Symbol table <span class="string">&#x27;.dynsym&#x27;</span> contains 119 entries:</span><br><span class="line">   Num:    Value  Size Type    Bind   Vis      Ndx Name</span><br><span class="line">     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND</span><br><span class="line">     1: 00000000     0 OBJECT  GLOBAL DEFAULT  UND __stack[...]@LIBC (2)</span><br><span class="line">     2: 00000000     0 FUNC    GLOBAL DEFAULT  UND __cxa_atexit@LIBC (2)</span><br><span class="line">     3: 00000000     0 FUNC    GLOBAL DEFAULT  UND strlen@LIBC (2)</span><br><span class="line">     4: 00000000     0 FUNC    GLOBAL DEFAULT  UND __cxa_f[...]@LIBC (2)</span><br><span class="line">     5: 00000000     0 FUNC    GLOBAL DEFAULT  UND __stack[...]@LIBC (2)</span><br><span class="line">     6: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZN4test5TestBEv</span><br><span class="line">     7: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZNKSt6__ndk16lo[...]</span><br><span class="line">     8: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZNKSt6__ndk18io[...]</span><br><span class="line">     9: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZNSt11logic_err[...]</span><br><span class="line">    10: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZNSt12length_er[...]</span><br><span class="line">    11: 00000000     0 FUNC    GLOBAL DEFAULT  UND snprintf@LIBC (2)</span><br><span class="line">    12: 00000000     0 OBJECT  GLOBAL DEFAULT  UND _ZNSt6__ndk15cty[...]</span><br><span class="line">    13: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZNSt6__ndk16loc[...]</span><br><span class="line">    14: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZNSt6__ndk16loc[...]</span><br><span class="line">    15: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZNSt6__ndk18ios[...]</span><br><span class="line">    16: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZNSt6__ndk18ios[...]</span><br><span class="line">    17: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZNSt6__ndk18ios[...]</span><br><span class="line">    18: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZNSt6__ndk18ios[...]</span><br><span class="line">    19: 00000000     0 FUNC    GLOBAL DEFAULT  UND abort@LIBC (2)</span><br><span class="line">    20: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZSt18uncaught_e[...]</span><br><span class="line">    21: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZSt9terminatev</span><br><span class="line">    22: 00000000     0 OBJECT  GLOBAL DEFAULT  UND _ZTINSt6__ndk18i[...]</span><br><span class="line">    23: 00000000     0 OBJECT  GLOBAL DEFAULT  UND _ZTISt12length_error</span><br><span class="line">    24: 00000000     0 OBJECT  GLOBAL DEFAULT  UND _ZTVN10__cxxabiv[...]</span><br><span class="line">    25: 00000000     0 OBJECT  GLOBAL DEFAULT  UND _ZTVN10__cxxabiv[...]</span><br><span class="line">    26: 00000000     0 OBJECT  GLOBAL DEFAULT  UND _ZTVN10__cxxabiv[...]</span><br><span class="line">    27: 00000000     0 OBJECT  GLOBAL DEFAULT  UND __sF@LIBC (2)</span><br><span class="line">    28: 00000000     0 OBJECT  GLOBAL DEFAULT  UND _ZTVSt12length_error</span><br><span class="line">    29: 00000000     0 FUNC    GLOBAL DEFAULT  UND dladdr@LIBC (3)</span><br><span class="line">    30: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZdlPv</span><br><span class="line">    31: 00000000     0 FUNC    GLOBAL DEFAULT  UND fprintf@LIBC (2)</span><br><span class="line">    32: 00000000     0 FUNC    GLOBAL DEFAULT  UND _Znwj</span><br><span class="line">    33: 00000000     0 FUNC    GLOBAL DEFAULT  UND fflush@LIBC (2)</span><br><span class="line">    34: 00000000     0 FUNC    GLOBAL DEFAULT  UND __aeabi_memcpy</span><br><span class="line">    35: 00000000     0 FUNC    GLOBAL DEFAULT  UND __aeabi_memset</span><br><span class="line">    36: 00000000     0 FUNC    GLOBAL DEFAULT  UND __android_log_write</span><br><span class="line">    37: 00000000     0 FUNC    GLOBAL DEFAULT  UND __cxa_allocate_e[...]</span><br><span class="line">    38: 00000000     0 FUNC    GLOBAL DEFAULT  UND __cxa_begin_catch</span><br><span class="line">    39: 00000000     0 FUNC    GLOBAL DEFAULT  UND __cxa_end_catch</span><br><span class="line">    40: 00000000     0 FUNC    GLOBAL DEFAULT  UND __cxa_free_exception</span><br><span class="line">    41: 00000000     0 FUNC    GLOBAL DEFAULT  UND __cxa_throw</span><br><span class="line">    42: 00000000     0 FUNC    GLOBAL DEFAULT  UND __gxx_personality_v0</span><br><span class="line">    43: 00000000     0 FUNC    GLOBAL DEFAULT  UND __aeabi_memclr</span><br><span class="line">    44: 00000000     0 FUNC    GLOBAL DEFAULT  UND __gnu_Unwind_Fin[...]</span><br><span class="line">    45: 00007c08    16 OBJECT  WEAK   DEFAULT   17 _ZTTNSt6__ndk119[...]</span><br><span class="line">    46: 00003319    12 FUNC    WEAK   DEFAULT   13 _ZTv0_n12_NSt6__[...]</span><br><span class="line">    47: 000062b6    50 OBJECT  WEAK   DEFAULT   16 _ZTSNSt6__ndk113[...]</span><br><span class="line">    48: 000034d9    88 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk115ba[...]</span><br><span class="line">    49: 00003739    14 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk115ba[...]</span><br><span class="line">    50: 00007cc4    64 OBJECT  WEAK   DEFAULT   17 _ZTVNSt6__ndk115[...]</span><br><span class="line">    51: 000062a0    22 OBJECT  WEAK   DEFAULT   16 _ZTSN6Zhenxi10Lo[...]</span><br><span class="line">    52: 000034d1     4 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk115ba[...]</span><br><span class="line">    53: 00003709    32 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk115ba[...]</span><br><span class="line">    54: 00007cb8    12 OBJECT  WEAK   DEFAULT   17 _ZTINSt6__ndk115[...]</span><br><span class="line">    55: 00003d03    92 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk113ba[...]</span><br><span class="line">    56: 00007c18    40 OBJECT  WEAK   DEFAULT   17 _ZTCNSt6__ndk119[...]</span><br><span class="line">    57: 00007c40    12 OBJECT  WEAK   DEFAULT   17 _ZTINSt6__ndk19b[...]</span><br><span class="line">    58: 00007bd8     8 OBJECT  WEAK   DEFAULT   17 _ZTIN6Zhenxi10Lo[...]</span><br><span class="line">    59: 000032d9    12 FUNC    WEAK   DEFAULT   13 _ZTv0_n12_NSt6__[...]</span><br><span class="line">    60: 00003085   128 FUNC    GLOBAL DEFAULT   13 JNI_OnLoad</span><br><span class="line">    61: 00003ad9    96 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk112ba[...]</span><br><span class="line">    62: 00003a91    72 FUNC    WEAK   DEFAULT   13 _ZNKSt6__ndk115b[...]</span><br><span class="line">    63: 00003391    40 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk115ba[...]</span><br><span class="line">    64: 00003a07    28 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk119ba[...]</span><br><span class="line">    65: 000063a3    52 OBJECT  WEAK   DEFAULT   16 _ZTSNSt6__ndk115[...]</span><br><span class="line">    66: 00007c4c    24 OBJECT  WEAK   DEFAULT   17 _ZTINSt6__ndk113[...]</span><br><span class="line">    67: 00007cb0     8 OBJECT  WEAK   DEFAULT   17 _ZTINSt6__ndk115[...]</span><br><span class="line">    68: 0000355f    34 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk115ba[...]</span><br><span class="line">    69: 00003a25   108 FUNC    WEAK   DEFAULT   13 _ZN6Zhenxi10LogM[...]</span><br><span class="line">    70: 00003d61   168 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk113ba[...]</span><br><span class="line">    71: 00003185    88 FUNC    GLOBAL DEFAULT   13 Java_com_kejian_[...]</span><br><span class="line">    72: 000031dd     4 FUNC    GLOBAL DEFAULT   13 Java_com_kejian_[...]</span><br><span class="line">    73: 00003149    60 FUNC    WEAK   DEFAULT   13 _ZN6Zhenxi10LogM[...]</span><br><span class="line">    74: 00003531    46 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk115ba[...]</span><br><span class="line">    75: 00003bfd    40 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk113ba[...]</span><br><span class="line">    76: 00003581    76 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk115ba[...]</span><br><span class="line">    77: 000032cb    14 FUNC    WEAK   DEFAULT   13 _ZTv0_n12_NSt6__[...]</span><br><span class="line">    78: 00007be0    40 OBJECT  WEAK   DEFAULT   17 _ZTVNSt6__ndk119[...]</span><br><span class="line">    79: 00003105    28 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk1lsIN[...]</span><br><span class="line">    80: 000033c9     2 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk115ba[...]</span><br><span class="line">    81: 00003747    14 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk115ba[...]</span><br><span class="line">    82: 00007c64    12 OBJECT  WEAK   DEFAULT   17 _ZTINSt6__ndk119[...]</span><br><span class="line">    83: 00003629   224 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk115ba[...]</span><br><span class="line">    84: 00007bc8    16 OBJECT  WEAK   DEFAULT   17 _ZTVN6Zhenxi10Lo[...]</span><br><span class="line">    85: 00003b39   196 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk124__[...]</span><br><span class="line">    86: 00006315    73 OBJECT  WEAK   DEFAULT   16 _ZTSNSt6__ndk119[...]</span><br><span class="line">    87: 000032b5    22 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk113ba[...]</span><br><span class="line">    88: 00007c70    64 OBJECT  WEAK   DEFAULT   17 _ZTVNSt6__ndk115[...]</span><br><span class="line">    89: 00003729    16 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk115ba[...]</span><br><span class="line">    90: 000033cd   236 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk115ba[...]</span><br><span class="line">    91: 00003e21    82 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk112ba[...]</span><br><span class="line">    92: 000033cb     2 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk115ba[...]</span><br><span class="line">    93: 00003797    18 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk111ch[...]</span><br><span class="line">    94: 000039f5    18 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk111ch[...]</span><br><span class="line">    95: 00003831   168 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk112ba[...]</span><br><span class="line">    96: 00003755     6 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk115ba[...]</span><br><span class="line">    97: 000062e8    45 OBJECT  WEAK   DEFAULT   16 _ZTSNSt6__ndk19b[...]</span><br><span class="line">    98: 0000375b     6 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk115ba[...]</span><br><span class="line">    99: 000033b9    16 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk115ba[...]</span><br><span class="line">   100: 00003309    16 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk119ba[...]</span><br><span class="line">   101: 00003781    22 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk112ba[...]</span><br><span class="line">   102: 00003349    48 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk115ba[...]</span><br><span class="line">   103: 00008004     0 NOTYPE  GLOBAL DEFAULT  ABS _edata</span><br><span class="line">   104: 00003325    12 FUNC    WEAK   DEFAULT   13 _ZTv0_n12_NSt6__[...]</span><br><span class="line">   105: 000035cd    92 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk115ba[...]</span><br><span class="line">   106: 000032a5    16 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk113ba[...]</span><br><span class="line">   107: 00008005     0 NOTYPE  GLOBAL DEFAULT  ABS _end</span><br><span class="line">   108: 00003121    40 FUNC    WEAK   DEFAULT   13 _ZN6Zhenxi10LogM[...]</span><br><span class="line">   109: 00003245    16 FUNC    WEAK   DEFAULT   13 _ZN6Zhenxi10LogM[...]</span><br><span class="line">   110: 0000393d    36 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk112ba[...]</span><br><span class="line">   111: 0000635e    69 OBJECT  WEAK   DEFAULT   16 _ZTSNSt6__ndk115[...]</span><br><span class="line">   112: 000037a9   104 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk112ba[...]</span><br><span class="line">   113: 000038d9    16 FUNC    WEAK   DEFAULT   13 _ZNKSt6__ndk121_[...]</span><br><span class="line">   114: 000032e5    36 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk119ba[...]</span><br><span class="line">   115: 00003961   120 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk112ba[...]</span><br><span class="line">   116: 00008004     0 NOTYPE  GLOBAL DEFAULT  ABS __bss_start</span><br><span class="line">   117: 00003761     6 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk115ba[...]</span><br><span class="line">   118: 000034d5     4 FUNC    WEAK   DEFAULT   13 _ZNSt6__ndk115ba[...]</span><br></pre></td></tr></table></figure><p>第一列 num 表示符号表数组的下标; 第二列 value 就是符号值, 即 st_value; 第三列 Size 表示符号大小, 即 st_size; 第四列和第五列分别为符号类型和绑定信息, 即 st_info 的低 4 位和高 28 位;第六列 Vis 目前没用; 第七列 Ndx 就是 st_shndx, 表示符号所属的段; 最后一列是符号名称, 即 st_name;</p><h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><p>使用 ld 作为链接器来链接生产科执行文件时, 它会为我们定义很多特殊的符号, 这些符号我们可以直接声明并使用, 我们称这些链接器产生的符号为特殊符号;</p><ul><li>  <code>__executable_start</code>: 该符号是程序起始地址, 不是入口地址, 是程序最开始的地址</li><li>  <code>__etext</code>或者<code>_etext</code>或者<code>etext</code>: 该符号是代码段结束地址, 也就是代码段最末尾地址</li><li>  <code>_edata</code>或者<code>edata</code>: 该符号是数据段结束地址, 即数据段最末尾的地址</li><li>  <code>_end</code>或<code>end</code>: 该符号位程序结束地址</li></ul><h3 id="符号改编和函数签名"><a href="#符号改编和函数签名" class="headerlink" title="符号改编和函数签名"></a>符号改编和函数签名</h3><p>函数签名, 包含了一个函数的信息, 包括函数名, 它的参数类型, 它所在的类和名称空间及其他信息; 函数签名用于识别不同的函数; 函数的名字只是函数签名的一部分, 同名函数因为参数类型不同, 所在的类不同, 名称空间不同等都会产生不同的函数签名; </p><p>在编译器和链接器处理符号时, 会使用符号改编 (name mangline) 对函数和变量进行改编, 形成符号名; 也就是说 C++的源代码编译后的目标文件中所使用的符号名是相应的函数和变量经过修饰之后的名称;</p><p>可以使用 <code>c++filt -n 修饰后的符号名</code>来还原原始的函数名或者变量名;</p><h3 id="extern-“C”"><a href="#extern-“C”" class="headerlink" title="extern “C”"></a>extern “C”</h3><p>C++为了和 C 兼容, 在符号管理上, C++有一个用来声明或定义一个 C 的符号的<code> extern &quot;C&quot;</code>关键字用法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> var;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++编译器会将在<code>extern &quot;C&quot;</code>的大括号内的代码当做 C 语言的代码处理; 所以此时 C++的符号改编机制就不会起作用;</p><p>我们可以通过 C++的宏<code> __cplusplus</code>来判断当前编译单元是不是 C++代码;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cpluscplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> *<span class="built_in">memset</span> &#123;<span class="keyword">void</span> *, <span class="keyword">int</span>, <span class="keyword">size_t</span>&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>如果当前编译单元是 C++代码, 那么 memset 会在 <code>extern &quot;C&quot;</code>里面被声明; 如果是 C 代码, 则直接声明;</p><h3 id="弱符号和强符号"><a href="#弱符号和强符号" class="headerlink" title="弱符号和强符号"></a>弱符号和强符号</h3><p>符号重复定义: 多个目标文件中含有相同名字全局符号的定义, 这些目标文件链接的时候将会出现符号重复定义的错误; 比如: 目标文件 A 和目标文件 B 都定义了一个全局整型变量 global, 并将它们都初始化了, 那么链接器将 A 和 B 进行链接的时候会报错;</p><p>在 C/C++中默认函数和初始化了的全局变量为强符号, 未初始化的全局变量为弱符号; 可以通过<code>__attribute__((weak))</code>来将任何一个强符号转化为弱符号; 这里的强符号和弱符号是针对定义来说的, 不是针对符号的引用;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> ext; <span class="comment">// 外部变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> weak; <span class="comment">// 未初始化全局变量</span></span><br><span class="line"><span class="keyword">int</span> strong = <span class="number">1</span>; <span class="comment">// 初始化全局变量</span></span><br><span class="line"></span><br><span class="line">__attribute__((weak)) weak2 = <span class="number">2</span>; <span class="comment">// weak2 转弱符号</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>  weak 和 weak2 是弱符号</li><li>  strong 和 main 是强符号</li><li>  ext 不是强符号也不是弱符号, 是一个外部变量的引用</li></ul><p>全局符号处理规则:</p><ol><li> 不允许强符号被多次定义(不同的文件中不能有同名的强符号); 如果有多个强符号定义, 则链接器报符号重复定义错误</li><li> 如果一个符号在某个目标文件中是强符号, 在其他文件中都是弱符号, 那么选择强符号</li><li> 如果一个符号在所有目标文件中都是弱符号, 那么选择其中占用空间最大的一个; 比如目标文件 A 定义全局变量 global 为 int 型, 占 4 个字节; 目标文件 B 定义 global 为 double 型, 占 8 个字节; 那么目标 A 文件和目标 B 文件链接后, 符号 global 占 8 字节;</li></ol><h3 id="弱引用和强引用"><a href="#弱引用和强引用" class="headerlink" title="弱引用和强引用"></a>弱引用和强引用</h3><p>如果没有找到该符号的定义, 链接器就会报未定义错误, 这种被称为强引用; 与之相应的还有一种弱引用, 在处理弱引用时, 如果该符号有定义, 则链接器将该符号的引用决议; 如果该符号未被定义, 则链接器对于该引用不会报错; </p><p>在 GCC 中, 我们可以通过<code>__attribute__((weakref))</code>这个扩展关键字来声明对一个外部函数的引用为弱引用; 比如:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__attribute__((weakref)) <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将上面代码编译成一个可执行文件, GCC 并不会报链接错误; 但是运行这个可执行文件, 会发生运行错误; 因为 main 函数调用 foo 函数时, foo 函数的地址为 0,于是发生了非法地址访问的错误; 可以改为:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__attribute__((weakref)) <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (foo) foo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种弱符号和弱引用对于库来说十分有用, 比如库中定义的弱符号可以被用户定义的强符号所覆盖, 从而使得程序可以使用自定义版本的库函数; 或者程序可以对某些扩展功能模块的引用定义为弱引用; 当我们将扩展模块与程序链接起来时, 功能模块就可以正常使用了, 如果我们去掉了某些功能模块, 那么程序也可以正常链接, 只是缺少了相应的功能; 这使得程序的功能更加容易裁剪和组合;</p><h3 id="调试信息"><a href="#调试信息" class="headerlink" title="调试信息"></a>调试信息</h3><p>目标文件里面还有可能保存的是调试信息; 几乎所有现代的编译器都支持源代码级别的调试, 比如我们可以在函数里面设置断点, 可以监视变量变化, 可以单步等; </p><p>在 GCC 编译时加上-g 参数, 编译器就会在产生的目标文件里面加上调试信息. 通过 readelf 可以查看到目标文件中增加了很多 debug 相关的段;</p><p>  现在的 ELF 文件采用 DWARF 的标准的调试信息格式; 在 Linux 下, 可以使用 strip 命令来去掉 ELF 文件中的调试信息;</p><p><code> strip foo</code></p><h2 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h2><p>有两个目标文件, 如何将它们链接起来形成一个可执行文件, 这就是链接的核心内容: 静态链接;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.c</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> shared;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">    swap( &amp;a, &amp;shared );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> shared = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span>* b)</span></span>&#123;</span><br><span class="line">    *a ^= *b ^= *a ^= *b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设程序只有两个模块 a.c 和 b.c; 使用 gcc 将 a.c 和 b.c 分别编译成目标文件 a.o 和 b.o; <code>gcc -c a.c b.c</code></p><p>经过编译获得了 a.o 和 b.o 两个目标文件, b.c 中一共定义了两个全局符号, 一个是全局变量 shared, 和一个函数 swap; a.c 里面定义了一个全局符号就是 main; 模块 a.c 里面引用了 b.c 里面的 swap 和 shared; 接下来就是将两个目标文件链接在一起形成一个可执行文件 ab;</p><h3 id="空间与地址分配"><a href="#空间与地址分配" class="headerlink" title="空间与地址分配"></a>空间与地址分配</h3><p>对于链接器来说, 整个链接过程中, 它就是将几个输入目标文件加工后合并成一个输出文件; 在这个案例中, 输入文件就是 a.o 和 b.o;输出就是可执行文件 ab; 可执行文件的代码段和数据段都是由输入的目标文件合并而来的, 这就产生了问题: 对于多个输入的目标文件, 链接器如何将它们的各个段合并到输出文件中? 或者说, 输出文件中的空间是如何分配给输入文件的?</p><h4 id="按序叠加"><a href="#按序叠加" class="headerlink" title="按序叠加"></a>按序叠加</h4><p>最简单的方案就是按序叠加, 将输入的目标文件依照次序叠加起来;</p><p>但是这样会产生问题, 在有多个输入文件的情况下, 输出文件会产生多个零散的段; 比如一个稍大的应用程序可能会有数百个目标文件, 如果每个目标文件都分别有.text 段和.data 段和.bss 段, 最后输出文件将会有很多个零散的段; 这种做法很浪费空间, 因为每个段都必须要有一定的地址和空间对齐要求, 比如对于 x86 硬件来说, 段的装载地址和空间的对齐单位是页, 也就是 4096 字节, 那么就是说如果一个段的长度只有 1 个字节, 它也要在内存中占用 4096 字节; 这样会造成空间浪费;</p><h4 id="相似段合并"><a href="#相似段合并" class="headerlink" title="相似段合并"></a>相似段合并</h4><p>更实际的做法是将相同性质的段合并到一起, 比如将所有输入文件的.text 合并到输出文件的.text 段; 将所有输入文件的.data 段, .bss 段全部合并到输出文件的.data 段和.bss 段中; </p><p>.bss 段在前面说了, 在目标文件和可执行文件中都不占用文件的空间, 但是它在装载的时候占用地址空间, 所以链接器在合并各个段的同时, 也将.bss 段合并, 并且分配了虚拟空间; </p><h4 id="空间和地址"><a href="#空间和地址" class="headerlink" title="空间和地址"></a>空间和地址</h4><p>空间和地址有两个含义:</p><ol><li> 第一个是输出的可执行文件的空间</li><li> 第二个是在装载后的虚拟地址中的虚拟地址空间</li></ol><p>对于有实际数据的段, 比如 .text 和 .data 来说, 他们在文件中和在虚拟地址中都要分配空间, 因为它们在这两者中都存在; 而对于.bss 这样的段来说, 分配空间的意义只局限于虚拟地址空间, 因为它在文件中并没有内容; 事实上, 我们在这里谈的空间只关注于虚拟地址空间的分配, 因为这个关系到链接器后面关于地址计算的步骤, 而可执行文件本身的空间分配与链接过程关系并不大;</p><p>现在链接器空间分配策略都是采用相似段合并的方式, 并且都使用两步链接的方法:</p><ol><li>空间与地址分配<ol><li> 扫描所有输入目标文件, 并且获得他们的各个段的长度, 属性和位置</li><li> 将输入文件中的符号表中的所有符号定义和符号引用都收集起来, 统一放到一个全局符号表中</li><li> 将输入文件的所有段合并, 并计算出申诉出文件中各个段合并后的长度和位置, 建立映射关系</li></ol></li><li>符号解析和重定位<ol><li> 从第一步获取到输入文件中端的数据, 重定位信息, 并且进行符号解析与重定位, 调整代码中的地址等;</li><li> 符号解析和重定位是链接过程的核心</li></ol></li></ol><p>使用 ld 将 a.o 和 b.o 链接起来:  <code>ld a.o b.o -e main -o ab</code>; -e main 表示将 main 作为程序的入口, ld 链接器默认的程序入口为_start; -o ab 表示链接输入文件名为 ab, 默认为 a.out;</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-07-20-053440.png"></p><p>VMA Virtual Memory Address 表示虚拟地址, LMA 表示 Load Memory Address, 即加载地址, 正常情况下这两个值应该是一样的, 但是在有些嵌入式系统中, 特别是那些程序放在 ROM 的系统中时, LMA 和 VMA 是不相同的; 这里只需要关注 VMA 即可;</p><h4 id="符号地址的确定"><a href="#符号地址的确定" class="headerlink" title="符号地址的确定"></a>符号地址的确定</h4><p>在第一步的扫描和空间分配阶段, 链接器按照前面介绍的空间分配方法进行分配, 这时候输入文件中的各个段在链接后的虚拟地址就已经确定了; 比如.text 段起始地址是: 0x08048094; .data 段的起始地址为 0x0849108;</p><p>当前面一步完成之后, 链接器开始计算各个符号的虚拟地址; 因为各个符号在段内的相对位置是固定的, 所以这个时候其实 main, shared 和 swap 的地址就已经确定了; 只不过链接器要给每个符号加上一个偏移量, 让它们能够调整到正确的虚拟地址; 比如假设 a.o 中的 main 函数相对于 a.o 的 .text段的偏移是 X;通过 objdump 看到 main 方法在 a.o 中.text 段的最开始, 但是经过链接合并之后, 所以 main 这个符号在最终的输出文件中的地址为 0x08048094 + 0; 通过这样的方法可以获取到所有符号的地址;</p><h3 id="符号解析与重定位"><a href="#符号解析与重定位" class="headerlink" title="符号解析与重定位"></a>符号解析与重定位</h3><h4 id="重定位"><a href="#重定位" class="headerlink" title="重定位"></a>重定位</h4><p>在完成了空间和地址分配之后, 链接器就进入了符号解析与重定位的步骤, 这也是静态链接的核心内容; 在分析符号解析和重定位之前, 看一下原始的 a.o 中是如何处理这两个外部符号 shared 变量和 swap 函数的:</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-07-20-060631.png"></p><ul><li>  程序的代码里面使用的都是虚拟地址, 这里 main 的起始地址时 0x00000000; 因为在未进行前面提到的空间分配之前, 目标文件代码中的起始地址以 0x00000000 开始, 等到空间分配完成之后, 各个函数才会确定自己在虚拟空间中的位置;</li><li>  在 a.c 的源代码被编译成目标文件时, 编译器并不知道 shared 和 swap 的地址, 因为它们定义在其他目标文件中, 所以编译器就暂时把地址 0 看做是 shared 的地址; 0xFFFFFFFC也是一个临时的假地址, 用作 swap 的临时地址, 因为编译器不知道 swap 的真正地址;</li><li>  编译器把这两条指令的地址部分暂时用地址 0x00000000 和 0xFFFFFFFC 代替, 把真正的地址计算工作留给了链接器; 通过前面的空间和地址分配, 链接器完成地址和空间分配之后, 就可以知道所有符号的虚拟地址了, 那么链接器就可以根据符号的地址对每个需要重定位的指令进行修正; </li></ul><p>看一下 ab 代码中, main 函数中的两个需要重定位的入口已经被修正: shared 和 swap 都已经获得了真实地址;</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-07-20-061650.png"></p><h4 id="重定位表-1"><a href="#重定位表-1" class="headerlink" title="重定位表"></a>重定位表</h4><p>链接器如何知道哪些指令是需要被调整的? 事实上在 ELF 文件中, 有一个叫重定位表的结构专门用来保存这些与重定位相关的信息; 对于重定位的 ELF 的文件来说, 它必须包含有重定位表, 用来表述如何修改相应的段里的内容; 每一个需要被重定位的 ELF 段都有一个对应的重定位表, 而一个重定位表往往就是 ELF 文件中的一个段, 所以其实重定位表也可以叫做重定位段; 比如代码段 .text 如果要被重定位, 那么会有一个相应的 .rel.text 的段保留了代码段的重定位表;如果代码段.data 有要被重定位的地方, 会有一个相应的 .rel.data 的段保存数据段的重定位表; </p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-07-20-062648.png"></p><p>使用 <code>objdump -r </code>可以查看重定位表, 可以看到 a.o 中所有引用了外部符号的地址; 每一个要被重定位的地方叫做重定位入口; a.o 中有两个需要被重定位的重定位入口, 重定位入口的 OFFSET 偏移表示该入口在要被重定位的段中的位置; RELOCATION RECORDS FOR [.text] 表示这个重定位表示代码段的重定位表; 所以偏移表示代码段中需要被调整的位置, 对照前面反汇编的结构, 0x1c 和 0x27 分别就是 mov 指令和 call 指令的地址部分;</p><p>重定位表的结构也很简单, 是一个 Elf32_Rel 结构的数组, 每个数组元素对应一个重定位入口, 定义如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Elf32_Addr r_offset;</span><br><span class="line">    Elf32_Word r_info;</span><br><span class="line">&#125;Elf32_Rel;</span><br></pre></td></tr></table></figure><ol><li> r_offset: 重定位入口的偏移, 对于可重定位文件来说, 这个值就是重定位入口所要修正的位置的第一个字节相对于段起始的偏移; 对于可执行文件或者共享对象文件来说, 这个值就是该重定位入口所要修正的位置的第一个字节的虚拟地址;</li><li> r_info: 重定位入口的类型和符号, 这个成员的低 8 位表示重定位入口的类型, 高 24 位表示重定位入口的符号在符号表中的下标;</li></ol><h4 id="符号解析"><a href="#符号解析" class="headerlink" title="符号解析"></a>符号解析</h4><p>链接是因为我们目标文件中用到的符号被定义在其他目标文件里, 所以要将它们链接进来; 其实在前面重定向的过程中, 也伴随着符号的解析过程; 重定位的过程中, 每个重定位的入口都是对一个符号的引用; 当链接器需要对某个符号的引用进行重定位时, 它就要确定这个符号的目标地址; 这个时候链接器就会去查找由所有输入文件符号表组成的全局符号表, 找到相应的符号后进行重定位;</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-07-20-065935.png"></p><ul><li>  Global 类型的符号除了 main 是定义在代码段中的, 其他两个 shared 和 swap 都是 UND, 即 undefind 未定义类型;</li><li>  这种未定义的符号都是因为该目标文件中有关于它们的重定位项;</li><li>  在链接器扫描完所有的输入目标文件后, 所有这些未定义的符号都应该能够在全局符号表中找到, 否则链接器就会报未定义错误;</li></ul><h3 id="COMMON-块"><a href="#COMMON-块" class="headerlink" title="COMMON 块"></a>COMMON 块</h3><p>链接器本身不支持符号的类型, 即变量类型对于链接器来说是透明的, 它只知道一个符号的名字, 并不知道类型是否一致; 以下分三种情况讨论类型不一致的的时候链接器如何处理:</p><ol><li> 两个或两个以上的强符号类型不一致 –&gt;  直接报错, 符号多重定义错误</li><li> 有一个强符号, 其他都是弱符号, 出现类型不一致 –&gt;  以强符号所占空间为准</li><li> 两个或者两个以上的弱符号类型不一致 –&gt;  以输入文件中占用空间最大的那个为准</li></ol><p>使用 COMMON 块的方法是一种取巧的行为, 因为编译器和链接器允许不同类型的弱符号存在, 但最本质的原因还是链接器不支持符号类型, 即链接器无法判断各个符号的类型是否一致;</p><p>编译器为什么使用 COMMON块来标记弱符号, 而不是将弱符号当做局部变量在.bss 段中分配空间来处理?</p><ol><li> 编译器不能确定弱符号最终的大小; 因为如果编译器包含了弱符号(未初始化的全局变量就是典型的弱符号). 那么该符号最终占用的空间大小此时还是未知的, 有可能其他编译单元中该符号所占用的空间比本编译单元该符号所占用空间要大, 所以此时编译器并不能为该弱符号在.bss 段中分配空间;</li><li> 链接器在链接过程中可以确定弱符号的大小, 因为当链接器读取所有输入目标文件后, 任何一个弱符号的最终大小都可以确定, 所以它可以在最终输出文件的 BSS 段为其分配空间</li><li> 总体来看, 未初始化全局变量最终还是被放在 bss 段中, 只是是由链接器将其放入 bss 段的;</li></ol><p>开发人员可以通过 <code>__attribute__((nocommon));</code>扩展来让未初始化的全局变量不以 COMMON 块的形式处理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> global __attribute__((nocommon));</span><br></pre></td></tr></table></figure><p>一旦一个未初始化的全局变量是不以 COMMON 块的形式存在的, 那么它就相当于一个强符号, 如果其他目标文件中还有一个同名的强符号定义, 那么链接时就会发成符号重复定义错误; </p><h2 id="可执行文件的装载与进程"><a href="#可执行文件的装载与进程" class="headerlink" title="可执行文件的装载与进程"></a>可执行文件的装载与进程</h2><ol><li> 什么是进程的虚拟地址空间?</li><li> 为什么进程要有自己独立的虚拟地址空间?</li><li> 装载的几种方式?</li><li> 虚拟地址空间分布情况, 代码块, 数据段, bss 段, 堆,栈分别在进程地址空间中怎么分布, 它们的位置和长度如何决定?</li></ol><h3 id="进程虚拟空间地址"><a href="#进程虚拟空间地址" class="headerlink" title="进程虚拟空间地址"></a>进程虚拟空间地址</h3><p>每个程序运行起来以后, 它都将拥有自己独立的虚拟地址空间, 这个虚拟地址空间的大小由计算机的硬件平台决定, 具体说就是由 CPU 的位数决定; 硬件决定了地址空间的最大理论上限, 即硬件的寻址空间大小; 比如 32 位的硬件平台决定了虚拟地址空间的地址为 0 ~ 2^32-1, 也就是0x0000 0000 ~ 0xFFFF FFFF, 也就是常说的 4G 虚拟空间大小; 而 64 位的硬件平台具有64 位寻址能力, 它的虚拟地址空间达到了 2^64 字节, 也就是 0x0000000000000000~0xFFFFFFFFFFFFFFFF, 总共是 17179869184GB;</p><p>一般来说, 我们可以通过 C 语言指针大小的位数来判断虚拟空间的大小, C 语言指针大小的位数与虚拟空间的位数相同, 如 32 位平台下面指针为 32 位, 即 4 个字节; 64 位平台下的指针为 64 位, 即 8 个字节;</p><p>32 位下, 程序在运行的时候不是完全使用4GB虚拟地址空间, 4GB 虚拟地址空间被划分成两部分, 其中操作系统本身要用去一部分, 从地址 0xC0000000到 0xFFFFFFFF 共1GB; 剩下的从 0x00000000 到 0xBFFFFFFF 共 3GB 的空间留给进程使用; </p><p>从原则上说我们的进程最多可以使用3GB 的虚拟地址空间, 但是并不是进程只能使用 3GB 的空间, 这个空间如果理解成虚拟地址空间的话, 那么 32 位的 cpu 只能使用 32 位的指针, 最大寻址范围是 0 到 4GB; 如果这个空间理解成计算机的内存空间, 那么其实可以使用更大的空间, 因为像 intel 从1995 年开始就采用了 36 位的物理地址, 也就是可以访问 64GB 的物理内存; intel 在扩展了 36 位地址线之后, 修改了页映射方式, 使得新的映射方式可以访问到更多的物理内存, 这种地址扩展方式被叫做 PAE;</p><h3 id="装载的方式"><a href="#装载的方式" class="headerlink" title="装载的方式"></a>装载的方式</h3><p>静态装载: 将程序运行所需要的指令和数据全部都装入内存中, 这样程序就可以顺利运行了; 但是很多情况下, 程序所需要的内存是远大于物理内存的数量的, 所以静态装入的方式现在很少使用;</p><p>动态装载: 覆盖装入和页映射是两种很典型的动态装载方式, 动态装载的思想就是程序要用到哪个模块, 就将哪个模块装入内存, 如果暂时不用, 就不装入内存, 存放在磁盘中;</p><h4 id="覆盖装入"><a href="#覆盖装入" class="headerlink" title="覆盖装入"></a>覆盖装入</h4><p>在没有发明虚拟存储之前应用广泛, 现在几乎被淘汰了; </p><p>覆盖装入的方法将挖掘内存潜力的任务交给了程序员, 程序员在编写程序的时候必须手动将程序划分成若干个块, 然后编写一个小的辅助代码来管理这些模块应该何时驻留在内存何时被替换掉; 这个小的辅助代码就是覆盖管理器; 最简单的案例, 一个主程序 main, main 会分别调用模块 A 和模块 B; 但是 A 和 B 之间不会相互调用, 那么我们可以用覆盖装入, 让模块 A 和模块 B 在内存中相互覆盖, 即这两个模块共享块内存区域; 当 main 调用模块 A 的时候, 覆盖管理器保证将模块 A从文件中读入内存, 当 main 调用模块 B 时, 则覆盖管理器将 B 从文件中读入内存, 因为此时 A 不再使用, 所以 B 会装入原先 A 所占用的内存空间;</p><h4 id="页映射"><a href="#页映射" class="headerlink" title="页映射"></a>页映射</h4><p>页映射是虚拟存储机制的一部分, 它随着虚拟存储的发明而诞生; 与覆盖装入的原理相似, 页映射也不是一下子就把程序的所有数据和指令都装入内存, 而是将内存和所有磁盘中的数据和指令按照页 Page 为单位划分成若干个页; 以后所有的装载和操作的单位都是页; 以目前的情况, 硬件规定的页大小都是 4096 字节, 8192 字节, 2MB 和 4MB 等; </p><p>为了演示页映射的基本机制, 假设我们的 32 位机器有 16KB 的内存, 每个页大小为 4096 字节, 则一共有 4 个页;</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-07-21-021059.png"></p><p>假设所有的指令和数据总和有 32KB, 那么程序总共被分为 8 个页, 我们给他们编号为 P0-P7; 内存 16KB, 程序总共 32KB, 所以无法同时将 32KB 的程序装入内存, 我们将按照动态装入的原理来进行整个装入过程; </p><ul><li>  如果程序刚开始执行的入口在页 P0 中, 此时装载管理器发现程序 P0 不在内存中, 于是将内存 F0 分配给 P0, 将 P0 内容装入 F0; </li><li>  运行一段时间后, 程序发现需要使用 P5, 于是装载器将 P5 装入 F1, </li><li>  当程序用到 P3 和 P6 的时候, 它们分别被装入 F2 和 F3;</li></ul><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-07-21-021608.png"></p><p>当要使用到新的程序页的时候, 就需要使用内存页来加载这个新的程序页; 比如如果现在要使用到 P4, 则必须放弃内存页中原有的内容来装载 P4; 我们可以依据先进先出的原则, 放弃 F0 原有的内容, 用 F0 来加载 P4; 也可以根据最少使用算法 LUR, 发现哪个使用的较少, 可以将对应的内存页释放来加载 P4;</p><h3 id="从操作系统角度看可执行文件的装载"><a href="#从操作系统角度看可执行文件的装载" class="headerlink" title="从操作系统角度看可执行文件的装载"></a>从操作系统角度看可执行文件的装载</h3><p> 从上面的页映射的动态装入的方式可以看出, 可执行文件中的页可能被装入内存中的任意页; 在虚拟存储中, 现代硬件的 MMU 都提供了地址转换的功能, 有了硬件的地址转换和页映射机制, 操作系统动态加载可执行文件的方式和静态加载有了很大的区别;</p><h4 id="进程的建立"><a href="#进程的建立" class="headerlink" title="进程的建立"></a>进程的建立</h4><p>从操作系统的角度来看, 一个进程最关键的特征是它拥有独立的虚拟地址空间, 这让它有别于其他进程; 创建一个进程, 然后装载相应的可执行文件并且执行在有虚拟存储的情况下, 最开始只要做三件事:</p><ol><li> 创建一个独立的虚拟地址空间</li><li> 读取可执行文件头, 并且建立虚拟空间与可执行文件的映射关系</li><li> 将 CPU 的指令寄存器设置为客户自行文件的入口地址, 启动运行</li></ol><p>首先是创建虚拟地址空间; 虚拟地址空间由一组页映射函数将虚拟空间的各个页映射至相应的物理空间, 所以建立虚拟空间实际上并不是创建空间空间, 而是创建映射函数所需要的相应的数据结构; Linux 下创建虚拟地址空间实际上只是分配了一个页目录 Page Directory就可以了, 甚至都不需要设置页映射关系, 这些映射关系等到后面程序发生页错误的时候再设置;</p><p>读取可执行文件头, 并且建立虚拟空间与可执行文件的映射关系: 上一步的页映射关系函数是对虚拟空间到物理内存的映射关系; 而这一步所做的是虚拟空间和可执行文件的映射关系; 当程序发生页错误的时候, 操作系统将从物理内存里面分配一个物理页, 然后将该缺页从磁盘中读取到内存中, 再设置缺页的虚拟页和物理页的映射关系; 当操作系统捕获到缺页错误时, 它应当知道程序当前所需要的页在可执行文件中的哪个位置, 这就是虚拟空间和可执行文件之间的映射关系; </p><p>将 CPU 指令寄存器设置成可执行文件入口, 启动运行; 操作系统通过设置 CPU 的指令寄存器将控制权交给进程, 由此进程开始执行; 从进程的角度来看就是操作系统执行了一个跳转指令, 直接跳转到可执行文件的入口地址; 这个地址就是 ELF文件头中保存的入口地址;</p><h4 id="页错误"><a href="#页错误" class="headerlink" title="页错误"></a>页错误</h4><p>上面的步骤执行完成后, 其实可执行文件的真正指令和数据都没有被装入内存中; 操作系统只是通过可执行文件头部的信息建立起可执行文件和进程虚拟空间之间的映射关系;</p><p>假设上面的例子, 程序的入口地址是 0x08048000,即刚好是.text 段的起始地址, 当 CPU 开始打算执行这个地址的指令时, 发现页面 0x08048000~08049000 是一个空页面, 于是它就认为这个是一个页错误; CPU将控制权交给操作系统, 操作系统通过前面我们装载过程中提到的第二步建立的虚拟空间页和 ELF 文件映射的数据结构, 查询出空页面所在的 VMA 虚拟内存区域(virtual memory areas), 计算出相应的页面在可执行文件中的偏移, 然后再物理内存中分配一个物理页面, 将进程中该虚拟页与分配的物理页之间建立映射关系, 然后把控制权交给进程, 进程从刚才页错误的位置重新开始执行;</p><p>随着进程的执行, 页错误会不断产生, 操作系统也会为进程分配相应的物理页面来满足进程执行的需求;</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-07-21-033123.png"></p><h3 id="进程虚拟空间分布"><a href="#进程虚拟空间分布" class="headerlink" title="进程虚拟空间分布"></a>进程虚拟空间分布</h3><h4 id="ELF-文件链接视图和执行视图"><a href="#ELF-文件链接视图和执行视图" class="headerlink" title="ELF 文件链接视图和执行视图"></a>ELF 文件链接视图和执行视图</h4><p>ELF 文件被映射的时候, 是以系统的页长度作为单位的, 那么每个段在映射时的长度应该是系统页长度的整数倍; 如果不是, 那么多余部分也会占用一个一个页; 一般的 ELF 文件都有十几个段, 那么内存空间就会产生大量的浪费; </p><p>操作系统一般只关心一些和装载相关的问题, 最重要的就是段的权限, 可读,可写,可执行; ELF 文件中, 段的权限往往只有为数不多的几种组合, 基本上是三种: </p><ol><li> 以代码段为代表的权限为可读可执行的段</li><li> 以数据段和 bss 段为代表的权限为可读可写的段</li><li> 以只读数据段为代表的权限为只读的段</li></ol><p>对于相同权限的段, 把它们合并到一起当做一个段进行映射; 比如有两个段分别为 .text 和 .init, 他们分别是程序的可执行代码和初始化代码, 并且它们的权限相同, 都是可读并且可执行的; 假设.text 为 4097 字节, .init 为 512 字节, 这两个段分别映射的话就要占用三个页面; 但是如果将它们合并成一起映射的话, 就只要占据两个页面;</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-07-21-060209.png"></p><p>ELF 可执行文件引入了一个概念叫做 Segment; 一个 Segment 包含一个或者多个属性类似的 Section; 如果将.text 段和.init 段合并在一起看做是一个 Segment 的话, 那么装载的时候会将它们看做是一个整体一起映射, 也就是说映射以后在进程虚拟空间只有一个相对应的 VMA, 而不是两个, 这样做的好处是可以很明显减少页面内部碎片, 从而减少内存空间;</p><p>从链接的角度来看, ELF 文件是按 Section 存储的, 从装载的角度来看, ELF 文件又可以按照 Segment 划分;</p><p>Segment 的概念实际上是从装载的角度重新划分了 ELF 的各个段, 在将目标文件链接成可执行文件的时候, 链接器会尽量把相同权限属性的段分配在同一空间; 比如可读可执行的段都放在一起,典型的是代码段; 可读可写的段都放在一起, 典型的是数据段; ELF 把这些属性相似的有连在一起的段叫做 Segment, 而系统正是按照 Segment 而不是 Section 来映射可执行文件的;</p><p>使用 <code>readelf -l &lt;soPath&gt;</code> 可以查看 ELF 的 Segment; </p><p>使用 <code>readelf -S &lt;soPath&gt;</code>可以查看 ELF 的 Section;</p><p>描述 Section 属性的结构叫做段表, 描述 Segment 的结构叫做程序头 (Program Header), 它描述了 ELF 文件该如何被操作系统映射到进程的虚拟空间;</p><p>总体来说, Segment 和 Section 是从不同的角度来划分同一个 ELF 文件; 这个在 ELF 中被称为不同的视图 View; 从 Section的角度来看 ELF 文件就是链接视图 (Linking View); 从 Segment 的角度来看就是执行视图 (Execution View); 当在 ELF 装载过程中, 段专门指 Segment, 在其他情况下, 段指的是 Section;</p><p>ELF 可执行文件中有一个专门的数据结构叫做程序头表, 用来保存 Segment 的信息; 因为 ELF 目标文件不需要被装载, 所以它没有程序头表; 而 ELF 的可执行文件和共享库文件都有, 和段表结构一样, 程序头表也是一个结构体数组, 结构如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ELF32_Word p_type;</span><br><span class="line">    ELF32_Off p_offset;</span><br><span class="line">    ELF32_Addr p_vaddr;</span><br><span class="line">    ELF32_Addr p_paddr;</span><br><span class="line">    ELF32_Word p_filesz;</span><br><span class="line">    ELF32_Word p_memsz;</span><br><span class="line">    ELF32_Word p_flags;</span><br><span class="line">    ELF32_Word p_align;</span><br><span class="line">&#125;Elf32_Phdr;</span><br></pre></td></tr></table></figure><table><thead><tr><th>成员</th><th>含义</th></tr></thead><tbody><tr><td>p_type</td><td>Segment 的类型, 基本上我们这里只关注 Load 类型的 Segment; Load 类型的常量为 1; 还有几种诸如 Dynamic 和 Interp 在动态链接的时候会碰到</td></tr><tr><td>p_offset</td><td>Segment 在文件中的偏移</td></tr><tr><td>p_vaddr</td><td>Segment 的第一个字节在进程虚拟地址空间中的起始位置; 整个程序头表中, 所有 Load 类型的元素按照 p_vaddr 从小到大排序</td></tr><tr><td>p_paddr</td><td>Segment 的物理装载地址, 一般情况下物理装载地址就是 LMA, p_paddr 的值在一般情况下和 p_vaddr 是一样的;</td></tr><tr><td>p_filesz</td><td>Segment 在 ELF 文件中所占空间的长度, 它的值可能是 0; 因为有可能这个 Segment 在 ELF 文件中不存在</td></tr><tr><td>p_memse</td><td>Segment 在进程虚拟地址空间所占用的长度, 它的值可能是 0;</td></tr><tr><td>p_flags</td><td>Segment 的权限属性, 比如可读 R, 可写 W 和可执行 X</td></tr><tr><td>p_align</td><td>Segment 的对齐属性, 实际对齐字节等于 2的 p_align 次; 比如 p_align 等于 10, 那么实际的对齐对齐属性就是 2 的 10 次方;</td></tr></tbody></table><p>对于 Load 类型的Segment 来说, p_memsz 的值不可以小于 p_filesz, 否则就是不符合常理的; 如果 p_memsz 的值大于 p_filesz 就表示该 Segment 在内存中所分配的空间大小超过文件实际的大小, 这部分多余的部分会全部填充为 0; 这样做的好处就是, 我们在构造 ELF 可执行文件时, 不需要额外再设立 bss 的 Segment 了, 可以把数据 Segment 的 p_memsz 扩大, 这些额外的部分就是 BSS; </p><p>数据段和 bss 的唯一区别就是, 数据段从文件中初始化内容, 而 bss 段的内容全部初始化为 0, 这也就是我们在前面例子中只看到两个 Load 类型的段, 而不是三个, bss 已经合并到数据类型的段里面;</p><h4 id="堆和栈"><a href="#堆和栈" class="headerlink" title="堆和栈"></a>堆和栈</h4><p>VMA 除了被用来映射可执行文件中的各个 Segment 以外, 它还可以有其他的作用, 操作系统通过 VMA 来对进程的地址空间进行管理; 进程在执行的时候它还需要用到堆和栈等空间; 事实上它们在进程的虚拟空间中的表现也是以 VMA 的形式存在的;很多情况下, 一个进程中的堆和栈分别都有一个对应的 VMA; 在 Linux 下, 我们可以通过查看 <code>/proc</code>来查看进程的虚拟空间分布;</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-07-21-070315.png"></p><p>第一列是 VMA 的地址范围, 第二列是 VMA 的权限, r 表示可读, w 表示可写, x 表示可执行; p 表示私有, s 表示共享; 第三列是偏移, 表示 VMA 对应的 Segment 在映像文件中的偏移; 第四列表示映像文件所在设备的主设备号和次设备号, 第五列表示映像文件的节点号; 最后一列是映像文件的路径;</p><p>可以看到进程中有 5 个 VMA, 只有前两个是映射到可执行文件中的两个 Segment; 另外三个段的文件所在设备主设备号和次设备号及文件节点都是 0, 则表示它们没有映射到文件中, 这种 VMA 叫做匿名虚拟内存区域; Heap 和 Stack 它们大小分别为 140KB 和 88KB; 这两个 VMA 几乎在所有的进程中存在, 我们在 C 语言中最常用的 malloc() 内存分配函数就是从堆里面分配, 堆由系统库管理;</p><ul><li>  代码 VMA, 权限只读, 可执行, 有映像文件</li><li>  数据 VMA, 权限可读可写可执行, 有映像文件</li><li>  堆 VMA, 权限可读写, 可执行, 无映像文件, 匿名, 可以向上扩展</li><li>  栈 VMA, 权限可读写, 不可执行, 无映像文件, 匿名, 可向下扩展</li></ul><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-07-21-071820.png" style="zoom:50%;" /><h3 id="Linux-内核装载-ELF-过程简介"><a href="#Linux-内核装载-ELF-过程简介" class="headerlink" title="Linux 内核装载 ELF 过程简介"></a>Linux 内核装载 ELF 过程简介</h3><h2 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h2><h3 id="为什么要动态链接"><a href="#为什么要动态链接" class="headerlink" title="为什么要动态链接"></a>为什么要动态链接</h3><h3 id="简单的动态链接案例"><a href="#简单的动态链接案例" class="headerlink" title="简单的动态链接案例"></a>简单的动态链接案例</h3><h3 id="地址无关代码"><a href="#地址无关代码" class="headerlink" title="地址无关代码"></a>地址无关代码</h3><h3 id="延迟绑定"><a href="#延迟绑定" class="headerlink" title="延迟绑定"></a>延迟绑定</h3><h3 id="动态链接相关结构"><a href="#动态链接相关结构" class="headerlink" title="动态链接相关结构"></a>动态链接相关结构</h3><h3 id="动态链接的步骤和实现"><a href="#动态链接的步骤和实现" class="headerlink" title="动态链接的步骤和实现"></a>动态链接的步骤和实现</h3><h3 id="显示运行时链接"><a href="#显示运行时链接" class="headerlink" title="显示运行时链接"></a>显示运行时链接</h3><h2 id="Linux-共享库的组织"><a href="#Linux-共享库的组织" class="headerlink" title="Linux 共享库的组织"></a>Linux 共享库的组织</h2><h3 id="共享库版本"><a href="#共享库版本" class="headerlink" title="共享库版本"></a>共享库版本</h3><h3 id="符号版本"><a href="#符号版本" class="headerlink" title="符号版本"></a>符号版本</h3><h3 id="共享库系统路径"><a href="#共享库系统路径" class="headerlink" title="共享库系统路径"></a>共享库系统路径</h3><h3 id="共享库查找过程"><a href="#共享库查找过程" class="headerlink" title="共享库查找过程"></a>共享库查找过程</h3><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><h3 id="共享库的创建和安装"><a href="#共享库的创建和安装" class="headerlink" title="共享库的创建和安装"></a>共享库的创建和安装</h3><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><h3 id="程序的内存分布"><a href="#程序的内存分布" class="headerlink" title="程序的内存分布"></a>程序的内存分布</h3><h3 id="栈与调用惯例"><a href="#栈与调用惯例" class="headerlink" title="栈与调用惯例"></a>栈与调用惯例</h3><h3 id="堆与内存管理"><a href="#堆与内存管理" class="headerlink" title="堆与内存管理"></a>堆与内存管理</h3><h2 id="运行库"><a href="#运行库" class="headerlink" title="运行库"></a>运行库</h2><h3 id="入口函数与程序初始化"><a href="#入口函数与程序初始化" class="headerlink" title="入口函数与程序初始化"></a>入口函数与程序初始化</h3><h3 id="C-C-运行库"><a href="#C-C-运行库" class="headerlink" title="C/C++运行库"></a>C/C++运行库</h3><h3 id="运行库与多线程"><a href="#运行库与多线程" class="headerlink" title="运行库与多线程"></a>运行库与多线程</h3><h3 id="C-全局构造与析构"><a href="#C-全局构造与析构" class="headerlink" title="C++全局构造与析构"></a>C++全局构造与析构</h3><h3 id="fread-实现"><a href="#fread-实现" class="headerlink" title="fread 实现"></a>fread 实现</h3><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> so </category>
          
      </categories>
      
      
        <tags>
            
            <tag> so </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js_迭代器与生成器</title>
      <link href="js_iterator/"/>
      <url>js_iterator/</url>
      
        <content type="html"><![CDATA[<h2 id="理解迭代"><a href="#理解迭代" class="headerlink" title="理解迭代"></a>理解迭代</h2><p>在 Javascript 中, 计数循环就是一种最简单的迭代:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环是迭代机制的基础, 这是因为它可以指定迭代的次数, 以及每次迭代要执行什么操作, 每次循环都会在上一次迭代开始之前完成, 而每次迭代的顺序都是事先定义好的;</p><p>迭代会在一个有序集合上进行; 数组是有序集合的最典型例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> collection = [<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>,<span class="string">&#x27;baz&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; collection.length; index++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(collection[index]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这种递增索引的方式存在通用性不强的问题, 因为:</p><ol><li> 迭代之前需要事先知道如何使用数据结构, 数组中的每一项都需要先通过取得数组对象再通过[]操作获取对应索引上的值;</li><li> 遍历顺序并不是数据结构固有的; 通过索引向上递增来获取数据并不适用于其他具有隐式顺序的数据结构</li></ol><p>ES5 中新增了 Array.prototype.forEach() 方法, 向通用迭代器进了一步:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> collection = [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>];</span><br><span class="line">collection.forEach( <span class="function">(<span class="params">item</span>) =&gt;</span> <span class="built_in">console</span>.log(item));</span><br></pre></td></tr></table></figure><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><p>任何实现了 Iterable 接口的数据结构都可以被实现Iterator 接口的结构消费; 迭代器是按需创建的一次性对象, 每个迭代器都会关联一个可迭代对象, 而迭代器会暴露迭代其关联可迭代对象的 API; </p><h3 id="可迭代协议"><a href="#可迭代协议" class="headerlink" title="可迭代协议"></a>可迭代协议</h3><p>实现 Iterable 接口需要同时具备两种能力: 支持迭代的自我识别能力和创建实现 Iterator 接口的对象的能力; 也就是需要暴露一个属性作为默认迭代器, 且这个属性必须使用 Symbol.iterator 作为键; </p><ul><li>  string</li><li>  Array</li><li>  Map</li><li>  Set</li><li>  arguments 对象</li><li>  NodeList 等 DOM 集合类型</li></ul><p>上述这些都实现了 Iterable 接口; 可以通过检查是否存在默认迭代器属性来判断是否实现了 iterable 接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这两种都没有实现迭代器工厂函数</span></span><br><span class="line"><span class="built_in">console</span>.log(num[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(obj[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面这些类型都实现了迭代器工程函数</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="string">&quot;a&quot;</span>,<span class="number">1</span>).set(<span class="string">&quot;b&quot;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>().add(<span class="string">&#x27;a&#x27;</span>).add(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> els = ducument.querySelectorAll(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// f values() &#123;[native code]&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// f values() &#123;[native code]&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(map[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// f values() &#123;[native code]&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(set[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// f values() &#123;[native code]&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(els[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// f values() &#123;[native code]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用这个方法会生成一个迭代器</span></span><br><span class="line"><span class="built_in">console</span>.log(str[<span class="built_in">Symbol</span>.iterator]()); <span class="comment">// StringIterator &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="built_in">Symbol</span>.iterator]()); <span class="comment">// ArrayIterator &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(map[<span class="built_in">Symbol</span>.iterator]()); <span class="comment">// MapIterator &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(set[<span class="built_in">Symbol</span>.iterator]()); <span class="comment">// SetIterator &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(ele[<span class="built_in">Symbol</span>.iterator]()); <span class="comment">// ArrayIterator &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>实际写代码时, 不需要显示调用这个工厂函数来生成迭代器, 实现可迭代协议的所有类型都会自动兼容接收可迭代对象的任何语言特性; 接收可迭代对象的语言特性包括:</p><ul><li>  for of 循环</li><li>  数组解构</li><li>  扩展操作符</li><li>  Array.from()</li><li>  创建集合</li><li>  创建映射</li><li>  Promise.all() 接收由期约组成的可迭代对象</li><li>  Promise.race() 接收由期约组成的可迭代对象</li><li>  yield* 操作符, 在生成器中使用</li></ul><p>这些原生语言解构会在后台调用提供的可迭代对象的这个工厂函数, 从而创建一个迭代器;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>,<span class="string">&#x27;baz&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// for of 循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> el <span class="keyword">of</span> arr)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(el);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组解构</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = arr;</span><br><span class="line"><span class="built_in">console</span>.log(a, b, c);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展操作符</span></span><br><span class="line"><span class="keyword">let</span> arr2 = [...arr];</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.form()</span></span><br><span class="line"><span class="keyword">let</span> arr3 = <span class="built_in">Array</span>.from(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arr3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set 构造函数</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</span><br><span class="line"><span class="built_in">console</span>.log(set);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map 构造函数</span></span><br><span class="line"><span class="keyword">let</span> pairs = arr.map(<span class="function">(<span class="params">x, i </span>) =&gt;</span> [x, i]);</span><br><span class="line"><span class="built_in">console</span>.log(pairs);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果对象原型链上的父类实现了 Iterator 接口, 那么这个对象也就实现了这个接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooArray</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> fooArr = <span class="keyword">new</span> FooArray(<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>,<span class="string">&#x27;baz&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> el <span class="keyword">of</span> fooArr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(el);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迭代器协议"><a href="#迭代器协议" class="headerlink" title="迭代器协议"></a>迭代器协议</h3><p>迭代器是一种一次性使用的对象, 用于迭代与其关联的可迭代对象; 迭代器 API 使用 next()方法在可迭代对象中遍历数据; 每次成功调用 next(), 都会返回一个 IteratorResult 对象, 其中包含迭代器返回的下一个值, 如果不调用 next(), 则无法知道迭代器的当前位置;</p><p>next()方法返回的迭代器对象 IteratorResult 包含两个属性, done 和 value; done 是一个布尔值, 表示是否还可以再次调用 next()取得下一个值; value 包含可迭代对象的下一个值; </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可迭代对象</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代器工厂函数</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// f values() &#123; [native code]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代器</span></span><br><span class="line"><span class="keyword">let</span> iter = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(iter); <span class="comment">// ArrayIterator&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行迭代</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// &#123;done: false, value: &#x27;foo&#x27;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// &#123;done: false, value: &#x27;bar&#x27;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// &#123;done: true, value: undefined&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 后续再调用返回的也都是 &#123;done: true, value: undefined&#125;</span></span><br></pre></td></tr></table></figure><h3 id="自定义迭代器"><a href="#自定义迭代器" class="headerlink" title="自定义迭代器"></a>自定义迭代器</h3><p>与 Iterable 接口类型, 任何实现 Iterator 接口的对象都可以作为迭代器使用;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">limit</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.limit = limit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]()&#123;</span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> limit = <span class="built_in">this</span>.limit;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="function"><span class="title">next</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (count &lt;= limit) &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">done</span> : <span class="literal">false</span>, <span class="attr">value</span>: count++&#125;;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                  <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">true</span>, <span class="attr">value</span>: <span class="literal">undefined</span>&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> counter = <span class="keyword">new</span> Counter(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> counter) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;i&quot;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="提前终止迭代器"><a href="#提前终止迭代器" class="headerlink" title="提前终止迭代器"></a>提前终止迭代器</h3><p>可选的 return() 方法用来指定在迭代器提前关闭时执行的逻辑;</p><p>执行迭代的结构在想让迭代器知道它不想遍历到可迭代对象耗尽时, 就可以关闭迭代器; 可能的情况包括: for-of 循环通过 break, continue, return 或者 throw 提前退出了; 解构操作并未消费所有值;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">limit</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.limit = limit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]()&#123;</span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> limit = <span class="built_in">this</span>.limit;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="function"><span class="title">next</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (count &lt;= limit) &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: count++&#125;;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">return</span>()&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;Exiting early&#x27;</span>);</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> count = <span class="keyword">new</span> Counter(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> countElement <span class="keyword">of</span> count) &#123;</span><br><span class="line">    <span class="keyword">if</span> (countElement &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;countElement&quot;</span>, countElement);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果迭代器没有关闭, 则还可以继续从上次离开的地方继续迭代; 比如, 数组的迭代器就是不能关闭的;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> iter = a[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> iter) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;iterator break&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> iter) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    1</span></span><br><span class="line"><span class="comment">    2</span></span><br><span class="line"><span class="comment">    3</span></span><br><span class="line"><span class="comment">    iterator break</span></span><br><span class="line"><span class="comment">    4</span></span><br><span class="line"><span class="comment">    5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js_集合引用类型</title>
      <link href="js_objectreference/"/>
      <url>js_objectreference/</url>
      
        <content type="html"><![CDATA[<h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><h3 id="创建-Object"><a href="#创建-Object" class="headerlink" title="创建 Object"></a>创建 Object</h3><ol><li><p>使用 new 操作符和 Object 构造函数创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.name = <span class="string">&quot;kevin&quot;</span>;</span><br><span class="line">person.age = <span class="number">29</span>;</span><br></pre></td></tr></table></figure></li><li><p>使用对象字面量创建; </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name: <span class="string">&quot;kevin&quot;</span>,</span><br><span class="line">    age: <span class="number">29</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="访问-Object-的属性和方法"><a href="#访问-Object-的属性和方法" class="headerlink" title="访问 Object 的属性和方法"></a>访问 Object 的属性和方法</h3><p>在对象字面量表示法中, 属性名可以是字符串或者数值: 数值类型会自动转成字符串;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;kevin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">29</span>,</span><br><span class="line">    <span class="number">5</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name, person[<span class="string">&#x27;name&#x27;</span>]); <span class="comment">// kevin kevin</span></span><br><span class="line"><span class="built_in">console</span>.log(person.age, person[<span class="string">&#x27;age&#x27;</span>]); <span class="comment">// 29 29</span></span><br><span class="line"><span class="built_in">console</span>.log(person[<span class="string">&quot;5&quot;</span>]); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>属性可以通过点语法来存取, 这是面向对象语言的惯例, 但是可以通过中括号来存取属性, 在使用中括号的时候, 要在括号内使用属性名的字符串形式: 使用中括号的方式有一个优势, 就是可以通过变量来访问属性:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> propertyName = <span class="string">&quot;name&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person[propertyName]); <span class="comment">// kevin</span></span><br></pre></td></tr></table></figure><p>如果属性名中包含可能导致语法错误的字符, 或者包含了关键字/保留字,那么可以使用中括号来取属性:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person[<span class="string">&#x27;first name&#x27;</span>] = <span class="string">&quot;kevin&quot;</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>es 中的 Array 是一组有序的数据, 数组中的每个槽位可以存储任意数据类型, 数组的大小也是动态的, 可以根据数据长度而自动增长;</p><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><ol><li><p>使用 new 操作符和 Array 构造函数创建数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还可以指定要创建数组的长度</span></span><br><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建数组时传入要保存的元素</span></span><br><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// new 操作符可以省略</span></span><br><span class="line"><span class="keyword">let</span> colors = <span class="built_in">Array</span>(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">let</span> colors = <span class="built_in">Array</span>(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>使用数组字面量表示法, 数组字面量是在中括号中包含逗号分隔的方式进行创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> names = [];</span><br><span class="line"><span class="keyword">let</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure></li><li><p>es6 中提供了 Array.from() 将任何可迭代对象, 或者含有 length 属性且可索引的元素结构转成数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(<span class="string">&quot;Matt&quot;</span>)); <span class="comment">// [&quot;M&quot;,&quot;a&quot;,&quot;t&quot;,&quot;t&quot;]</span></span><br></pre></td></tr></table></figure><ul><li><p>Array.from()可以接受第二个可选映射函数参数, 这个函数可以直接增强新数组的值</p></li><li><p>Array.from()可以接受第三个可选参数, 用于指定映射函数中 this 的值; 但是这个重写的 this 值在箭头函数中不适用;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> a2 = <span class="built_in">Array</span>.from(a1, <span class="function"><span class="params">x</span>=&gt;</span>x**<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> a3 = <span class="built_in">Array</span>.from(a1, <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;<span class="keyword">return</span> x**<span class="built_in">this</span>.exponent&#125;, &#123;<span class="attr">exponent</span>: <span class="number">2</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a2); <span class="comment">// [1, 4, 9, 16]</span></span><br><span class="line"><span class="built_in">console</span>.log(a3); <span class="comment">// [1, 4, 9, 16]</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>es6 中提供了 Array.of() 可以把一组参数转换成数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)); <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.of(<span class="literal">undefined</span>)); <span class="comment">// [undefined]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="数组空位"><a href="#数组空位" class="headerlink" title="数组空位"></a>数组空位</h3><p>在使用数组字面量初始化数组的时候, 可以使用一串逗号来创建空位, js 会将逗号之间的相应索引位置的值当做空值;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> options = [,,,,,,]; <span class="comment">// 创建了一个长度为 6 的空数组</span></span><br><span class="line"><span class="built_in">console</span>.log(options.length);</span><br><span class="line"><span class="built_in">console</span>.log(options); </span><br></pre></td></tr></table></figure><p>在 es6 中, 会将这些空位当成存在的元素, 只不过默认的值为 undefined;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> options = [<span class="number">1</span>,,,,<span class="number">5</span>]; </span><br><span class="line"><span class="keyword">for</span> (cosnt option <span class="keyword">of</span> options) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(option === <span class="literal">undefined</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="数组索引"><a href="#数组索引" class="headerlink" title="数组索引"></a>数组索引</h3><p>要取得或者设置数组的值, 需要使用中括号并提供相应值得数字索引;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(colors[<span class="number">1</span>]); <span class="comment">// blue</span></span><br><span class="line">colors[<span class="number">0</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">colors[<span class="number">2</span>] = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// [&#x27;hello&#x27;, &quot;blue&quot;, &#x27;world&#x27;]</span></span><br></pre></td></tr></table></figure><p>如果把一个值设置成超过数组最大索引的索引 , 则数组长度会自动扩展到该索引+1; 通过设置数组的 length 大小, 可以实现删除数组末尾元素或者从末尾添加元素的操作;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>,<span class="string">&quot;blue&quot;</span>,<span class="string">&quot;green&quot;</span>];</span><br><span class="line">colors[<span class="number">3</span>] = <span class="string">&quot;black&quot;</span>;</span><br><span class="line">cosnole.log(colors);</span><br><span class="line">colors[<span class="number">10</span>] = <span class="string">&quot;end&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(colors);</span><br><span class="line">colors.length = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(colors);</span><br><span class="line">colors.length = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(colors);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// [ &#x27;red&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;, &#x27;black&#x27; ]</span></span><br><span class="line"><span class="comment">// [ &#x27;red&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;, &#x27;black&#x27;, &lt;6 empty items&gt;, &#x27;end&#x27; ]</span></span><br><span class="line"><span class="comment">// [ &#x27;red&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;, &#x27;black&#x27;, &lt;6 empty items&gt; ]</span></span><br><span class="line"><span class="comment">// [ &#x27;red&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;, &#x27;black&#x27;, &lt;96 empty items&gt; ]</span></span><br></pre></td></tr></table></figure><h3 id="检测数组"><a href="#检测数组" class="headerlink" title="检测数组"></a>检测数组</h3><p>判断是否是数组, 推荐使用 Array.isArray()方法, 这个方法的目的就是确定一个值是否是数组, 而不需要管它是在哪个全局执行上下文中创建的;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">    <span class="comment">// 操作数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迭代器方法"><a href="#迭代器方法" class="headerlink" title="迭代器方法"></a>迭代器方法</h3><p>Array 的原型上暴露了 3 个用于检索数组内容的方法: keys(), values(), entries();</p><ul><li>keys() : 返回数组索引的迭代器</li><li>values(): 返回数组元素的迭代器</li><li>entries(): 返回索引/值对的迭代器</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;baz&quot;</span>, <span class="string">&quot;qux&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这些方法返回的都是迭代器, 可以将它们的内容通过 Array.from()直接转换成数组实例</span></span><br><span class="line"><span class="keyword">const</span> aKeys = <span class="built_in">Array</span>.form(a.keys());</span><br><span class="line"><span class="keyword">const</span> aValues = <span class="built_in">Array</span>.from(a.values());</span><br><span class="line"><span class="keyword">const</span> aEntries = <span class="built_in">Array</span>.from(a.entries());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(aKeys); <span class="comment">// [0, 1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(aValues); <span class="comment">// [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;, &quot;qux&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(aEntries); <span class="comment">// [[0, &quot;foo&quot;], [1, &quot;bar&quot;], [2, &quot;baz&quot;], [3, &quot;qux&quot;]]</span></span><br></pre></td></tr></table></figure><p>使用 es6 的解构可以非常容易在循环中拆分键值对:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;baz&quot;</span>, <span class="string">&quot;qux&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [idx, element] <span class="keyword">of</span> a.entries) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(idx);</span><br><span class="line">    <span class="built_in">console</span>.log(element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0 </span></span><br><span class="line"><span class="comment">// foo </span></span><br><span class="line"><span class="comment">// 1 </span></span><br><span class="line"><span class="comment">// bar </span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// baz</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// qux</span></span><br></pre></td></tr></table></figure><h3 id="复制和填充方法"><a href="#复制和填充方法" class="headerlink" title="复制和填充方法"></a>复制和填充方法</h3><p>es6 中新增了两个方法, 批量复制方法 copyWithin() 以及填充数组的方法 fill(); </p><h4 id="fill"><a href="#fill" class="headerlink" title="fill()"></a>fill()</h4><p>该方法可以想一个已有元素的数组插入全部或者部分相同的值, 第一个参数是要填充的值;  第二个参数是开始索引, 可以不传入,用于指定开始填充的位置; 第三个参数是结束填充的索引值, 可以不传入;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> zeroes = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>];</span><br><span class="line">zeroes.fill(<span class="number">5</span>); </span><br><span class="line"><span class="built_in">console</span>.log(zeroes); <span class="comment">// [5,5,5,5,5]</span></span><br><span class="line">zeroes.fill(<span class="number">0</span>); <span class="comment">// 重置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从指定位置开始填充</span></span><br><span class="line">zeroes.fill(<span class="number">6</span>,<span class="number">3</span>);</span><br><span class="line">cosnole.log(zeroes); <span class="comment">// [0,0,0,6,6]</span></span><br><span class="line">zeroes.fill(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从指定位置开始到指定位置结束</span></span><br><span class="line">zeroes.fill(<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zeroes); <span class="comment">// [0,7,7,0,0]</span></span><br><span class="line">zeroes.fill(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用负数作为索引</span></span><br><span class="line">zeroes.fill(<span class="number">8</span>, -<span class="number">4</span>,-<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zeroes); <span class="comment">// [0,8,8,8,0]</span></span><br><span class="line">zeroes.fill(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静默忽略超出数组边界, 零长度, 以及方向相反的索引范围</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 索引过低, 忽略</span></span><br><span class="line">zeroes.fill(<span class="number">1</span>, -<span class="number">10</span>, -<span class="number">6</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zeroes); <span class="comment">//[0,0,0,0,0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 索引过高, 忽略</span></span><br><span class="line">zeroes.fill(<span class="number">1</span>, <span class="number">10</span>, <span class="number">15</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zeroes); <span class="comment">//[0,0,0,0,0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 索引反向 忽略</span></span><br><span class="line">zeroes.fill(<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zeroes); <span class="comment">//[0,0,0,0,0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 索引部分不可用, 填充可用部分</span></span><br><span class="line">zeroes.fill(<span class="number">4</span>, <span class="number">3</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zeroes); <span class="comment">// [0,0,0,4,4]</span></span><br></pre></td></tr></table></figure><h4 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin()"></a>copyWithin()</h4><p>该方法会按照指定范围浅复制数组中的部分内容, 然后将它们插入到指定索引开始的位置; 开始索引和结束索引与 fill()的规则相同;</p><p>第一个参数是要插入的位置</p><p>第二个参数是开始复制的索引位置</p><p>第三个参数是复制结束的索引位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ints = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line">ints.copyWithin(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ints); <span class="comment">// [0,1,2,3,4,0,1,2,3,4]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ints = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line">ints.copyWithin(<span class="number">0</span>, <span class="number">5</span>); <span class="comment">// 从索引 5 的位置开始复制内容, 然后插入到索引 0 的位置</span></span><br><span class="line"><span class="built_in">console</span>.log(ints); <span class="comment">// [5,6,7,8,9,5,6,7,8,9]</span></span><br><span class="line"></span><br><span class="line">ints = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line">ints.copyWithin(<span class="number">4</span>,<span class="number">0</span>,<span class="number">3</span>); <span class="comment">// 从ints 中复制索引 0 到索引 3 的内容, 出入到索引 4 的位置</span></span><br><span class="line"><span class="built_in">console</span>.log(ints); <span class="comment">// [0,1,2,3,0,1,2,7,8,9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 静默忽略超出数组边界, 0 长度, 以及方向相反的索引范围</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 索引部分可用, 复制填充可用部分</span></span><br></pre></td></tr></table></figure><h3 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h3><p>所有对象都有 toLocaleSting(), toString(), valueOf()方法; Array 对象中, valueOf()返回数组本身, toString() 返回由数组中每个值等效字符串拼接而成的一个逗号分隔的字符串;  toLocaleString()返回值可能和 toString()方法和 valueOf()方法相同;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>]; </span><br><span class="line"><span class="built_in">console</span>.log(colors.toString()); <span class="comment">// red,blue,green</span></span><br><span class="line"><span class="built_in">console</span>.log(colors.valueOf());</span><br></pre></td></tr></table></figure><h3 id="栈方法"><a href="#栈方法" class="headerlink" title="栈方法"></a>栈方法</h3><h4 id="push-pop"><a href="#push-pop" class="headerlink" title="push(),pop()"></a>push(),pop()</h4><p>栈是一种后进先出的结构, 数据项的插入为 push() 方法, 数据项删除为 pop()方法; es 给数组添加了和栈类似的操作;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">let</span> count = colors.push(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(count); <span class="comment">// 返回的是数组的新长度 2</span></span><br><span class="line"></span><br><span class="line">count = colors.push(<span class="string">&quot;black&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(count); <span class="comment">// 返回数组新长度 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> item = colors.pop();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;item&quot;</span>, item); <span class="comment">// item black</span></span><br></pre></td></tr></table></figure><h3 id="队列方法"><a href="#队列方法" class="headerlink" title="队列方法"></a>队列方法</h3><h4 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h4><p>队列是一个先进先出的结构, 队列在末尾添加元素, 但是从头部取出数据; es 提供了数组类似队列的方法, 从头部弹出数据 shift()方法; 使用 push() 和 shift()可以将数组当做队列使用;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">let</span> count = colors.push(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;count&quot;</span>, count);</span><br><span class="line"></span><br><span class="line">count = colors.push(<span class="string">&quot;black&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;count&quot;</span>, count);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> item = colors.shift();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;item&quot;</span>, item);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;colors.length&quot;</span>, colors.length);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//count 2</span></span><br><span class="line"><span class="comment">//count 3</span></span><br><span class="line"><span class="comment">//item red</span></span><br><span class="line"><span class="comment">//colors.length 2</span></span><br></pre></td></tr></table></figure><h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h4><p>unshift()方法就是 shift()的反向操作, 在数组开头添加任意多个值, 然后返回数组的新长度;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">let</span> count = colors.unshift(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;count&quot;</span>, count);</span><br><span class="line"></span><br><span class="line">count = colors.unshift(<span class="string">&quot;black&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;count&quot;</span>, count);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> item = colors.pop();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;item&quot;</span>, item);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;colors.length&quot;</span>, colors.length);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">count 2</span></span><br><span class="line"><span class="comment">count 3</span></span><br><span class="line"><span class="comment">item green</span></span><br><span class="line"><span class="comment">colors.length 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="排序方法"><a href="#排序方法" class="headerlink" title="排序方法"></a>排序方法</h3><h4 id="reverse-sort"><a href="#reverse-sort" class="headerlink" title="reverse(), sort()"></a>reverse(), sort()</h4><p>reverse()方法就是将数组元素反向排序, sort()是将数组进行正向排序;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">values.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;values&quot;</span>, values);</span><br><span class="line"></span><br><span class="line">values.sort();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;values&quot;</span>, values);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">values [ 5, 4, 3, 2, 1 ]</span></span><br><span class="line"><span class="comment">values [ 1, 2, 3, 4, 5 ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>sort()方法会将所有的元素按照升序进行排列, 但是在每一项元素上都会自动调用 toString() 转型函数, 即使数组的元素都是数值, 也会先把数值转成字符串再进行比较和排序;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> values = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line"></span><br><span class="line">values.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;values&quot;</span>, values);</span><br><span class="line"></span><br><span class="line">values.sort();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;values&quot;</span>, values);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// values [ 15, 10, 5, 1, 0 ]</span></span><br><span class="line"><span class="comment">// values [ 0, 1, 10, 15, 5 ]</span></span><br></pre></td></tr></table></figure><p>为了解决这种数值按照字符串进行排序的问题, 提供了 sort() 方法可以接受一个自定义的比较方法进行排序; 这个比较函数默认有两个参数, 如果第一个参数应该排在第二个参数之前, 则返回负值, 如果两个参数相等, 则返回 0, 如果第一个参数应该排在第二个参数之后, 则返回正值;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">value1, value2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value1 &lt; value2) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value1 == value2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> values = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line">values.sort(compare);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;values&quot;</span>, values);</span><br><span class="line"></span><br><span class="line"><span class="comment">// values [ 0, 1, 5, 10, 15 ]</span></span><br></pre></td></tr></table></figure><h3 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h3><h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p>可以使用指定多个元素,或者多个数组去扩充另一个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> colors2 = colors.concat(<span class="string">&quot;black&quot;</span>, [<span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;brown&quot;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;colors2&quot;</span>, colors2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// colors2 [ &#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;black&#x27;, &#x27;yellow&#x27;, &#x27;brown&#x27; ]</span></span><br></pre></td></tr></table></figure><p>强制打平参数组的行为可以重写, 方法就是在参数数组上指定一个特殊的符号: Symbol.isConcatSpreadable. 这个符号可以阻止 concat()打平参数组, 如果设置为 true, 则强制打平参数组, 如果为 false, 则强制不打平参数组;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> newColors = [<span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;brown&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> moreColors = &#123;</span><br><span class="line">    [<span class="built_in">Symbol</span>.isConcatSpreadable]: <span class="literal">true</span>,</span><br><span class="line">    length: <span class="number">2</span>,</span><br><span class="line">    <span class="number">0</span>: <span class="string">&quot;pink&quot;</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="string">&#x27;cyan&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制不打平参数组</span></span><br><span class="line">newColors[<span class="built_in">Symbol</span>.isConcatSpreadable] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> color2 = colors.concat(<span class="string">&quot;yellow&quot;</span>,newColors);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;color2&quot;</span>, color2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制打平参数组</span></span><br><span class="line">moreColors[<span class="built_in">Symbol</span>.isConcatSpreadable] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> color3 = colors.concat(<span class="string">&quot;yellow&quot;</span>, moreColors);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;color3&quot;</span>, color3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* color2 [</span></span><br><span class="line"><span class="comment">  &#x27;red&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;green&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;blue&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;yellow&#x27;,</span></span><br><span class="line"><span class="comment">  [ &#x27;black&#x27;, &#x27;brown&#x27;]</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">color3 [ &#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;pink&#x27;, &#x27;cyan&#x27; ]</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><h4 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h4><p>数组的分片操作, 可以接受两个参数, 用于将一个数组中指定位置开始到指定位置结束的所有元素取出组成一个新的数组; 第一个参数是起始索引, 第二个参数是结束索引, 如果不传递结束索引, 则默认从起始索引到尾部;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;purple&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> color2 = colors.slice(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> color3 = colors.slice(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;color2&quot;</span>, color2);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;color3&quot;</span>, color3);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* color2 [ &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;purple&#x27; ]</span></span><br><span class="line"><span class="comment">  color3 [ &#x27;blue&#x27;, &#x27;yellow&#x27; ]</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><h4 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h4><ul><li><p>删除, 需要给 slice()传入 2 个参数, 要删除的第一个元素的位置和要删除的元素数量; 可以从数组中删除任意多个元素;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;purple&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> color2 = colors.splice(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;color2&quot;</span>, color2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// color2 [ &#x27;red&#x27;, &#x27;green&#x27; ]</span></span><br></pre></td></tr></table></figure></li><li><p>插入: 需要给 splice()传入三个参数, 开始位置, 0(要删除的元素数量), 和要插入的元素; 可以在指定位置插入元素, 还可以在第三个参数中传入多个要插入元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;purple&quot;</span>];</span><br><span class="line">colors.splice(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;black&quot;</span>, <span class="string">&quot;black&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;colors&quot;</span>, colors);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* colors [</span></span><br><span class="line"><span class="comment">  &#x27;black&#x27;,  &#x27;black&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;red&#x27;,    &#x27;green&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;blue&#x27;,   &#x27;yellow&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;purple&#x27;</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure></li><li><p>替换: 在删除的同时可以在指定位置插入新元素, 完成等价的替换操作; 同样需要传入 3 个元素; 开始位置, 要删除元素, 和要插入的任意多个元素; 要插入的元素数量不一定和删除的元素数量一致, 比如: <code>splice(2,1&quot;red&quot;,&quot;green&quot;);</code>会在位置 2 删除一个元素, 然后从该位置开始向数组插入”red” 和 “green”;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> removed = colors.splice(<span class="number">0</span>, <span class="number">1</span>); <span class="comment">// 从0位置开始, 删除一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;removed&quot;</span>, removed); <span class="comment">// 删除的元素 red</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;colors&quot;</span>, colors); <span class="comment">// 剩余的元素 green blue</span></span><br><span class="line"></span><br><span class="line">removed.splice(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>); <span class="comment">// 从 0 位置开始 不删除元素 添加 yellow 和 orange</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;removed&quot;</span>, removed);</span><br><span class="line"></span><br><span class="line">colors.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;purple&#x27;</span>); <span class="comment">// 从索引 1 位置删除一个元素, 并添加两个元素 red yellow</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;colors&quot;</span>, colors);</span><br></pre></td></tr></table></figure><p>  /*<br>  removed [ ‘red’ ]<br>  colors [ ‘green’, ‘blue’ ]<br>  removed [ ‘yellow’, ‘orange’, ‘red’ ]<br>  colors [ ‘green’, ‘red’, ‘purple’ ]<br>  */</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 搜索和位置方法</span><br><span class="line"></span><br><span class="line">#### indexOf(), lastIndexOf(), includes()</span><br><span class="line"></span><br><span class="line">es 提供了 3 个严格相等的搜索方法, indexOf() 和 lastIndexOf() 在所有版本中都可以使用; includes() 是在 es7 中新增的; 这些方法都支持两个参数, 要查找的元素和一个可选的起始搜索位置索引; indexOf() 和 includes() 都是从数组的前面开始向后搜索, lastIndexOf()是从数组的末尾向前搜索;</span><br><span class="line"></span><br><span class="line">indexOf()和 lastIndexOf()都是返回要搜索的元素在数组中的索引值, 如果没找到则返回-1; includes 返回布尔值, 如果要搜索的元素在目标中则返回 true, 不在则返回 false; </span><br><span class="line"></span><br><span class="line">使用这三个方法进行判断的时候, 比较第一个参数和数组中的每个项时都是使用 &#x3D;&#x3D;&#x3D; 进行比较的;</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;js</span><br><span class="line">let numbers &#x3D; [1, 2, 3, 4, 5, 4, 3, 2, 1];</span><br><span class="line"></span><br><span class="line">console.log(&quot;numbers.indexOf(4)&quot;, numbers.indexOf(4));</span><br><span class="line">console.log(&quot;numbers.lastIndexOf(4)&quot;, numbers.lastIndexOf(4));</span><br><span class="line">console.log(&quot;numbers.includes(4)&quot;, numbers.includes(4));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(&quot;numbers.indexOf(4,4)&quot;, numbers.indexOf(4, 4));</span><br><span class="line">console.log(&quot;numbers.lastIndexOf(4,4)&quot;, numbers.lastIndexOf(4, 4));</span><br><span class="line">console.log(&quot;numbers.includes(4,4)&quot;, numbers.includes(4, 4));</span><br><span class="line"></span><br><span class="line">let person &#x3D; &#123;name: &quot;kevin&quot;&#125;;</span><br><span class="line">let people &#x3D; [&#123;name: &quot;kevin&quot;&#125;];</span><br><span class="line">let morePeople &#x3D; [person];</span><br><span class="line"></span><br><span class="line">console.log(&quot;people.indexOf(person)&quot;, people.indexOf(person));</span><br><span class="line">console.log(&quot;morePeople.indexOf(person)&quot;, morePeople.indexOf(person));</span><br><span class="line">console.log(&quot;people.includes(person)&quot;, people.includes(person));</span><br><span class="line">console.log(&quot;morePeople.includes(person)&quot;, morePeople.includes(person));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">* numbers.indexOf(4) 3</span><br><span class="line">numbers.lastIndexOf(4) 5</span><br><span class="line">numbers.includes(4) true</span><br><span class="line">numbers.indexOf(4,4) 5</span><br><span class="line">numbers.lastIndexOf(4,4) 3</span><br><span class="line">numbers.includes(4,4) true</span><br><span class="line">people.indexOf(person) -1</span><br><span class="line">morePeople.indexOf(person) 0</span><br><span class="line">people.includes(person) false</span><br><span class="line">morePeople.includes(person) true</span><br><span class="line">* *&#x2F;</span><br></pre></td></tr></table></figure></li></ul><h4 id="find-findIndex"><a href="#find-findIndex" class="headerlink" title="find(), findIndex()"></a>find(), findIndex()</h4><h3 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h3><hr><h2 id="定型数组"><a href="#定型数组" class="headerlink" title="定型数组"></a>定型数组</h2><h3 id="ArrayBuffer"><a href="#ArrayBuffer" class="headerlink" title="ArrayBuffer"></a>ArrayBuffer</h3><p>ArrayBuffer() 是一个 js 的构造函数, 可用于在内存中分配特定数量的字节空间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buff = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">16</span>); <span class="comment">// 在内存中分配 16 字节</span></span><br><span class="line"><span class="built_in">console</span>.log(buff.length);</span><br></pre></td></tr></table></figure><p>ArrayBuffer 创建之后就不能再调整大小, 但是可以用 slice()复制其全部或者部分到一个新的实例中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buff1 = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">const</span> buff2 = buf1.slice(<span class="number">4</span>,<span class="number">12</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buff2.length); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><p>ArrayBuffer 在某种程度上类似 C++中的 malloc(); 但是也有明显的区别</p><ol><li>malloc() 在分配失败时会返回一个 null 指针; ArrayBuffer()在分配失败时会抛出错误;</li><li>malloc()可以利用虚拟内存, 因此最大可分配尺寸只受寻址系统内存限制; ArrayBuffer 分配的内存不能超过 Number.MAX_SAFE_INTEGER 字节;</li><li>malloc()调用成功不会初始化实际的地址, ArrayBuffer() 则会将所有二进制位初始化为 0;</li><li>malloc()分配的堆内存除非调用 free() 或者程序退出, 否则系统不能再使用; 而 ArrayBuffer 分配的堆内存可以被当成垃圾回收, 不用手动释放;</li></ol><h3 id="DataView"><a href="#DataView" class="headerlink" title="DataView"></a>DataView</h3><p>DataView 是一种用于读写 ArrayBuffer 的视图, 专门用于文件 IO 和网络 IO; 必须在对已有的 ArrayBuffer 读取或者写入的时候才能创建 DataView 实例; 这个实例可以使用全部或者部分 ArrayBuffer; 且维护对该缓冲实例的引用, 以及视图在缓冲中开始的位置;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// DataView 默认使用整个 ArrayBuffer</span></span><br><span class="line"><span class="keyword">const</span> fullDataView = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf);</span><br><span class="line"><span class="built_in">console</span>.log(fullDataView.byteOffset); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(fullDataView.byteLength); <span class="comment">// 16</span></span><br><span class="line"><span class="built_in">console</span>.log(fullDataView.buffer === buf); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数接受一个可选的字节偏移量和字节长度</span></span><br><span class="line"><span class="comment">// byteOffset = 0 ; 表示视图从缓冲起点开始</span></span><br><span class="line"><span class="comment">// byteLength = 8; 限制视图为前八个字节</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> firstHalfDataView = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf, <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line"><span class="built_in">console</span>.log(fisrtHalfDataView.byteOffset); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(firstHalfDataView.byteLength); <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">console</span>.log(firstHalfDataView.buffer === buf); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不指定 byteLength 则视图默认会使用剩余的缓冲</span></span><br><span class="line"><span class="comment">// byteOffset = 8; 表示视图从缓冲的第9个字节开始</span></span><br><span class="line"><span class="comment">// byteLength 未指定, 则默认为剩余缓冲</span></span><br><span class="line"><span class="keyword">const</span> secondHalfDataView = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf, <span class="number">8</span>);</span><br><span class="line"><span class="built_in">console</span>.log(secondHalfDataView.byteOffset); <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">console</span>.log(secondHalfDataView.byteLength); <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">console</span>.log(secondHalfDataView.buffer === buf); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="ElementType"><a href="#ElementType" class="headerlink" title="ElementType"></a>ElementType</h4><p>DataView 对于存储在缓冲内的数据类型没有预设, 所以它强制开发者在读写时指定一个 ElementType, 然后 DataView 会根据 ElementType 对数据进行读写和转换;</p><table><thead><tr><th>ElementType</th><th>字节</th><th>说明</th><th>C 类型</th><th>值得范围</th></tr></thead><tbody><tr><td>Int8</td><td>1</td><td>8 位有符号整数</td><td>signed char</td><td>-128~127</td></tr><tr><td>Uint8</td><td>1</td><td>8 位无符号整数</td><td>unsigned char</td><td>0~255</td></tr><tr><td>Int16</td><td>2</td><td>16 位有符号整数</td><td>short</td><td>-32 768~32 767</td></tr><tr><td>Unit16</td><td>2</td><td>16 位无符号整数</td><td>unsigend short</td><td>0~65 535</td></tr><tr><td>Int32</td><td>4</td><td>32 位有符号整数</td><td>int</td><td>-2 147 483 648~2 147 483 647</td></tr><tr><td>Uint32</td><td>4</td><td>32 位无符号整数</td><td>unsigned int</td><td>0~4 294 967 295</td></tr><tr><td>Float32</td><td>4</td><td>32 位 IEEE-754 浮点数</td><td>float</td><td>-3.4e+38~+3.4e+38</td></tr><tr><td>Float64</td><td>8</td><td>64 位 IEEE-754 浮点数</td><td>double</td><td>-1.7e+308~+1.7e+308</td></tr></tbody></table><p>DataView 暴露了各种类型的 get 和 set 方法, 并使用 byteOffset 字节偏移量来定位要读取和写入的位置; 类型可以相互转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> view = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取指定位置的字节数据</span></span><br><span class="line"><span class="built_in">console</span>.log(view.getInt8(<span class="number">0</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(view.getInt8(<span class="number">1</span>)); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查整个缓冲区</span></span><br><span class="line"><span class="built_in">console</span>.log(view.getInt16(<span class="number">0</span>)); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将整个缓冲区都设置为 1</span></span><br><span class="line">view.setUint8(<span class="number">0</span>, <span class="number">255</span>); <span class="comment">// 255的二进制表示为 1111 1111</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DataView 会自动将数据转换成特定的 ElementType</span></span><br><span class="line"><span class="comment">// 255的 16 进制为 0xFF</span></span><br><span class="line">view.setUint8(<span class="number">1</span>, <span class="number">0xFF</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在缓冲区内都是 1, 如果把它当成二补数的有符号整数, 则为-1</span></span><br><span class="line"><span class="built_in">console</span>.log(view.getInt16(<span class="number">0</span>)); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h4 id="字节序"><a href="#字节序" class="headerlink" title="字节序"></a>字节序</h4><p>字节序是指计算机的一种字节顺序的约定</p><ol><li>大端字节序: 最高有效位保存在第一个字节, 最低有效位保存在最后一个字节</li><li>小端字节序: 最低有效位保存在第一个字节, 最高有效位保存在最后一个字节</li></ol><p>DataView 在读取和写入数据的时候支持第二个参数, 默认是使用大端字节序, 如果第二个参数设置为 true, 则会按照小端字节序进行读取和写入;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> view = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充缓冲区, 让第一位和最后一位都是 1</span></span><br><span class="line">view.setUint8(<span class="number">0</span>, <span class="number">0x80</span>); <span class="comment">// 设置最左边的位等于 1</span></span><br><span class="line">view.setUint8(<span class="number">1</span>, <span class="number">0x01</span>); <span class="comment">// 设置最右边的位等于 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓冲内容 0x8 0x0 0x0 0x1</span></span><br><span class="line"><span class="comment">// 对应二进制为: 1000 0000 0000 0001</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按大端字节序读取 Uint16</span></span><br><span class="line"><span class="comment">// 0x80高字节 0x01低字节 0x8001</span></span><br><span class="line"><span class="comment">// 2^15 + 2^0 = 32769</span></span><br><span class="line"><span class="built_in">console</span>.log(view.getUint16(<span class="number">0</span>)); <span class="comment">// 32769</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照小端字节序读取 Uint16</span></span><br><span class="line"><span class="comment">// 0x01 是高字节 0x80 是低字节</span></span><br><span class="line"><span class="comment">// 0x0180 = 2^8 + 2^7 = 384</span></span><br><span class="line"><span class="built_in">console</span>.log(view.getUint16(<span class="number">0</span>)); <span class="comment">// 384</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按大端字节序写入 Uint16</span></span><br><span class="line">view.setUint16(<span class="number">0</span>, <span class="number">0x0004</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓冲内容 </span></span><br><span class="line"><span class="comment">// 0x0 0x0 0x0 0x4</span></span><br><span class="line"><span class="comment">// 0000 0000 0000 0100</span></span><br><span class="line"><span class="built_in">console</span>.log(view.getUint8(<span class="number">0</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(view.getUint8(<span class="number">1</span>)); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按小端写入</span></span><br><span class="line">view.setUint16(<span class="number">0</span>, <span class="number">0x0002</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓冲内容 </span></span><br><span class="line"><span class="comment">// 0x0 0x2 0x0 0x0</span></span><br><span class="line"><span class="built_in">console</span>.log(view.getUint8(<span class="number">0</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(view.getUint8(<span class="number">1</span>)); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h4 id="边界情形"><a href="#边界情形" class="headerlink" title="边界情形"></a>边界情形</h4><p>DataView 完成读写的前提是有充足的缓冲区, 如果没有就会抛出 RangeError 错误;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">const</span> view = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试读取部分超出缓冲范围的值</span></span><br><span class="line">view.getInt32(<span class="number">4</span>); <span class="comment">// RangeError</span></span><br><span class="line">view.getInt32(<span class="number">4</span>); <span class="comment">// RangeError</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置超出缓冲区范围的值</span></span><br><span class="line">view.setInt32(<span class="number">4</span>, <span class="number">123</span>); <span class="comment">// RangeError</span></span><br></pre></td></tr></table></figure><h3 id="定型数组-1"><a href="#定型数组-1" class="headerlink" title="定型数组"></a>定型数组</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>定型数组是另一种形式的 ArrayBuffer 视图, 区别在于定型数组特定于某一种 ElementType 且遵循系统原生的字节序;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 12 字节的缓冲</span></span><br><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个引用该缓冲的 Int32Array</span></span><br><span class="line"><span class="keyword">const</span> ints = <span class="keyword">new</span> <span class="built_in">Int32Array</span>(buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个特定的定型数组知道自己的每个元素需要 4 个字节</span></span><br><span class="line"><span class="comment">// 因此长度为 3</span></span><br><span class="line"><span class="built_in">console</span>.log(ints.length); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个长度为 6 的 Int32Array</span></span><br><span class="line"><span class="keyword">const</span> ints2 = <span class="keyword">new</span> <span class="built_in">Int32Array</span>(<span class="number">6</span>);</span><br><span class="line"><span class="comment">// 每个数值使用 4 个字节, 因此 ArrayBuffer 是 24 个字节</span></span><br><span class="line"><span class="built_in">console</span>.log(ints.length); <span class="comment">// 6个元素</span></span><br><span class="line"><span class="comment">// 类似 DataView, 定型数组也有一个执行关联缓冲的引用</span></span><br><span class="line"><span class="built_in">console</span>.log(ints2.buffer.byteLength); <span class="comment">// 24</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个包含[2,4,6,8]的 int32Array</span></span><br><span class="line"><span class="keyword">const</span> ints3 = <span class="keyword">new</span> <span class="built_in">Int32Array</span>([<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(ints3.length); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(ints3.buffer.byteLength); <span class="comment">// 16</span></span><br><span class="line"><span class="built_in">console</span>.log(ints3[<span class="number">2</span>]); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过复制 ints3 的值创建一个 Int16Array</span></span><br><span class="line"><span class="keyword">const</span> ints4 = <span class="keyword">new</span> Int64Array(ints3);</span><br><span class="line"><span class="built_in">console</span>.log(ints4.length); <span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 会根据新的 ElementType 的格式将原数据转成当前的格式</span></span><br><span class="line">cosnole.log(ints4.buffer.byteLength); <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">console</span>.log(ints4[<span class="number">2</span>]); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过普通数组来创建一个 Int16Array</span></span><br><span class="line"><span class="keyword">const</span> ints5 = <span class="built_in">Int16Array</span>.from([<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(ints5.length); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(ints5.buffer.byteLength); <span class="comment">//8</span></span><br><span class="line"><span class="built_in">console</span>.log(ints5[<span class="number">2</span>]); <span class="comment">// 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于传入参数创建一个 Float32Array</span></span><br><span class="line"><span class="keyword">const</span> floats = <span class="built_in">Float32Array</span>.of(<span class="number">3.14</span>, <span class="number">2.718</span>, <span class="number">1.618</span>);</span><br><span class="line"><span class="built_in">console</span>.log(floats.length); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(floats.buffer.byteLength); <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">console</span>.log(floats[<span class="number">2</span>]); <span class="comment">// 1.618</span></span><br></pre></td></tr></table></figure><p>定型数组的构造函数和实例都有一个 BYTES_PER_ELEMENT 属性, 返回该类型数组中每个元素的大小;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Int16Array</span>.BYTES_PER_ELEMENT); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Int32Array</span>.BYTES_PER_ELEMENT); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ints = <span class="keyword">new</span> <span class="built_in">Int32Array</span>(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ints.BYTES_PER_ELEMENT); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>如果定型数组没有任何值初始化, 则其关联的缓冲区会以 0 进行填充</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ints = <span class="keyword">new</span> <span class="built_in">Int32Array</span>(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ints[<span class="number">0</span>]); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(ints[<span class="number">1</span>]); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(ints[<span class="number">2</span>]); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(ints[<span class="number">3</span>]); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h4 id="支持的数组操作"><a href="#支持的数组操作" class="headerlink" title="支持的数组操作"></a>支持的数组操作</h4><ul><li>[]</li><li>copyWithin()</li><li>entries()</li><li>every()</li><li>fill()</li><li>filter()</li><li>find()</li><li>findIndex()</li><li>forEach()</li><li>indexOf()</li><li>join()</li><li>keys()</li><li>lastIndexOf()</li><li>length</li><li>map()</li><li>reduce()</li><li>reduceRight()</li><li>reverse()</li><li>slice()</li><li>some()</li><li>sort()</li><li>toLocaleString()</li><li>toString()</li><li>values()</li></ul><h5 id="支持-for-of-遍历"><a href="#支持-for-of-遍历" class="headerlink" title="支持 for-of 遍历"></a>支持 for-of 遍历</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ints = <span class="keyword">new</span> <span class="built_in">Int16Array</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> int <span class="keyword">of</span> ints)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(int);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="合并-复制和修改定型数组"><a href="#合并-复制和修改定型数组" class="headerlink" title="合并,复制和修改定型数组"></a>合并,复制和修改定型数组</h5><p>set() 用于将数组或者定型数组中把值复制到当前定型数组中的指定索引位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建含有 8 个元素的 int16 定型数组</span></span><br><span class="line"><span class="keyword">const</span> container = <span class="keyword">new</span> <span class="built_in">Int16Array</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把定型数组复制为前 4 个值</span></span><br><span class="line"><span class="comment">// 偏移量默认为索引 0</span></span><br><span class="line">container.set(<span class="built_in">Int8Array</span>.of([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]));</span><br><span class="line"><span class="built_in">console</span>.log(container); <span class="comment">// [1,2,3,4,0,0,0,0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 把普通数组复制为后四个</span></span><br><span class="line">container.set([<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>], <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(container); <span class="comment">// [1,2,3,4,5,6,7,8]</span></span><br></pre></td></tr></table></figure><p>subarray() 执行与 set 相反的操作, 它会基于从原始定型数组中复制的值返回一个新的定型数组, 复制值的开始索引和结束索引是可选的;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source = Int64Array.of(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全部复制</span></span><br><span class="line"><span class="keyword">const</span> fullCopy = source.subarray();</span><br><span class="line"><span class="built_in">console</span>.log(fullCopy); <span class="comment">// [2,3,4,6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从索引0 复制到索引 2</span></span><br><span class="line"><span class="keyword">const</span> halfCopy = source.subarray(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(halfCopy); <span class="comment">//[ 2,3 ]</span></span><br></pre></td></tr></table></figure><hr><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>使用关键字 new 和 Map 构造函数可以创建一个空映射</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br></pre></td></tr></table></figure><p>也可以给 Map() 构造函数传入一个可迭代对象, 需要包含键/值对数组; 可迭代对象中的每个键/值都会依照迭代顺序插入到新映射实例中:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用嵌套数组初始化映射</span></span><br><span class="line"><span class="keyword">const</span> m1 = <span class="keyword">new</span> <span class="built_in">Map</span>(</span><br><span class="line">[</span><br><span class="line">    <span class="string">&quot;key1&quot;</span>: <span class="string">&quot;value1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;key2&quot;</span>: <span class="string">&quot;value2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;key3&quot;</span>: <span class="string">&quot;value3&quot;</span></span><br><span class="line">])</span><br><span class="line"><span class="built_in">console</span>.log(m1.size); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="任意数据类型可为键"><a href="#任意数据类型可为键" class="headerlink" title="任意数据类型可为键"></a>任意数据类型可为键</h3><p>Map 和 Object 不同, Object 只能使用数值, 字符串或者符号作为键, 而 Map 可以使用 js 中任意数据类型作为键;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> functionKey = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> objectKey = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">const</span> symbolKey = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line">m.set(functionKey, <span class="string">&quot;functionValue&quot;</span>);</span><br><span class="line">m.set(objectKey, <span class="string">&quot;objectValue&quot;</span>);</span><br><span class="line">m.set(symbolKey, <span class="string">&quot;symbolValue&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;m.get(functionKey)&quot;</span>, m.get(functionKey));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;m.get(objectKey)&quot;</span>, m.get(objectKey));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;m.get(symbolKey)&quot;</span>, m.get(symbolKey));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">m.get(functionKey) functionValue</span></span><br><span class="line"><span class="comment">m.get(objectKey) objectValue</span></span><br><span class="line"><span class="comment">m.get(symbolKey) symbolValue</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="顺序与迭代"><a href="#顺序与迭代" class="headerlink" title="顺序与迭代"></a>顺序与迭代</h3><p>与 Obejct 类型的另一个差异是, Map 实例会维护键值对的插入顺序, 因此可以根据插入顺序执行迭代操作; 可以通过 Map 实例的 entries 属性 获取迭代器, 也可以通过实例的 m[Symbol.iterator] 获取迭代器; 这两个迭代器是相同的;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(</span><br><span class="line">    [</span><br><span class="line">        [<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;value3&quot;</span>]</span><br><span class="line">    ]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(m.entries === m[<span class="built_in">Symbol</span>.iterator]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> mElement <span class="keyword">of</span> m.entries()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(mElement);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> mElement <span class="keyword">of</span> m) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(mElement);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> mElement <span class="keyword">of</span> m[<span class="built_in">Symbol</span>.iterator]()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(mElement);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">[ &#x27;key1&#x27;, &#x27;value1&#x27; ]</span></span><br><span class="line"><span class="comment">[ &#x27;key2&#x27;, &#x27;value2&#x27; ]</span></span><br><span class="line"><span class="comment">[ &#x27;key3&#x27;, &#x27;value3&#x27; ]</span></span><br><span class="line"><span class="comment">[ &#x27;key1&#x27;, &#x27;value1&#x27; ]</span></span><br><span class="line"><span class="comment">[ &#x27;key2&#x27;, &#x27;value2&#x27; ]</span></span><br><span class="line"><span class="comment">[ &#x27;key3&#x27;, &#x27;value3&#x27; ]</span></span><br><span class="line"><span class="comment">[ &#x27;key1&#x27;, &#x27;value1&#x27; ]</span></span><br><span class="line"><span class="comment">[ &#x27;key2&#x27;, &#x27;value2&#x27; ]</span></span><br><span class="line"><span class="comment">[ &#x27;key3&#x27;, &#x27;value3&#x27; ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>entries() 是默认迭代器, 可以直接对映射实例使用扩展操作, 把映射转换为数组;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(</span><br><span class="line">    [</span><br><span class="line">        [<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;value3&quot;</span>]</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">console</span>.log([...m]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [ [ &#x27;key1&#x27;, &#x27;value1&#x27; ], [ &#x27;key2&#x27;, &#x27;value2&#x27; ], [ &#x27;key3&#x27;, &#x27;value3&#x27; ] ]</span></span><br></pre></td></tr></table></figure><p>通过 keys() 获取键值对的键数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(</span><br><span class="line">    [</span><br><span class="line">        [<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;value3&quot;</span>]</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(m.keys());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> m.keys()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;key&quot;</span>, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*[Map Iterator] &#123; &#x27;key1&#x27;, &#x27;key2&#x27;, &#x27;key3&#x27; &#125;</span></span><br><span class="line"><span class="comment">key key1</span></span><br><span class="line"><span class="comment">key key2</span></span><br><span class="line"><span class="comment">key key3*/</span></span><br></pre></td></tr></table></figure><p>通过 values() 获取所有的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(</span><br><span class="line">    [</span><br><span class="line">        [<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;value3&quot;</span>]</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(m.values());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> m.values()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;value&quot;</span>, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*[Map Iterator] &#123; &#x27;value1&#x27;, &#x27;value2&#x27;, &#x27;value3&#x27; &#125;</span></span><br><span class="line"><span class="comment">value value1</span></span><br><span class="line"><span class="comment">value value2</span></span><br><span class="line"><span class="comment">value value3*/</span></span><br></pre></td></tr></table></figure><h3 id="迭代时支持的修改"><a href="#迭代时支持的修改" class="headerlink" title="迭代时支持的修改"></a>迭代时支持的修改</h3><p>键和值在迭代器遍历的时候是可以修改的, 但是映射内部的引用是无法修改的; 键或者值得对象内部的属性可以修改, 只要不影响它们在映射实例中的身份, 都是支持修改的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(</span><br><span class="line">    [</span><br><span class="line">        [<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>]</span><br><span class="line">    ]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> m.keys()) &#123;</span><br><span class="line">    key = <span class="string">&quot;newKey&quot;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(key); <span class="comment">// newKey</span></span><br><span class="line">    <span class="built_in">console</span>.log(m.get(<span class="string">&quot;key1&quot;</span>)); <span class="comment">// 虽然在上面被改为 newKey, 但是当前的映射关系还是 key1  --&gt;  value1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;m&quot;</span>, m); <span class="comment">// 映射关系在遍历的时候没办法更改 打印还是 m Map(1) &#123; &#x27;key1&#x27; =&gt; &#x27;value1&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>修改作为键的对象的属性, 不影响内部的映射关系, 这样是可以进行修改的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> keyObj = &#123;<span class="attr">id</span>: <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(</span><br><span class="line">    [</span><br><span class="line">        [keyObj, <span class="string">&quot;value1&quot;</span>]</span><br><span class="line">    ]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> m.keys()) &#123;</span><br><span class="line">    key.id = <span class="string">&quot;kevin&quot;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;key&quot;</span>, key);</span><br><span class="line">    <span class="built_in">console</span>.log(keyObj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*key &#123; id: &#x27;kevin&#x27; &#125;</span></span><br><span class="line"><span class="comment">&#123; id: &#x27;kevin&#x27; &#125;*/</span></span><br></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 set()方法添加键值对</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">m.set(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(m);</span><br><span class="line"></span><br><span class="line">m.set(<span class="string">&quot;key2&quot;</span>,<span class="string">&quot;value2&quot;</span>).set(<span class="string">&quot;key3&quot;</span>,<span class="string">&quot;value3&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(m);</span><br></pre></td></tr></table></figure><h3 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="built_in">console</span>.log(m.get(<span class="string">&quot;firstName&quot;</span>)); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="has"><a href="#has" class="headerlink" title="has()"></a>has()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[]]);</span><br><span class="line"><span class="built_in">console</span>.log(m.has(<span class="literal">undefined</span>)); <span class="comment">// true</span></span><br><span class="line">m.set(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(m.has(<span class="string">&quot;key1&quot;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(</span><br><span class="line">    [</span><br><span class="line">        [<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value2&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>]</span><br><span class="line">    ]</span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;m.size&quot;</span>, m.size);</span><br></pre></td></tr></table></figure><h3 id="delete"><a href="#delete" class="headerlink" title="delete()"></a>delete()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(</span><br><span class="line">    [</span><br><span class="line">        [<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>]</span><br><span class="line">    ]</span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;m.size&quot;</span>, m.size);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;m.get(&#x27;key1&#x27;)&quot;</span>, m.get(<span class="string">&#x27;key1&#x27;</span>));</span><br><span class="line"></span><br><span class="line">m.delete(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;m&quot;</span>, m); <span class="comment">// &#123; &#x27;key2&#x27; =&gt; &#x27;value2&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(</span><br><span class="line">    [</span><br><span class="line">        [<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>]</span><br><span class="line">    ]</span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;m.size&quot;</span>, m.size);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;m.get(&#x27;key1&#x27;)&quot;</span>, m.get(<span class="string">&#x27;key1&#x27;</span>));</span><br><span class="line"></span><br><span class="line">m.clear();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;m&quot;</span>, m); <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h2><p>ES6中新增了弱映射, 是一种新的集合类型; WeakMap 是 Map 的兄弟类型, API 也是 Map 的子集; WeakMap 中的弱 weak, 描述的是 js 垃圾回收程序对待弱映射中的键方式;</p><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>可以使用 new 关键字和 WeakMap 构造函数创建一个弱引用类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br></pre></td></tr></table></figure><p>弱映射中的键只能是 Object 或者继承自 Object 的类型, 如果使用非对象设置键会抛出 TypeError;</p><p>可以在初始化的是否给 WeakMap 进行赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> key1 = &#123;<span class="attr">id</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> key2 = &#123;<span class="attr">id</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> key3 = &#123;<span class="attr">id</span>: <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wm1 = <span class="keyword">new</span> <span class="built_in">WeakMap</span>(</span><br><span class="line">[</span><br><span class="line">    [key1, <span class="string">&quot;value1&quot;</span>],</span><br><span class="line">    [key2, <span class="string">&quot;value2&quot;</span>],</span><br><span class="line">    [key3, <span class="string">&quot;value3&quot;</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(wm1.get(key1));</span><br><span class="line"><span class="built_in">console</span>.log(wm1.get(key2));</span><br><span class="line"><span class="built_in">console</span>.log(wm1.get(key3));</span><br></pre></td></tr></table></figure><p>原始值可以先包装成对象, 再作为键</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stringKey = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>([</span><br><span class="line">    [stringKey, <span class="string">&quot;value1&quot;</span>]</span><br><span class="line">])</span><br><span class="line"><span class="built_in">console</span>.log(wm.get(stringKey));</span><br></pre></td></tr></table></figure><h3 id="弱键"><a href="#弱键" class="headerlink" title="弱键"></a>弱键</h3><p>WeakMap 中的 Weak 指的是键是弱键, 这些键不是正式的引用, 不会阻止垃圾回收; </p><p>但是 WeakMap 中的键值对的映射关系不是弱的, 只要键存在, 那么键值对的映射关系就会一直存在, 不会被垃圾回收;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line">wm.set(&#123;&#125;, <span class="string">&quot;val&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// set() 方法中初始化了一个新对象, 并将它作为一个字符串的键, 因为没有指向这个对象的其他引用, </span></span><br><span class="line"><span class="comment">// 所以当这行代码执行完成后, 这个对象键就会被当做垃圾回收;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Weakmap();</span><br><span class="line"><span class="keyword">const</span> container = &#123;</span><br><span class="line">    key: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">wm.set(container.key, <span class="string">&quot;val&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeReference</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    container.key = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>contianer 对象维护了一个对弱映射键的引用, 因此这个对象键不会被垃圾回收; 不过如果调用了 removeReference() 就会摧毁对象的最后一个引用, 垃圾回收程序就可以把这个键/值对清理掉;</p><h3 id="不可迭代"><a href="#不可迭代" class="headerlink" title="不可迭代"></a>不可迭代</h3><p>因为 WeakMap 中的键/值对任何时候都可能被销毁，所以没必要提供迭代其键/值对的能力。</p><hr><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><p>使用 new 关键字和 Set 构造函数可以创建一个空集合;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br></pre></td></tr></table></figure><p>如果想要在创建的同时初始化实例, 则可以给 Set() 构造函数传入一个可迭代对象, 其中包含需要插入到新集合中的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&quot;value1&quot;</span>, <span class="string">&quot;value2&quot;</span>, <span class="string">&quot;value3&quot;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(s1.size);</span><br></pre></td></tr></table></figure><p>和 Map 类似, Set 可以包含任何 Javascript 数据类型作为值, 集合也可以; </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="keyword">const</span> functionValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> symbolValue = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> objectValue = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h4><p>使用 add()增加元素;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="built_in">console</span>.log(s.has(<span class="string">&quot;Matt&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(s.size);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 add()添加元素</span></span><br><span class="line">s.add(<span class="string">&quot;Matt&quot;</span>).add(<span class="string">&quot;kevin&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s.size);</span><br></pre></td></tr></table></figure><h4 id="has-1"><a href="#has-1" class="headerlink" title="has()"></a>has()</h4><p>通过 has 查询, 可以快速获取查询元素是否在目标集合中;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">s.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s.has(<span class="string">&quot;1&quot;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="delete-1"><a href="#delete-1" class="headerlink" title="delete()"></a>delete()</h4><p>delete()返回一个布尔值, 表示集合中是否存在需要删除的值;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">s.add(<span class="number">1</span>).add(<span class="number">2</span>).add(<span class="number">3</span>);</span><br><span class="line">s.delete(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s);<span class="comment">// Set(2) &#123; 2, 3 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="顺序与迭代-1"><a href="#顺序与迭代-1" class="headerlink" title="顺序与迭代"></a>顺序与迭代</h3><p>Set 会维护值插入时的顺序, 因此支持按顺序迭代;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&quot;val1&quot;</span>, <span class="string">&quot;val2&quot;</span>, <span class="string">&quot;val3&quot;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(s.values === s[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(s.keys === s[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> s.values()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> s[<span class="built_in">Symbol</span>.iterator()]) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因为 values()是默认的迭代器, 所以可以直接对集合实例使用扩展操作; 把集合转换成数组;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&quot;val1&quot;</span>, <span class="string">&quot;val2&quot;</span>, <span class="string">&quot;val3&quot;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log([...s]); <span class="comment">// [&quot;val1&quot;,&quot;val2&quot;,&quot;val3&quot;]</span></span><br></pre></td></tr></table></figure><hr><h2 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h2><p>ES 中新增了弱集合, WeakSet 是 Set 的兄弟类型, 其 API 也是 Set 的子集; WeakSet 中的 Weak 描述的是 Javascript 垃圾回收对待弱集合中的值的方式;</p><h3 id="定义-WeakSet"><a href="#定义-WeakSet" class="headerlink" title="定义 WeakSet"></a>定义 WeakSet</h3><p>可以使用 new 关键字实例化一个空的 WeakSet;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br></pre></td></tr></table></figure><p>弱集合中的值只能是 Object 或者继承自 Object 的类型, 如果使用非对象类型会抛出 TypeError 错误;</p><p>如果想在初始化中填充弱集合, 则构造函数可以接受一个可迭代对象, 其中需要包含有效的值; 可迭代对象中的每个值会按照迭代顺序插入到新实例中;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> val1 = &#123;<span class="attr">id</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> val2 = &#123;<span class="attr">id</span>:<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> val3 = &#123;<span class="attr">id</span>:<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用数组初始化弱集合</span></span><br><span class="line"><span class="keyword">const</span> ws1 = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([val1, val2, val3]);</span><br><span class="line"><span class="built_in">console</span>.log(ws1.has(val1)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(ws1.has(val2)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(ws1.has(val3)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化是一个全有或者全无的操作</span></span><br><span class="line"><span class="comment">// 只要有一个值无效就会抛出错误, 导致整个初始化失败</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ws2 = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([val1, <span class="string">&quot;errorValue&quot;</span>, val3]);</span><br><span class="line"><span class="comment">// TypeError</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原始对象可以先包装成对象再用作值</span></span><br><span class="line"><span class="keyword">const</span> stringValue1 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;value1&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> ws3 = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([stringValue1]);</span><br><span class="line"><span class="built_in">console</span>.log(ws3.has(stringValue1)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="add-has-delete"><a href="#add-has-delete" class="headerlink" title="add(),has(),delete()"></a>add(),has(),delete()</h3><p>初始化之后可以使用 add()添加值, has()查询值, delete()删除值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line"><span class="keyword">const</span> val1 = &#123;<span class="attr">id</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> val2 = &#123;<span class="attr">id</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> val3 = &#123;<span class="attr">id</span>: <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ws.has(val1)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// add 添加</span></span><br><span class="line">ws.add(val1).add(val3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否存在</span></span><br><span class="line">ws.has(val1); <span class="comment">// true</span></span><br><span class="line">ws.has(val3); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除元素</span></span><br><span class="line">ws.delete(val1);</span><br><span class="line"></span><br><span class="line">ws.has(val1); <span class="comment">// false</span></span><br><span class="line">ws.has(val2); <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="不可迭代-1"><a href="#不可迭代-1" class="headerlink" title="不可迭代"></a>不可迭代</h3><p>因为 WeakSet 中的值任何时候都可能被销毁, 所以没必要提供迭代能力; 这点和 WeakMap 类似;</p><hr><h2 id="迭代与扩展操作"><a href="#迭代与扩展操作" class="headerlink" title="迭代与扩展操作"></a>迭代与扩展操作</h2><p>4 种原生集合类型定义了默认迭代器:</p><ol><li> Array</li><li> 所有定型数组</li><li> Map</li><li> Set</li></ol><p>上述的类型都支持顺序迭代, 都可以传入 for-of 循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> things = [</span><br><span class="line">    <span class="built_in">Array</span>.of(<span class="number">1</span>,<span class="number">2</span>),</span><br><span class="line">    typedArr = <span class="built_in">Int16Array</span>.of(<span class="number">3</span>,<span class="number">4</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Map</span>([<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]),</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">9</span>,<span class="number">10</span>])</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> thing <span class="keyword">of</span> things) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> thing)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述类型都支持兼容扩展操作符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [...arr1];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1 === arr2); <span class="comment">// false 用作拷贝操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建新数组</span></span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr4 = [<span class="number">0</span>, ...arr3, <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr4);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将数组复制为定型数组</span></span><br><span class="line"><span class="keyword">let</span> arr0 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> typedArr0 = <span class="built_in">Int16Array</span>.of(...arr0);</span><br><span class="line"><span class="keyword">let</span> typedArr1 = <span class="built_in">Int16Array</span>.from(arr0);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把数组复制到集合</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([typedArr0]);</span><br><span class="line"><span class="built_in">console</span>.log(set);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把集合复制回数组</span></span><br><span class="line"><span class="keyword">let</span> arr__ = [...set];</span><br><span class="line"><span class="built_in">console</span>.log(arr__);</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js_基本引用类型</title>
      <link href="js_referenceType/"/>
      <url>js_referenceType/</url>
      
        <content type="html"><![CDATA[<h1 id="基本引用类型"><a href="#基本引用类型" class="headerlink" title="基本引用类型"></a>基本引用类型</h1><p>引用值类型是某个特定引用类型的实例; 引用类型是把数据和功能组织成一起的结构, 经常被人错误地称为类; </p><p>对象是某个特定引用类型的实例, 新对象通过 new 操作符后面跟一个构造函数来创建, 构造函数就是用来创建新对象的函数; 如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure><p>这行代码创建了引用类型 Date 的一个新实例, 并将它保存在变量 now 中; <code>Date()</code>在这里就是构造函数, 它负责创建一个只有默认属性和方法的简单对象; 需要注意, 函数也是一种引用类型;</p><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><h3 id="构造方法-Date"><a href="#构造方法-Date" class="headerlink" title="构造方法 Date()"></a>构造方法 <code>Date()</code></h3><ol><li> new Date();</li><li> new Date(value);</li><li> new Date(dateString);</li><li> new Date(year, monthIndex, [, day [, hours [, minutes [, seconds [, milliseconds ]]]]])</li></ol><p>参数:</p><ol><li> 没有参数, 那么新创建的 Date 对象表示实例化时刻的日期和时间</li><li> value: 一个 Unix 时间戳, 它是一个整数值, 是一个 unixtimestamp;</li><li>dateString: 表示日期的字符串, 该字符串应该可以被 <code>Date.parse()</code>方法正确识别<ol><li> “月/日/年” 如: “5/23/2019”</li><li> “月名 日,年” 如:”May 23, 2019”;</li><li> “周几 月名 日 年 时:分:秒 时区”，如”Tue May 23 2019 00:00:00 GMT-0700”；</li><li> ISO 8601 扩展格式“YYYY-MM-DDTHH:mm:ss.sssZ”，如 2019-05-23T00:00:00</li></ol></li><li> year, monthIndex, [, day [, hours [, minutes [, seconds [, milliseconds ]]]]] : 只有前两个年份和月份是必须要传递的, 月份从 0 开始; 不提供日则默认是 1 日; 不提供其他参数, 则默认值是 0;</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> d1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;5/20/2020&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;May 23, 2019&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;d1&quot;</span>, d1); <span class="comment">//d1 2020-05-19T16:00:00.000Z</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;d2&quot;</span>, d2); <span class="comment">// d2 2019-05-22T16:00:00.000Z</span></span><br></pre></td></tr></table></figure><h3 id="Date-parse"><a href="#Date-parse" class="headerlink" title="Date.parse()"></a><code>Date.parse()</code></h3><p><code>Date.parse()</code>解析一个表示日期的字符串对象, 并返回一个表示这个对象的时间戳(毫秒数); 如果传入的字符串不是合法的日期格式, 则返回 NaN;</p><ol><li> “月/日/年” 如: “5/23/2019”</li><li> “月名 日,年” 如:”May 23, 2019”;</li><li> “周几 月名 日 年 时:分:秒 时区”，如”Tue May 23 2019 00:00:00 GMT-0700”；</li><li> ISO 8601 扩展格式“YYYY-MM-DDTHH:mm:ss.sssZ”，如 2019-05-23T00:00:00</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.  &quot;月/日/年&quot; 如: &quot;5/23/2019&quot;</span></span><br><span class="line"><span class="comment">// 2.  &quot;月名 日,年&quot; 如:&quot;May 23, 2019&quot;;</span></span><br><span class="line"><span class="comment">// 3.  “周几 月名 日 年 时:分:秒 时区”，如&quot;Tue May 23 2019 00:00:00 GMT-0700&quot;；</span></span><br><span class="line"><span class="comment">// 4.  ISO 8601 扩展格式“YYYY-MM-DDTHH:mm:ss.sssZ”，如 2019-05-23T00:00:00</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d1 = <span class="built_in">Date</span>.parse(<span class="string">&quot;5/23/2019&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;d1&quot;</span>, d1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d2 = <span class="built_in">Date</span>.parse(<span class="string">&quot;May 23, 2019&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;d2&quot;</span>, d2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d3 = <span class="built_in">Date</span>.parse(<span class="string">&quot;Tue May 23 2019 00:00:00 GMT-0700&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;d3&quot;</span>, d3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d4 = <span class="built_in">Date</span>.parse(<span class="string">&quot;2019-05-23T00:00:00&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;d4&quot;</span>, d4);</span><br></pre></td></tr></table></figure><h3 id="Date-UTC"><a href="#Date-UTC" class="headerlink" title="Date.UTC()"></a><code>Date.UTC()</code></h3><p><code>Date.UTC()</code>方法也返回日期的毫秒表示, 但是使用的是和 <code>Date.parse()</code>不同的信息来生成这个值; 传给 <code>Date.UTC()</code>的参数是年, 零起点的月份(1 月是 0, 2 月是 1 以此类推), 日(1-31), 时(0-23), 分, 秒和毫秒, 这些参数中只有前两个年和月是必须的; 如果不提供日则默认是 1 日; 其他参数的默认值都是 0;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> y2k = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.UTC(<span class="number">2000</span>,<span class="number">0</span>)); </span><br><span class="line"><span class="keyword">let</span> allFives = <span class="keyword">new</span> <span class="built_in">Date</span>(Data.UTC(<span class="number">2005</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">17</span>,<span class="number">55</span>,<span class="number">55</span>));</span><br></pre></td></tr></table></figure><h3 id="继承的方法"><a href="#继承的方法" class="headerlink" title="继承的方法"></a>继承的方法</h3><p><code>toLocaleString()</code>方法返回和浏览器运行的本地环境一致的日期和时间</p><p><code>toString()</code> 返回带有时区信息的日期和时间, 时间也是用 24 小时制进行表示的</p><p><code>valueOf()</code>返回时间的毫秒表示, 可以直接使用大于号和小于号进行判断</p><h3 id="日期格式化方法"><a href="#日期格式化方法" class="headerlink" title="日期格式化方法"></a>日期格式化方法</h3><p>Date 类有几个专门用于格式化日期的方法, 他们都会返回字符串</p><ol><li> <code>toDateString()</code>: 显示日期中的周几, 月, 日, 年</li><li> <code>toTimeString()</code>: 显示日期中的时, 分, 秒和时区;</li><li> <code>toLocalDateString()</code>: 显示日期中的周几, 月, 日, 年</li><li> <code>toLocalTimeString()</code>: 显示日期中的时, 分, 秒</li><li> <code>toUTCString()</code>显示完整的 UTC 日期</li></ol><h3 id="Date-常用方法"><a href="#Date-常用方法" class="headerlink" title="Date 常用方法"></a>Date 常用方法</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>getTime()</td><td>返回日期的毫秒表示, 与 valueOf()相同</td></tr><tr><td>setTime(milliseconds)</td><td>设置日期的毫秒表示, 从而修改整个日期</td></tr><tr><td>getFullYear()</td><td>返回 4 位数年</td></tr><tr><td>getUTCFullYear()</td><td>返回 UTC 日期的 4 位数年</td></tr><tr><td>setFullYear(year)</td><td>设置日期的年(year 必须是 4 位数)</td></tr><tr><td>setUTCFullYear(year)</td><td>设置UTC 日期的年(year 必须是 4 位数)</td></tr><tr><td>getMonth()</td><td>返回日期的月(0 表示 1 月, 11 表示 12 月)</td></tr><tr><td>getUTCMonth()</td><td>返回 UTC 日期的月(0 表示 1 月, 11 表示 12 月)</td></tr><tr><td>setMonth()</td><td>设置日期的月(month 为0 的数值, 大于 11 加年)</td></tr><tr><td>setUTCMonth()</td><td>设置 UTC 日期的月 (month 为大于 0 的数值, 大于 11 加年)</td></tr><tr><td>getDate()</td><td>返回日期中的日(1-31)</td></tr><tr><td>getUTCDate()</td><td>返回 UTC日期中的日(1-31)</td></tr><tr><td>setDate(date)</td><td>设置日期中的日, 如果 date 大于该月天数, 则加月</td></tr><tr><td>setUTCDate(date)</td><td>设置UTC日期中的日, 如果 date 大于该月天数, 则加月</td></tr><tr><td>getDay()</td><td>获取日期中表示周几的数值, 0 表示周日, 6 表示周六</td></tr><tr><td>getUTCDay()</td><td>返回 UTC 日期中表示周几的数值, 0 表示周日, 6 表示周六</td></tr><tr><td>getHours()</td><td>返回日期中的时(0-23)</td></tr><tr><td>getUCTHours()</td><td>返回 UTC 日期中的时(0-23)</td></tr><tr><td>setHours(hours)</td><td>设置日期中的时, 如果大于 23 则加日</td></tr><tr><td>setUTCHours(hours)</td><td>设置 UTC 日期中的时, 如果大于 23 则添加日</td></tr><tr><td>getMilliseconds()</td><td>返回日期中的毫秒</td></tr><tr><td>getUTCMilliseconds()</td><td>返回 UTC 日期中的毫秒</td></tr><tr><td>setMilliseconds(Milliseconds)</td><td>设置日期中的毫秒</td></tr><tr><td>setUTCMilliseconds(Milliseconds)</td><td>设置 UTC 日期中的毫秒</td></tr><tr><td>getTimezoneOffset()</td><td>返回以分钟计的 UTC 与本地时间的偏移量</td></tr></tbody></table><hr><h2 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp"></a>RegExp</h2><p>es 通过 RegExp 类型来支持正则表达式, 正则表达式创建方式为: <code>let expression = /pattern/flags</code>;</p><p>匹配模式 flags:</p><ol><li> g: 全局模式, 表示查找字符串的全部内容, 而不是找到第一个匹配的内容就结束</li><li> i: 不区分大小写, 表示在查找匹配时忽略 pattern 和字符串的大小写</li><li> m: 多行模式, 表示查找到一行文本末尾时会继续查找</li><li> y: 粘附模式, 表示只查找从 lastIndex 开始及之后的字符串;</li><li> u: Unicode 模式, 表示启用 Unicode 匹配</li><li> s: dotAll 模式, 表示元字符, 匹配任何字符 包括 \n 或者\r 等</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配字符串中所有的&quot;at&quot;</span></span><br><span class="line"><span class="keyword">let</span> pattern1 = <span class="regexp">/at/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配第一个 bat 或者 cat, 忽略大小写</span></span><br><span class="line"><span class="keyword">let</span> pattern2 = <span class="regexp">/[bc]at/i</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ( [ &#123; \ ^ $ | ) ] &#125; ? * + . 这些元字符需要使用反斜杠进行转义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配第一个&quot;bat&quot;或&quot;cat&quot;，忽略大小写</span></span><br><span class="line"><span class="keyword">let</span> pattern1 = <span class="regexp">/[bc]at/i</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配第一个&quot;[bc]at&quot;，忽略大小写</span></span><br><span class="line"><span class="keyword">let</span> pattern2 = <span class="regexp">/\[bc\]at/i</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配所有以&quot;at&quot;结尾的三字符组合，忽略大小写 let pattern3 = /.at/gi;</span></span><br><span class="line"><span class="comment">// 匹配所有&quot;.at&quot;，忽略大小写</span></span><br><span class="line"><span class="keyword">let</span> pattern4 = <span class="regexp">/\.at/gi</span>;</span><br></pre></td></tr></table></figure><h3 id="RegExp-实例属性"><a href="#RegExp-实例属性" class="headerlink" title="RegExp 实例属性"></a>RegExp 实例属性</h3><p>每个 RegExp 实例都有下列属性, 提供了有关模式的各方面信息:</p><ul><li>  global: 布尔值, 表示是否设置了 g 标记</li><li>  ignoreCase: 布尔值, 表示是否设置了 i 标记</li><li>  unicode: 布尔值, 表示是否设置了 u 标记</li><li>  sticky: 布尔值, 表示是否设置了 y 标记</li><li>  lastIndex: 整数, 表示在源字符串中下一次搜索的开始位置, 始终从 0 开始</li><li>  dotAll: 布尔值, 表示是否设置了 s 标记</li><li>  multiline: 布尔值, 表示是否设置了 m 标记</li><li>  source: 正字表达式的字面量字符串, 没有开头和结尾的斜杠</li><li>  flags: 正则表达式的标记字符串, 始终以字面量而非传入构造函数的字符串模式返回, 没有前后的斜杠</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern1 = <span class="regexp">/\[bc\]at/i</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(pattern1.global);  <span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(pattern1.ignoreCase); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern1.multiline);  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern1.lastIndex); <span class="comment">// 0 </span></span><br><span class="line"><span class="built_in">console</span>.log(pattern1.source);  <span class="comment">// &quot;\[bc\]at&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(pattern1.flags); <span class="comment">// &quot;i&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pattern2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;\\[bc\\]at&quot;</span>, <span class="string">&quot;i&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(pattern2.global); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern2.ignoreCase);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern2.multiline);  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern2.lastIndex);  <span class="comment">// 0 </span></span><br><span class="line"><span class="built_in">console</span>.log(pattern2.source); <span class="comment">// &quot;\[bc\]at&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern2.flags); <span class="comment">// &quot;i&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="RegExp-实例方法"><a href="#RegExp-实例方法" class="headerlink" title="RegExp 实例方法"></a>RegExp 实例方法</h3><h4 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h4><p>RegExp 实例的主要方法是 <code>exec()</code>; 主要用于配合捕获组使用, 这个方法只接受一个参数, 就是要应用模式的字符串; 如果找到了匹配项, 则返回包含第一个匹配信息的数组, 如果没找到匹配项, 则返回 null; 返回的数组虽然是 Array 实例, 但是包含两个额外的属性, index 和 input; index 是字符中匹配模式的起始位置, input 是要查找的字符串; 数组的第一个元素是匹配整个模式的字符串, 其他元素是与表达式中的捕获组匹配的字符串; 如果模式中没有捕获组, 则数组只包含一个元素:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;mom and dad and baby&quot;</span></span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/mom( and dad( and baby)?)?/gi</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> matches = pattern.exec(text);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(matches.index); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(matches.input); <span class="comment">// mom and dad and baby</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取整个匹配模式匹配到的字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]); <span class="comment">// mom and dad and baby</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取匹配到的第一个捕获组的数据</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">1</span>]); <span class="comment">// and dad and baby</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取匹配到第二个捕获组的数组</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">2</span>]); <span class="comment">// and baby</span></span><br></pre></td></tr></table></figure><p>在这个案例中, 模式包含了两个捕获组, 最内部的匹配项: and baby, 最外部的匹配项: and dad 或者 and dad and baby; 调用 <code>exec()</code>后找到了一个匹配项; 因为整个字符串匹配模式, 所以 matches 数组的 index 属性就是 0; 数组的第一个元素就是匹配的整个字符串, 第二个元素就是匹配到的第一个捕获组的字符串, 第三个元素就是匹配第二个捕获组的字符串;</p><p>如果模式设置了全局标记, 则每次调用 exec()方法会返回一个匹配的信息, 如果没有设置全局标记, 则无论对一个字符串调用多少次 exec(), 也只会返回第一个匹配的信息;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;cat bat sat fat&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/.at/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> matches = pattern.exec(text); </span><br><span class="line"><span class="built_in">console</span>.log(matches.index); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]); <span class="comment">// cat</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.lastIndex); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> matches = pattern.exec(text); </span><br><span class="line"><span class="built_in">console</span>.log(matches.index); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]); <span class="comment">// cat</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.lastIndex); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>上面的案例没有设置全局标记, 因此调用 exec()只会返回第一个匹配想, lastIndex 在非全局模式下始终不变;</p><p>在设置了全局模式之后, 每次调用都会在字符串中向前搜索下一个匹配项, 如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;cat, bat, sat, fat&quot;</span>; </span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/.at/g</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> matches = pattern.exec(text); </span><br><span class="line"><span class="built_in">console</span>.log(matches.index); <span class="comment">// 0 </span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]); <span class="comment">// cat </span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.lastIndex); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">matches = pattern.exec(text); </span><br><span class="line"><span class="built_in">console</span>.log(matches.index); <span class="comment">// 5 </span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]); <span class="comment">// bat</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.lastIndex); <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line">matches = pattern.exec(text); </span><br><span class="line"><span class="built_in">console</span>.log(matches.index); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]);  <span class="comment">// sat</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.lastIndex); <span class="comment">// 13</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>如果模式设置了粘附标记y, 则每次调用 exec()就只会在 lastIndex 的位置上寻找匹配项, 粘附标记覆盖全局标记</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;cat, bat, sat, fat&quot;</span>; <span class="keyword">let</span> pattern = <span class="regexp">/.at/y</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> matches = pattern.exec(text);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(matches.index); <span class="comment">//0 </span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]); <span class="comment">// cat</span></span><br><span class="line"><span class="built_in">console</span>.log(matches.lastIndex); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以索引 3 对应的字符开头找不到匹配项, 因此 exec()返回 null</span></span><br><span class="line"><span class="comment">// exec()没找到匹配想, 于是将 lastIndex 设置为 0</span></span><br><span class="line">matches = pattern.exec(text);</span><br><span class="line"><span class="built_in">console</span>.log(matches); <span class="comment">// null</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.lastIndex); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向前设置 lastIndex 可以让粘附的模式通过 exec()找到下一个匹配项</span></span><br><span class="line">pattern.lastIndex = <span class="number">5</span>;</span><br><span class="line">matches = pattern.exec(text);</span><br><span class="line"><span class="built_in">console</span>.log(matches.index); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]); <span class="comment">// bat</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.lastIndex); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><h4 id="test"><a href="#test" class="headerlink" title="test()"></a>test()</h4><p>test()方法用来接收一个字符串参数, 如果输入的文本与模式匹配, 则参数返回 true; 否则返回 false; 这个方法用于只想测试模式是否匹配, 而不需要实际匹配内容的情况; test()方法经常和 if 语句配合中;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;000-00-0000&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/\d&#123;3&#125;-\d&#123;2&#125;-\d&#123;4&#125;/</span>;</span><br><span class="line"><span class="keyword">if</span> (pattern.test(text))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;the pattern was matched;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RegExp-构造函数属性"><a href="#RegExp-构造函数属性" class="headerlink" title="RegExp 构造函数属性"></a>RegExp 构造函数属性</h4><p>RegExp 构造函数本身也有几个属性, 在其他语言中这种属性被叫做静态属性; 这些属性适用于作用域中的所有正则表达式, 而且会根据最后执行的正则表达式操作而变化, 这些属性可以提取与 exec()和 test()执行的相关的信息;</p><table><thead><tr><th>全名</th><th>简写</th><th>说明</th></tr></thead><tbody><tr><td>input</td><td>$_</td><td>最后搜索的字符串</td></tr><tr><td>lastMatch</td><td>$&amp;</td><td>最后匹配到的文本</td></tr><tr><td>lastParen</td><td>$+</td><td>最后匹配的捕获组</td></tr><tr><td>leftContext</td><td>$`</td><td>input 字符串中出现在 lastMatch 前面的文本</td></tr><tr><td>rightContext</td><td>$’</td><td>input 字符串中出现在 lastMatch 后面的文本</td></tr><tr><td></td><td>$1~$9</td><td>分别包含第 1-第 9 个捕获组的匹配项</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;this has been a short summer&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/(.)hort/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pattern.test(text))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.input); <span class="comment">// this has been a short summer</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.leftContext); <span class="comment">// this has been a </span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.rightContext); <span class="comment">// summer</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.lastMatch); <span class="comment">// short</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.lastParen); <span class="comment">// s</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$1); <span class="comment">// s</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="原始值包装类型"><a href="#原始值包装类型" class="headerlink" title="原始值包装类型"></a>原始值包装类型</h2><p>为了方便操作原始值, es 提供了三种特殊的引用类型, Boolean, Number 和 String; 每当用到某些原始值的方法或者属性时, 后台会创建一个相应的原始包装类的对象, 从而暴露出操作原始值的各种方法;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="string">&quot;some text&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> s2 = s1.substring(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后台运行逻辑</span></span><br><span class="line"><span class="comment">// 1. 在以读模式访问字符串值的时候, 后台创建了一个 String 类型的实例</span></span><br><span class="line"><span class="comment">// 2. 调用了实例的特定方法</span></span><br><span class="line"><span class="comment">// 3. 销毁实例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;some text&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = s1.substring(<span class="number">2</span>);</span><br><span class="line">s1 = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>引用类型与原始值包装类型的主要区别在于对象的生命周期。在通过 new 实例化引用类型后，得到 的实例会在离开作用域时被销毁，而自动创建的原始值包装对象则只存在于访问它的那行代码执行期 间。这意味着不能在运行时给原始值添加属性和方法。比如下面的例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="string">&quot;some text&quot;</span>;</span><br><span class="line">s1.color = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(s1.color); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><p>Boolean 是对应布尔值的引用类型, 要创建一个 Boolean 对象, 就使用 Boolean 构造函数并传入 true 或 false;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> booleanObj = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>Boolean 的实例会重写 valueOf()方法, 返回一个原始值 true 或者 false; toString()方法被调用也会被覆盖, 返回字符串”true”或者”false”;</p><p>在实际开发中, Boolean 对象用的比较少, 因为容易引起误会, 尤其是在布尔表达式在中使用 Boolean 对象, 比如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> falseObj = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">let</span> result = falseObj &amp;&amp; <span class="literal">true</span>; <span class="comment">// 此时得分 falseObj 是对象而不是 false, 所有对象在布尔表达式中都会自动转成 true;</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> falseValue = <span class="literal">false</span>;</span><br><span class="line">result = falseValue &amp;&amp; <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>原始值和引用值在类型检测的时候也不同, typeof 操作符对原始值返回”boolean”, 但是对引用类型返回”object”; instanceof 操作符对原始值进行 Boolean 判断, 返回 false, 对引用值判断则返回 true:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> falseObject = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">let</span> falseValue = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> falseObject); <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> falseValue); <span class="comment">// &quot;boolean&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(falseObject <span class="keyword">instanceof</span> <span class="built_in">Boolean</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(falseValue <span class="keyword">instanceof</span> <span class="built_in">Boolean</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><hr><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><p>Number 是对数值的引用类型, 要创建一个 Numebr 对象, 就使用 Number 构造函数并传入一个数值:</p><p><code>let numberObj = new Number(10);</code></p><p>Number 类型重写了 valueOf(), toLocaleString()和 toString()方法, valueOf()方法返回 Number 对象表示的原始数值, 另外两个方法则返回了数值对应的字符串;</p><p>原始数值在调用 typeof 时始终返回”number”，而 Number 对象则返回”object”。类似地，Number 对象是 Number 类型的实例，而原始数值不是。</p><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h4><p>该方法可以接受一个参数, 将十进制转成其他进制:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toString()); <span class="comment">// &quot;10&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">2</span>)); <span class="comment">// &quot;1010&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">8</span>)); <span class="comment">// &quot;12&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">10</span>)); <span class="comment">// &quot;10&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">16</span>)); <span class="comment">// &quot;a&quot;</span></span><br></pre></td></tr></table></figure><h4 id="toFixed"><a href="#toFixed" class="headerlink" title="toFixed()"></a>toFixed()</h4><p>该方法接受一个数值参数, 可以指定返回数值的小数点位数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toFixed(<span class="number">2</span>)); <span class="comment">// 10.00</span></span><br></pre></td></tr></table></figure><p>如果数值的小数位超过了指定的小数位, 则四舍五入到最接近的小数位;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10.005</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toFixed(<span class="number">2</span>)); <span class="comment">// 10.01</span></span><br></pre></td></tr></table></figure><h4 id="toExponential"><a href="#toExponential" class="headerlink" title="toExponential()"></a>toExponential()</h4><p>该方法用于返回科学计数法表示的数值字符串, 接受一个参数, 表示结果中小数的位数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toExponential(<span class="number">1</span>)); <span class="comment">// 1.0e+1</span></span><br></pre></td></tr></table></figure><h4 id="isInteger"><a href="#isInteger" class="headerlink" title="isInteger()"></a>isInteger()</h4><p>该方法用于判断数值是否是一个整数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">1</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">1.00</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">1.01</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><hr><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>String 是对应字符串的引用类型, 要创建一个 String 对象, 使用 String 构造函数并传入一个参数即可:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringObj = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure><p>String 对象的方法可以在所有字符串原始值上调用, 3 个继承的方法 valueOf(), toLocaleString()和 toString()都返回对象的原始字符串值;</p><p>每个 String 对象都有一个 length 属性, 表示字符串中字符的数量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(stringValue.length); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure><h4 id="charAt"><a href="#charAt" class="headerlink" title="charAt()"></a>charAt()</h4><p>该方法返回指定索引值位置上对应的字符;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(message.charAt(<span class="number">2</span>)); <span class="comment">// c</span></span><br></pre></td></tr></table></figure><h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p>该方法将多个字符串拼接成一个新的字符串, 可以接受多个参数;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello &quot;</span>;</span><br><span class="line"><span class="keyword">let</span> result = stringValue.concat(<span class="string">&quot;world&quot;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// hello world</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue); <span class="comment">// hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> resultnew = stringValue.concat(<span class="string">&quot;world&quot;</span>, <span class="string">&quot;!&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(resultnew); <span class="comment">// hello world!</span></span><br></pre></td></tr></table></figure><h4 id="slice-substr-substring"><a href="#slice-substr-substring" class="headerlink" title="slice(), substr(), substring()"></a>slice(), substr(), substring()</h4><p>这个三个方法都返回调用它们的字符串的一个子字符串, 都可以接受 1 到 2 个参数; 第一个参数表示子字符串起始索引位置, 第二个参数表示子字符串结束位置; 第二个参数可以省略, 省略则表示提取到字符串结尾;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello world&quot;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(stringValue.slice(<span class="number">3</span>)); <span class="comment">// &quot;lo world&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.substring(<span class="number">3</span>)); <span class="comment">// &quot;lo world&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.substr(<span class="number">3</span>)); <span class="comment">// &quot;lo world&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.slice(<span class="number">3</span>, <span class="number">7</span>)); <span class="comment">// &quot;lo w&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.substring(<span class="number">3</span>,<span class="number">7</span>)); <span class="comment">// &quot;lo w&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.substr(<span class="number">3</span>, <span class="number">7</span>)); <span class="comment">// &quot;lo worl&quot;</span></span><br></pre></td></tr></table></figure><p>当参数为负值时, 这三个方法则出现不同: </p><ol><li> slice(): 会将所有负值参数都当成字符串长度加上负值参数; </li><li> substr(): 将第一个负参数值当成字符串长度加上该值, 将第二个负参数值直接转成 0;</li><li> substring(): 将所有负参数都转换成 0</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(stringValue.slice(-<span class="number">3</span>)); <span class="comment">// rld</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.substr(-<span class="number">3</span>)); <span class="comment">// rld</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.substring(-<span class="number">3</span>)); <span class="comment">// hello world</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.slice(<span class="number">3</span>,-<span class="number">4</span>)); <span class="comment">// lo w</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.substr(<span class="number">3</span>, -<span class="number">4</span>)); <span class="comment">// &quot;&quot; empty string</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.substring(<span class="number">3</span>, -<span class="number">4</span>)); <span class="comment">// hel</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="indexOf-lastIndexOf"><a href="#indexOf-lastIndexOf" class="headerlink" title="indexOf(), lastIndexOf()"></a>indexOf(), lastIndexOf()</h4><p>这两个方法用于在字符串中定位子字符串, 从字符串中搜索传入的子字符串, 并返回位置, 如果没找到则返回-1; indexOf()方法从字符串开头开始查找子字符串, lastIndexOf()从字符串末尾开始查找字符串;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(stringValue.indexOf(<span class="string">&quot;o&quot;</span>)); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.lastIndexOf(<span class="string">&quot;o&quot;</span>)); <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><p>这两个方法都支持接受第二个参数, 表示开始查找的起始位置, indexOf() 会从参数指定的位置开始向字符串末尾搜索, 忽略该位置之前的字符; lastIndexOf()则会从参数指定位置开始, 向字符串开头搜索, 忽略该位置之后的字符;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(stringValue.indexOf(<span class="string">&quot;o&quot;</span>, <span class="number">6</span>)); <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.lastIndexOf(<span class="string">&quot;o&quot;</span>, <span class="number">6</span>)); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>在字符串中搜索所有目标子字符串:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;Lorem ipsum dolor sit amet, consectetur adipisicing elit&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> positions = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">let</span> pos = stringValue.indexOf(<span class="string">&quot;e&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (pos &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">    positions.push(pos);</span><br><span class="line">    pos = stringValue.index(<span class="string">&quot;e&quot;</span>, pos + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(positions); </span><br></pre></td></tr></table></figure><h4 id="startsWith-endsWith-includes"><a href="#startsWith-endsWith-includes" class="headerlink" title="startsWith(), endsWith(), includes()"></a>startsWith(), endsWith(), includes()</h4><p>这三个方法用来判断字符串是否包含另个一个字符串; 都是会从字符串中搜索传入的字符串, 并返回一个表示是否包含的布尔值; </p><p>startsWith() 用于检测字符串是否以指定的子字符串开头; endsWith()检查开始于索引字符串是否以子字符串结尾; 而 includes()用于检测整个字符串中是否包含子字符串;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;foobarbaz&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(message.startsWith(<span class="string">&quot;foo&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(message.startsWith(<span class="string">&quot;bar&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(message.endsWith(<span class="string">&quot;baz&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(message.endsWith(<span class="string">&quot;bar&quot;</span>));  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(message.includes(<span class="string">&quot;bar&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(message.includes(<span class="string">&quot;qux&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>startsWith() 和 includes()方法可以接受第二个参数, 用来表示开始搜索的位置; </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;foobarbaz&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(message.startsWith(<span class="string">&quot;foo&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(message.startsWith(<span class="string">&quot;foo&quot;</span>, <span class="number">1</span>)) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(message.includes(<span class="string">&quot;bar&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(message.includes(<span class="string">&quot;bar&quot;</span>, <span class="number">4</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>endsWith()也可以接受接受第二个参数, 该参数表示了指定长度当做字符串的长度;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;foobarbaz&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(message.endsWith(<span class="string">&quot;bar&quot;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(message.endsWith(<span class="string">&quot;bar&quot;</span>, <span class="number">6</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h4><p>该方法会创建一个字符串的副本, 删除前后的空格符, 再返回结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;  hello world   &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> trimStringValue = stringValue.trim();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stringValue); <span class="comment">// &quot;  hello world   &quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(trimStringValue); <span class="comment">// &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure><h4 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h4><p>所有字符串都提供了 repeat()方法, 这个方法接受一个整数参数, 表示要将字符串复制多少次, 然后返回拼接副本后的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;na&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.repeat(<span class="number">16</span>) + <span class="string">&quot;batman&quot;</span>); </span><br><span class="line"><span class="comment">// na na na na na na na na na na na na na na na na na batman</span></span><br></pre></td></tr></table></figure><h4 id="padStart-padEnd"><a href="#padStart-padEnd" class="headerlink" title="padStart(), padEnd()"></a>padStart(), padEnd()</h4><p>padStart() 会复制字符串, 并在头部填充子定字符, 并让字符串最终长度满足入参指定的长度</p><p>padEnd() 会复制字符串, 并在结尾填充子定字符, 并让字符串最终长度满足入参指定的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;foo&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(stringVlaue.padStart(<span class="number">6</span>)); <span class="comment">// &quot;   foo&quot; 默认填充空格</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.padStart(<span class="number">6</span>,<span class="string">&quot;.&quot;</span>)) <span class="comment">// &quot;...foo&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.padEnd(<span class="number">6</span>)); <span class="comment">// &quot;foo   &quot; 默认填充空格</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.padEnd(<span class="number">6</span>,<span class="string">&quot;.&quot;</span>)) <span class="comment">// &quot;foo...&quot; </span></span><br></pre></td></tr></table></figure><p>可选的第二个参数并不限为一个字符, 如果提供了多个字符的字符串, 则会将其拼接并截断以匹配指定长度, 如果长度小于或者等于字符串长度, 则会返回原始字符串;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;foo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.padStart(<span class="number">8</span>, <span class="string">&#x27;bar&#x27;</span>)) <span class="comment">// &quot;barbafoo&quot;;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.padStart(<span class="number">2</span>)); <span class="comment">// &quot;foo&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.padEnd(<span class="number">8</span>, <span class="string">&quot;bar&quot;</span>)); <span class="comment">// foobarba</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.padEnd(<span class="number">2</span>)); <span class="comment">// foo</span></span><br></pre></td></tr></table></figure><h4 id="字符串迭代和解构"><a href="#字符串迭代和解构" class="headerlink" title="字符串迭代和解构"></a>字符串迭代和解构</h4><p>字符串在原型上暴露了一个@@iterator 方法, 表示可以迭代字符串的每个字符; 可以如下手动使用迭代器:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> stringIterator = message[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stringIterator.next()); <span class="comment">// &#123;Value: &quot;a&quot;, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringIterator.next()); <span class="comment">// &#123;Value: &quot;b&quot;, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringIterator.next()); <span class="comment">// &#123;Value: &quot;c&quot;, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringIterator.next()); <span class="comment">// &#123;Value: undefined, done: false&#125;</span></span><br></pre></td></tr></table></figure><p>在 for-of 循环中可以通过这个迭代器访问每个字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> c <span class="keyword">of</span> <span class="string">&quot;abcde&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了这个迭代器, 字符串就可以通过解构操作符来进行解构了, 可以方便的将字符串分割成数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([...message]); <span class="comment">// [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;]</span></span><br></pre></td></tr></table></figure><h4 id="toLowerCase-toUpperCase"><a href="#toLowerCase-toUpperCase" class="headerlink" title="toLowerCase(), toUpperCase()"></a>toLowerCase(), toUpperCase()</h4><p>toLowerCase(), toLocaleLowerCase() 是将字符串转成小写, 非特殊语言的情况下, 这两个方法基本一致;</p><p>toUpperCase(), toLocaleUpperCase() 是将字符串转成大写, 非特殊语言的情况下, 这两个方法基本一致;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.toLowerCase()); <span class="comment">// hello world</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.toLocaleLowerCase()); <span class="comment">// hello world</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.toUpperCase()); <span class="comment">// HELLO WORLD</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.toLocaleUpperCase()); <span class="comment">// HELLO WORLD</span></span><br></pre></td></tr></table></figure><h3 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h3><p>这个方法本质上和 RegExp 中的exec()方法类似, 都是通过正则对字符串进行匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/.at/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> matches = text.match(pattern); <span class="comment">// 等价于 pattern.exec(text)</span></span><br><span class="line"><span class="built_in">console</span>.log(matches.index); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]); <span class="comment">// cat</span></span><br><span class="line"><span class="built_in">console</span>.log(matches.lastIndex); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>match()方法返回的数组和 RegExp 对象的 exec()方法返回的数组一样, 第一个元素是与整个模式匹配的字符串, 其余元素则是与表达式中的捕获组匹配的字符串;</p><h4 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h4><p>这方法唯一的参数和 match()方法一样, 正则表达式字符串或者 RegExp 对象; 整个方法返回第一个匹配的位置索引; 如果没有找到则返回-1; serach()方法始终都是从字符串开头到字符串结尾进行匹配;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> pos = text.search(<span class="regexp">/at/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(text.search(pos)); <span class="comment">// 1 对应第一次匹配的索引位置</span></span><br></pre></td></tr></table></figure><h4 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h4><p>字符串替换操作; 这个方法接受两个参数, 第一个参数可以是一个 RegExp 对象或者一个字符串, 第二个参数可以是一个字符串或者一个函数; 如果第一个参数是字符串, 那么只会替换第一个子字符串, 要想替换所有子字符串, 第一个参数必须是正则表达式并且带有全局标记;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;cat , bat, sat, fat&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> result = text.replace(<span class="string">&quot;at&quot;</span>, <span class="string">&quot;ond&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// cond, bat, sat, fat</span></span><br><span class="line"></span><br><span class="line">result = text.replace(<span class="regexp">/at/g</span>, <span class="string">&quot;ond&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// cond, bond, sond, fond</span></span><br></pre></td></tr></table></figure><p>第二个参数是字符串时, 有几个特殊的字符序列, 可以用来插入正则表达式操作的数;</p><table><thead><tr><th>字符序列</th><th>替换文本</th></tr></thead><tbody><tr><td>$$</td><td>$</td></tr><tr><td>$&amp;</td><td>匹配整个模式的子字符串, 与 RegExp.lastMatch 相同</td></tr><tr><td>$’</td><td>匹配的子字符串之前的字符串, 与 RegExp.rightContext 相同</td></tr><tr><td>$`</td><td>匹配的子字符串之后的字符串, 与 RegExp.leftContext 相同</td></tr><tr><td>$n</td><td>匹配第 n 个捕获组的字符串, 其中 n 是 0-9, 如果没有捕获组则值为空值</td></tr><tr><td>$nn</td><td>匹配第 nn 个捕获组字符串, 其中 nn 是 01-99, 如果没有捕获组, 则值为空字符串</td></tr></tbody></table><p>使用这些特殊的序列, 可以在替换文本中使用之前匹配的内容:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> result = text.replace(<span class="regexp">/(.at)/g</span>, <span class="string">&quot;word ($1)&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// word (cat), word(bat), word(sat), word(fat)</span></span><br></pre></td></tr></table></figure><p>replace()方法的第二个参数可以是一个函数, 在只有一个匹配项时, 这个函数会收到三个参数: 与整个模式匹配的字符串, 匹配项在字符串中的开始位置, 以及整个字符串; 在有多个捕获组的情况下, 每个匹配捕获组的字符串也会作为参数传递给这个函数, 但最后两个参数还是与整个模式匹配的开始位置和原始字符串; 这个函数应该返回一个字符串, 表示将匹配到的字符串替换为什么; </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlEscape</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> text.replace(<span class="regexp">/[&lt;&gt;&quot;&amp;]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match, pos, originalString</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (match) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;&lt;&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&amp;lt;&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;&gt;&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&amp;gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;&amp;&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&amp;amp;&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;\&quot;&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&amp;quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h4><p>该方法根据传入的分隔符将字符串拆分成数组; 作为分隔符的参数可以是字符串, 也可以是 RegExp 对象, 还可以传入第二个参数, 即数组的大小, 确保返回的数组不会超过指定大小</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colorText = <span class="string">&quot;red, blue, green, yellow&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> color1 = colorText.split(<span class="string">&quot;,&quot;</span>); <span class="comment">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;yellow&quot;]</span></span><br><span class="line"><span class="keyword">let</span> color2 = colorText.split(<span class="string">&quot;,&quot;</span>, <span class="number">2</span>); <span class="comment">// [&quot;red&quot;, &quot;blue&quot;]</span></span><br><span class="line"><span class="keyword">let</span> color3 = colorText.split(<span class="regexp">/[^,]+/</span>); <span class="comment">// </span></span><br></pre></td></tr></table></figure><h4 id="localeCompare"><a href="#localeCompare" class="headerlink" title="localeCompare()"></a>localeCompare()</h4><p>比较字符串和字符串参数的排序, 如果字符串应该排在字符串参数前面, 则返回-1, 如果字符串应该排在字符串参数后面, 则返回 1; 如果字符串和字符串参数相等, 则返回 0;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;yellow&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(stringValue.localeCompare(<span class="string">&quot;brick&quot;</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.localeCompare(<span class="string">&quot;yellow&quot;</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.localeCompare(<span class="string">&quot;zoo&quot;</span>)); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><hr><h2 id="单例内置对象"><a href="#单例内置对象" class="headerlink" title="单例内置对象"></a>单例内置对象</h2><p>内置对象的定义就是由 js 实现提供, 与宿主环境无关, 并在 js 程序开始执行时就存在的对象; Object, Array, String, Global, Math 这些都是内置对象;</p><h3 id="Global"><a href="#Global" class="headerlink" title="Global"></a>Global</h3><p>Global 对象是最特别的对象, 因为代码不会显示访问它; Global 对象是一种兜底对象, 它所针对的是不属于任何对象的属性和方法; 实际上, 不存在全局变量或全局函数这种东西, 在全局作用域定义的变量和函数都会变成 Global 对象的属性; 之前介绍的 isNaN(), isFinite(), parseInt()和 parseFloat(), 实际上都是 Global 对象的方法;</p><p>获取 Global 对象的方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> gloabl = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当一个函数在没有明确通过某个对象的方法, 或者通过 call()/apply()指定 this 的情况下执行时, this 的值等于 Global 对象;</span></span><br><span class="line"><span class="comment">// 因此可以通过简单调用一个返回 this 对象的函数在任何上下文中快速获取 Global 对象</span></span><br></pre></td></tr></table></figure><h4 id="encodeURI-encodeURIComponent"><a href="#encodeURI-encodeURIComponent" class="headerlink" title="encodeURI(), encodeURIComponent()"></a>encodeURI(), encodeURIComponent()</h4><p>这两个方法都是用于对 url 进行编码; 区别在于, encodeURI() 不会编码属于 URL 组件的特殊字符, 比如冒号, 斜杠,问号,井号; 而在encodeURIComponent()方法中, 会编码所有的非标准字符;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">&quot;http://www.wrox.com/illegal value.js#start&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">encodeURI</span>(url)); <span class="comment">// &quot;http://www.wrox.com/illegal%20value.js#start&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">encodeURIComponent</span>(url)); <span class="comment">// &quot;http%3A%2F%2Fwww.wrox.com%2Fillegal%20value.js%23start&quot;</span></span><br></pre></td></tr></table></figure><h4 id="decodeURI-和-decodeURIComponent"><a href="#decodeURI-和-decodeURIComponent" class="headerlink" title="decodeURI()和 decodeURIComponent()"></a>decodeURI()和 decodeURIComponent()</h4><p>decodeURI()只对使用 ecnodeURI()编码过的字符进行解码; decodeURIComponent()对使用了 encodeURIComponent()进行解码;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uri = <span class="string">&quot;http%3A%2F%2Fwww.wrox.com%2Fillegal%20value.js%23start&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// http%3A%2F%2Fwww.wrox.com%2Fillegal value.js%23start </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">decodeURI</span>(uri));</span><br><span class="line"></span><br><span class="line"><span class="comment">// http:// www.wrox.com/illegal value.js#start </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">decodeURIComponent</span>(uri));</span><br></pre></td></tr></table></figure><h4 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h4><p>这个方法应该是整个 js 中最强大的方法了, 这个方法就是一个完整的 js 解释器, 它接受一个参数, 就是一个要执行的 javascript 字符串;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;console.log(&#x27;hi&#x27;)&quot;</span>);</span><br></pre></td></tr></table></figure><p>通过 eval() 执行的代码属于该调用所在的上下文, 被执行的代码与该上下文拥有相同的作用域链, 所以定义在包含上下文中的变量都可以在 eval() 调用内部被引用; </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> msg = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;console.log(msg)&quot;</span>); <span class="comment">// hello world</span></span><br></pre></td></tr></table></figure><p>也可以在 eval()内部定义一个函数或者变量, 然后再外部代码中引用;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;function sayHi()&#123;console.log(&#x27;hi&#x27;)&#125;;&quot;</span>); </span><br><span class="line">sayHi();</span><br></pre></td></tr></table></figure><p>通过 eval()定义的任何变量和函数都不会被提升, 这是因为在解析代码的时候, 它们是被包含在一个字符串中的, 它们只在 eval() 执行的时候才会被创建;</p><p>在严格模式下, 在 eval()内部创建的变量和函数无法被外部访问; 在严格模式下, 给 eval 赋值也会报错;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span> = <span class="string">&quot;hi&quot;</span>; <span class="comment">// 报错 严格模式下无法给 eval 赋值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;function sayHi()&#123;console.log(&#x27;hi&#x27;)&#125;&quot;</span>);</span><br><span class="line">sayHi(); <span class="comment">// 报错, 严格模式下外部无法访问 eval 内部定义的函数和变量</span></span><br></pre></td></tr></table></figure><h4 id="Global-对象的属性"><a href="#Global-对象的属性" class="headerlink" title="Global 对象的属性"></a>Global 对象的属性</h4><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>undefined</td><td>特殊值 undefined</td></tr><tr><td>NaN</td><td>特殊值 NaN</td></tr><tr><td>Infinity</td><td>特殊值 Infinity</td></tr><tr><td>Object</td><td>Object 的构造函数</td></tr><tr><td>Array</td><td>Array 的构造函数</td></tr><tr><td>Function</td><td>Function 的构造函数</td></tr><tr><td>Boolean</td><td>Boolean 的构造函数</td></tr><tr><td>String</td><td>String 的构造函数</td></tr><tr><td>Number</td><td>Number 的构造函数</td></tr><tr><td>Date</td><td>Date 的构造函数</td></tr><tr><td>RegExp</td><td>RegExp 的构造函数</td></tr><tr><td>Symbol</td><td>Symbol 的伪构造函数</td></tr><tr><td>Error</td><td>Error 的构造函数</td></tr><tr><td>EvalError</td><td>EvalError 的构造函数</td></tr><tr><td>RangeError</td><td>RangeError 的构造函数</td></tr><tr><td>ReferenceError</td><td>ReferenceError 的构造函数</td></tr><tr><td>SyntaxError</td><td>SyntaxError 的构造函数</td></tr><tr><td>TypeError</td><td>TypeError 的构造函数</td></tr><tr><td>URIError</td><td>URIError 的构造函数</td></tr></tbody></table><h4 id="window-对象"><a href="#window-对象" class="headerlink" title="window 对象"></a>window 对象</h4><p>虽然没有规定直接访问 Global 对象的方式, 但是浏览器将 window 对象实现为 Global 对象的代理; 因此所有全局作用域中声明的变量和函数都变成了 window 的属性;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.sayColor(); <span class="comment">// &quot;red&quot;</span></span><br></pre></td></tr></table></figure><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Javascript 中的对象称为引用值, 几种内置的引用类型可用于创建特定类型的对象;</p><ul><li>  引用值与传统面向对象编程中的类相似, 但是实现不同</li><li>  Date 类型提供关于日期和时间的信息, 包括当前日期,时间及相关计算</li><li>  RegExp 类型通过了支持正则的接口, 提供了大多数的正则表达式</li><li>  函数实际上是 Function 类型的实例, 也就是说函数也是对象, 以为函数也是对象, 所以函数也有方法, 可以增强其能力;</li><li>3 种原始值包装类型<ul><li>  Boolean, Number, String</li><li>  每种包装类型都映射到同名的原始类型</li><li>  以读模式访问原始值时, 后台会实例化一个原始值的包装类型的对象, 借助这个对象可以操作操作相应的方法</li><li>  涉及原始值的语句执行完毕, 包装对象就会销毁;</li></ul></li><li>  在代码开始执行的时候, 全局上下文中会存在两个内置对象: Global 和 Math; 其中 Global 对象在大多数情况下无法直接访问, 不过可以通过浏览器实现的 window 来访问; 所有的全局变量和函数都是 Global 对象的属性;</li></ul>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js_变量/作用域/内存</title>
      <link href="js_variability/"/>
      <url>js_variability/</url>
      
        <content type="html"><![CDATA[<h2 id="原始值和应用值"><a href="#原始值和应用值" class="headerlink" title="原始值和应用值"></a>原始值和应用值</h2><p>变量可以包含两种不同的类型, 原始值和引用值;</p><p>原始值就是最简单的数据; undefined, null, boolean, number, string 和 symbol; 保存原始值的变量是按值访问的, 因为我们操作的就是存储在变量中的实际值;</p><p>引用值就是由多个值构成的对象; 引用值是保存在内存中的对象, js 中不允许直接访问内存位置, 所以实际操作中是操作了该对象的引用而非实际的对象本身; 保存引用值的变量是按引用访问;</p><h3 id="动态属性"><a href="#动态属性" class="headerlink" title="动态属性"></a>动态属性</h3><p>对于引用值而言, 可以随时添加, 修改和删除其属性和方法;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.name = <span class="string">&quot;Nicholas&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// &quot;Nicholas&quot;</span></span><br></pre></td></tr></table></figure><p>原始值不能有属性, 虽然不会报错, 但是给原始值增加属性并赋值没有意义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;kevin&quot;</span>;</span><br><span class="line">name.age = <span class="number">27</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name.age); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>原始类型的初始化可以只适用原始字面量形式, 如果使用 new 关键字, 则 js 会创建一个 Object 类型的实例, 这个实例是支持动态属性的;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name1 = <span class="string">&quot;Nicholas&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> name2 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;matt&quot;</span>);</span><br><span class="line"></span><br><span class="line">name1.age = <span class="number">27</span>;</span><br><span class="line">name2.age = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name1.age); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(name2.age); <span class="comment">// 26</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> name1); <span class="comment">// string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> name2); <span class="comment">// object</span></span><br></pre></td></tr></table></figure><h3 id="复制值"><a href="#复制值" class="headerlink" title="复制值"></a>复制值</h3><p>原始值和引用值在复制时也是不同的; </p><p>原始值会被复制到新变量的位置, 新变量和原变量的原始值相同但是完全独立; 新变量的改变不会影响原变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> num2 = num1;</span><br><span class="line"></span><br><span class="line">num1 += <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num2); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>引用值在复制的时候, 实际上是将原变量的指针复制给了新变量, 此时新变量和原变量指向同一个存储在内存中的对象, 两个变量实际上是指向了同一个对象, 因此一个对象上面的变化会在另一个对象上体现出来;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">let</span> obj2 = obj1;</span><br><span class="line"></span><br><span class="line">obj1.name = <span class="string">&quot;kevin&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.name); <span class="comment">// kevin</span></span><br></pre></td></tr></table></figure><h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><p>es 中所有函数的参数都是按值传递的, 这意味着函数外的值都会被复制到函数内部的参数中, 就像从一个变量复制到另一个变量一样; 如果是原始值, 那么就和原始值变量的复制一样, 如果是引用值, 那么就和引用值变量的复制一样; </p><p>在按值传递参数时, 值会被复制到一个局部变量中; </p><p>原始值案例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTen</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    num += <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> result = addTen(count);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(count); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><p>引用值案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    obj.name = <span class="string">&quot;kevin&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">setName(person);</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// kevin</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    obj.name = <span class="string">&quot;kevin&quot;</span>;</span><br><span class="line">    obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    obj.name = <span class="string">&quot;new name&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">setName(person);</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// kevin</span></span><br></pre></td></tr></table></figure><h3 id="确定类型"><a href="#确定类型" class="headerlink" title="确定类型"></a>确定类型</h3><p>typeOf 操作符适合用来判断数据是否是基础数据类型: undefined, boolean, string, number 这几种; 如果值是对象或者 Object, 那么 typeOf 返回 “object”; typeOf 在检测任何实现了内部 Call 方法的对象时, 都会返回 function;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&quot;Nicholas&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">22</span>;</span><br><span class="line"><span class="keyword">let</span> u;</span><br><span class="line"><span class="keyword">let</span> n = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(typeOf s); <span class="comment">// string</span></span><br><span class="line"><span class="built_in">console</span>.log(typeOf b); <span class="comment">// boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(typeOf i); <span class="comment">// number</span></span><br><span class="line"><span class="built_in">console</span>.log(typeOf u); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(typeOf n); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(typeOf o); <span class="comment">// object</span></span><br></pre></td></tr></table></figure><p>typeOf 虽然对原始值的作用很大, 但是在引用值的时候作用不大; 我们通常使用 instanceof 来判断变量是什么类型的对象;</p><p><code> result = variable instanceof constructor</code></p><p>如果变量是给定引用类型的实例, 则 instanceof 操作符返回 true;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// 变量 person 是 Object 么</span></span><br><span class="line"><span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// person 是 Array 么</span></span><br><span class="line"><span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>); <span class="comment">// person 是 RegExp 么</span></span><br></pre></td></tr></table></figure><h2 id="执行上下文与作用域"><a href="#执行上下文与作用域" class="headerlink" title="执行上下文与作用域"></a>执行上下文与作用域</h2><p>执行上下文的概念在 js 中很重要, 变量或者函数的上下文决定了它们可以访问哪些数据; 每个上下文都有一个关联的变量对象, 而这个上下文中定义的所有变量和函数都存在于这个对象上; 虽然无法通过代码访问变量对象, 但是后台处理数据会用到它;</p><p>全局上下文是最外层的上下文, 在浏览器中, 全局上下文就是 window 对象, 因此所有通过 var 定义的全局变量和函数都会称为 window 对象的属性和方法; 使用 let 和 const 的顶级声明不会定义在全局上下文中, 但是作用域链解析上效果是一样的;</p><p>上下文在其所有代码都执行完毕后会自动销毁, 包括定义在它上面的所有变量和函数 (全局上下文在应用程序退出前才会被销毁, 比如关闭网页或者退出浏览器)</p><p>每个函数调用都有自己的上下文, 当代码流进入到函数时, 函数的上下文被推到一个上下文栈中;  在函数执行完毕后, 上下文栈会弹出该函数上下文,将控制权还给之前的执行上下文; 在 es 中, 函数的执行流就是通过这个上下文栈进行控制;</p><p>上下文中的代码在执行的时候, 会创建变量对象的一个作用域链 scope chain; 这个作用域链决定了各级上下文中的代码在访问变量和函数时的顺序; 代码正在执行的上下文的变量对象始终位于作用域链的最前端; 如果上下文是函数, 则其活动对象用作变量对象; 活动对象最初只有一个定义变量, arguments (全局上下文中没有这个变量) ; 作用域链的下一个变量对象来自包含上下文, 再下一个对象来自下一个包含上下文, 以此类推直至全局上下文; 全局上下文的变量对象始终是作用域链的最后一个变量对象;</p><p>代码执行时的标识符解析是通过沿作用域链逐级搜索标识符名称完成的, 搜索过程始终从作用域链的最前端开始, 然后逐级往后, 直到找到标识符;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (color === <span class="string">&quot;blue&quot;</span>)&#123;</span><br><span class="line">        color = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        color = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeColor();</span><br><span class="line"><span class="built_in">console</span>.log(color) <span class="comment">// red</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// changeColor() 的作用域链包含两个对象, 一个是它自己的变量对象 arguments; 另一个是全局上下文的变量对象, 这个函数内部之所以能够访问</span></span><br><span class="line"><span class="comment">// 变量 color, 就是因为可以在作用域链中找到它;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> anotherColor = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">swapColors</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> tempColor = anotherColor;</span><br><span class="line">        anotherColor = color;</span><br><span class="line">        color = tmepColor;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 这里可以访问到 tempColor, anotherColor 和 tempColor</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 可以访问 color 和 anotherColor, 但是无法访问 let 定义变量 tempColor</span></span><br><span class="line">    swapColors();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里只能访问到 color</span></span><br><span class="line">changeColor();</span><br></pre></td></tr></table></figure><p>以上代码涉及到 3 个上下文; 全局上下文, changeColor()的局部上下文和swapColors()的局部上下文; 全局上下文中有一个变量 color 和一个函数 changeColor(); changeColor()的局部上下文中有一个变量 anotherColor 和一个函数 swapColors(), 在这里可以访问全局上下文中的变量 color; swapColors()的局部上下文中有一个变量 tempColor, 只能在这个上下文中访问到, 全局上下文和 changeColor()的局部上下文都无法访问到 tempColor; 而在 swapColors()中则可以访问另外两个上下文中的变量, 因为它们都是父上下文;</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-07-07-023004.png"></p><ol><li> 内部上下文可以通过作用域链访问外部上下文中的一切;</li><li> 外部上下文无法访问内部上下文中的任何东西;</li><li> 上下文之间的连接都是线性的, 有序的;</li></ol><h3 id="作用域增强"><a href="#作用域增强" class="headerlink" title="作用域增强"></a>作用域增强</h3><p>虽然执行上下文主要有全局上下文和函数上下文两种, (eval() 调用内部存在第三种上下文); 但有其他方式来增强作用域链; 某些语句会导致在作用域前端临时添加一个上下文, 这个上下文在代码执行后会被删除; </p><ol><li> try/catch 语句的 catch 块: catch 语句会创建一个新的变量对象, 这个变量对象会包含要抛出的错误对象的声明;</li><li> with 语句: 会向作用域链前端添加指定的对象;</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildUrl</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> qs = <span class="string">&quot;?debug=true&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> (location) &#123;</span><br><span class="line">        <span class="keyword">let</span> url = href + qs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里, with 语句将 location 对象作为上下文, 因此 location 会被添加到作用域链前端; buildUrl() 函数定义了一个变量 qs; 当 with 语句中的代码引用了变量 href 时, 实际上引用了 location.href; 也就是自己变量对象的属性; 在引用 qs 时, 引用的则是定义在 buildUrl()中的那个变量, 它定义在函数上下文的变量对象上; 而在 with 语句中使用 var 声明的变量 url 会成为函数上下文的一部分, 可以作为函数的值被返回, 但像这里使用 let 声明的变量 url, 因为被限制在块级作用域, 所以 with 块之外没有定义;</p><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><h4 id="使用-var-的函数作用域声明"><a href="#使用-var-的函数作用域声明" class="headerlink" title="使用 var 的函数作用域声明"></a>使用 var 的函数作用域声明</h4><p>在使用 var 声明变量时, 变量会被自动添加到最接近的上下文; 在函数中, 最接近的上下文就是函数的局部变量上下文; 在 with 语句中, 最接近的上下文也是函数上下文; 如果变量未经声明就被初始化了, 那么它就会自动添加到全局上下文;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = num1 + num2;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = add(<span class="number">10</span>, <span class="number">20</span>); <span class="comment">// 30</span></span><br><span class="line"><span class="built_in">console</span>.log(sum);  <span class="comment">//报错, sum 在这里不能获取</span></span><br></pre></td></tr></table></figure><p>在下面的案例中, sum 在被用到加法操作的结果初始化时并没有使用 var 进行声明, 在调用 add() 之后, sum 被添加到了全局上下文, 在函数退出之后依然存在, 从而在后面可以访问到;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2</span>)</span>&#123;</span><br><span class="line">    sum = num1 + num2;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = add(<span class="number">10</span>,<span class="number">20</span>); <span class="comment">// 30</span></span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><p>var 声明会被拿到函数或者全局作用域的顶部, 位于作用域中所有代码之前, 这个现象叫做 “提升”; 提升可以让同一个作用域的代码不用考虑变量是否已经声明就可以直接使用; 但是实际编程中, 会出现很多问题:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;jake&quot;</span>;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">name = <span class="string">&quot;jake&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;jake&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name;</span><br><span class="line">    name = <span class="string">&quot;jake&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过在变量声明之前打印变量, 可以验证变量会被提升; 声明的提升会意味着输出 undefined 而不是 Reference Error</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testB</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b); <span class="comment">// undefined</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="string">&quot;kevin&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-let-的块级作用域声明"><a href="#使用-let-的块级作用域声明" class="headerlink" title="使用 let 的块级作用域声明"></a>使用 let 的块级作用域声明</h4><p>let 关键字和 var 很相似, 它的作用域是块级的; 块级作用域由最新的一对包含花括号界定; if 块, while 块, function 块甚至单独的块也是 let 声明变量的作用域;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// referenceError: a 没有定义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// referenceError: b 没有定义</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// referenceError: c 没有定义</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> d = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// referenceError: d 没有定义</span></span><br></pre></td></tr></table></figure><p>let 和 var 的另一个区别是在同一个作用域下, 不能声明两次相同的变量; 重复的 var 声明会被忽略, 而重复的 let 声明会抛出 SyntaxError</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="comment">// 不会报错</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> b;</span><br><span class="line">    <span class="keyword">let</span> b; <span class="comment">// SyntaxError: 标识符 b 已经声明过了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>let 的作用域非常适合在循环中声明迭代变量, 使用 var 声明的迭代变量会泄漏到循环外部, 这种情况应该避免;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)&#123;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(j); <span class="comment">// ReferenceError: j 没有定义</span></span><br></pre></td></tr></table></figure><h4 id="使用-const-的常量声明"><a href="#使用-const-的常量声明" class="headerlink" title="使用 const 的常量声明"></a>使用 const 的常量声明</h4><p>使用 const 声明的变量必须同时初始化为某个值; 一经声明, 在其生命周期的任何时候都不能再重新赋值;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a; <span class="comment">// syntaxError: 常量声明时没有初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">4</span>; <span class="comment">// typeError: 给常量赋值</span></span><br></pre></td></tr></table></figure><p>赋值为对象的 const 变量不能再被重新赋值为其他引用值, 但是对象的键不受影响</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o1 = &#123;&#125;;</span><br><span class="line">o1 = &#123;&#125;; <span class="comment">// typeError: 对常量赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o2 = &#123;&#125;;</span><br><span class="line">o2.name = <span class="string">&quot;kevin&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o2.name); <span class="comment">// kevin</span></span><br></pre></td></tr></table></figure><p>如果想让整个对象都不能修改, 则可以使用 <code>Object.freeze()</code>, 这样再给属性赋值时虽然不会报错, 但是会静默失败</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o3 = <span class="built_in">Object</span>.freeze(&#123;&#125;);</span><br><span class="line">o3.name = <span class="string">&quot;kevin&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o3.name); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h4 id="标识符查找"><a href="#标识符查找" class="headerlink" title="标识符查找"></a>标识符查找</h4><p>当在特定上下文中为读取或写入而引用一个标识符时, 必须通过搜索确定这个标识符表示什么; 搜索开始与作用域链前端, 以给定的名称搜索对应的标识符; 如果在局部上下文中找到了该标识符, 则搜索停止, 变量确定个; 如果没有找到变量名, 则继续沿用作用域链搜索; (注意, 作用域链中的对象也有一个原型链, 因此搜索可能会涉及每个对象的原型链); 这个过程一直持续到搜索至全局上下文的变量对象; 如果仍然没有找到标识符, 则说明其未声明;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getColor()); <span class="comment">// blue</span></span><br></pre></td></tr></table></figure><p>调用函数 <code>getColor()</code>时会引用变量 color; 为确定 color 的值会进行两步搜索, 第一步搜索 <code>getColor()</code>的变量对象, 查找到名为 color 的标识符; 如果没找到, 则继续搜索下一个变量对象(来自全局上下文),  然后就找到了名为 color 的标识符; 因为在全局变量对象上有 color 的定义, 所以搜索结束;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> color = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> color</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getColor()); <span class="comment">// red</span></span><br></pre></td></tr></table></figure><p>对于这个搜索而言, 局部变量会让搜索自动停止, 而不会再继续去搜索下一级变量对象; 如果局部上下文中有一个同名的标识符, 那就不能在该上下文中引用父上下文中的同名标识符; 这个在 var, let 声明的变量中都是一样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> color = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> color = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getColor()); <span class="comment">// red</span></span><br></pre></td></tr></table></figure><h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><p>js 是使用垃圾回收的语言, 也就是说执行环境负责在代码执行时管理内存, 通过自动内存管理分配和闲置资源回收; 基本思路就是: 确定哪个变量不会再使用了, 然后释放它占用的内存; 这个过程是周期性的, 每隔一段时间就会自动执行一次垃圾回收; </p><h4 id="标记清理"><a href="#标记清理" class="headerlink" title="标记清理"></a>标记清理</h4><p>js 中最常用的垃圾回收策略是标记清理; 当变量进入上下文, 比如在函数内部声明一个变量时, 这个变量会被加上存在于上下文中的标记; 而在上下文中的变量逻辑上讲永远不应该释放它的内存, 因为只要在上下文中的代码在运行, 就有可能会用到它们; 当变量离开上下文, 则会被加上离开上下文的标记;</p><p>垃圾回收程序运行的时候, 会标记内存中存储的所有变量, 然后, 将所有还在上下文中的变量, 以及被在上下文中的变量引用的变量的标记去掉; 在此之后还有存在标记的变量就是待删除的变量, 因为任何在上下文中的变量都不会访问到他们; 随后垃圾回收程序做一次内存清理, 销毁带标记的所有值并收回他们的内存;</p><h4 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h4><p>另一种没有那么常用的垃圾回收策略是引用计数, 思路是: 对每个值都记录它被引用的次数, 声明变量并给它们赋值时, 这个值得引用数为 1; 如果同一个值又被赋给另一个变量, 那么引用数加 1; 如果保存对该值引用的变量被其他值给覆盖了, 那么引用数减1; 当一个值得引用值为 0 时, 就说明没办法再访问到这个值了, 因此可以安全的删除其内存了; 垃圾回收程序下次运行的时候会释放引用数为 0 的值得内存;</p><p>但是引用计数存在很多问题, 比如典型的循环引用 : 案例中的 objA 和 objB 通过各自的属性相互引用, 意味着他们的引用数都是 2, 在标记清理策略下, 在函数结束后, 这两个对象都不在作用域中, 会被清理; 在引用计数策略下, objA 和 objB 在函数结束后还会存在, 因为它们的引用数永远都不会是 0; 如果函数被多次调用则会造成内存泄漏的问题;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">problem</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> objA = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    <span class="keyword">let</span> objB = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    </span><br><span class="line">    objA.someOtherObj = objB;</span><br><span class="line">    objB.someOtherObj = objA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h4><p>优化内存占用的最佳手段就是保证在执行代码时只要保存必要的数据; 如果数据不再必要, 那么就把它设置为 null; 从而释放其引用; 这也叫做释放引用; 这种优化内存的方式很适合全局变量和全局对象的属性; 局部变量在超出作用域后会被自动解除;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> localPerson = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    localPerson.name = name;</span><br><span class="line">    <span class="keyword">return</span> localPerson;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> globalPerson = createPerson(<span class="string">&quot;Nicholas&quot;</span>);</span><br><span class="line"><span class="comment">// 手动解除对 globalPerson 的引用</span></span><br><span class="line">globalPerson = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>javascript 变量可以保存两种类型的值, 原始值和引用值; 原始值可能是以下 6 种原始数据类型之一: undefined, null, boolean, number, string 和 symbol;</p><ol><li> 原始值大小固定, 保存在栈内存上</li><li> 从一个变量到另一个变量复制原始值会创建该值得第二个副本;</li><li> 引用值是对象, 存储在堆内存中;</li><li> 包含引用值的变量实际上只包含指向相应对象的指针, 而不是对象本身;</li><li> 从一个变量到另一个变量复制引用值只会复制指针, 因此结果是两个变量指向了同一个对象;</li><li> typeof 操作符可以确定值的原始类型, 而 instanceof 操作符可以用于确保值的引用类型</li><li> 执行上下文分为: 全局上下文, 函数上下文和块上下文</li><li> 代码执行流没进入一个新上下文, 都会创建一个作用域链, 用于搜索变量和函数</li><li> 函数或块的局部上下文不仅可以访问自己作用域内的变量, 而且也可以访问任何包含包含上下文乃至全局上下文中的变量</li><li> 全局上下文只能访问全局上下文中的变量和函数, 不能直接访问局部上下文的任何数据</li><li> 变量的执行上下文用于确定什么时候释放内存</li></ol>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js_语句</title>
      <link href="js_statement/"/>
      <url>js_statement/</url>
      
        <content type="html"><![CDATA[<h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><p><code>if (condition) statement1 else statement2</code></p><p>这里的条件 condition 可以是任何表达式, 并且求值结果不一定是布尔值; es 中会自动调用 Boolean() 函数将 condition 的结果转换成布尔值; 如果条件成立为 true, 则执行 statement1 语句, 如果条件不成立,为 false, 则执行 statement2 语句;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">25</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;more than 25&quot;</span>); </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;less than 25&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以连续多个 if 语句</p><p><code>if (condition) statement1 else if (condition2) statement2 else statement3</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">25</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;more than 25&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (i &lt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;less than 0&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;between 0 and 25&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="do-while-语句"><a href="#do-while-语句" class="headerlink" title="do-while 语句"></a>do-while 语句</h3><p>do-while 语句是一种后测试循环语句, 即循环体中的代码执行后才会对退出条件进行求值; 换句话说, 循环体的代码至少执行一次;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// statement</span></span><br><span class="line">&#125;<span class="keyword">while</span> (expression); </span><br></pre></td></tr></table></figure><p>案例如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    i += <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure><blockquote><p>  后测试循环经常用于这种情形, 循环体内代码在退出前至少需要执行一次</p></blockquote><hr><h3 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a>while 语句</h3><p>while 语句是一种先测试循环语句, 即先检测退出条件, 再执行循环体内的代码; 因此 while 循环体内的代码有可能不执行;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>)&#123;</span><br><span class="line">    i += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h3><p>for 语句也是一种先测试语句, 只不过增加了进入循环之前的初始化代码. 以及循环执行后要执行的表达式;</p><p><code>for (init; expression; post-loop-expression) statement</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 for 循环中, 初始化, 条件表达式和循环后表达式都不是必须的, 因此可以省略成下面的死循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;;) &#123;</span><br><span class="line">    <span class="comment">// 无限循环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="for-in-语句"><a href="#for-in-语句" class="headerlink" title="for-in 语句"></a>for-in 语句</h3><p>for-in 语句是一种严格的迭代语句, 用于枚举对象中的非符号键属性;</p><p><code>for ( property in expression ) statement</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> propName <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(propName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 for in 语句循环迭代的变量是 null 或 undefined, 那么就不执行循环体;</p><hr><h3 id="for-of-语句"><a href="#for-of-语句" class="headerlink" title="for-of 语句"></a>for-of 语句</h3><p>for of 语句是一种严格的迭代语句, 用于遍历可迭代对象的元素; </p><p><code>for ( property of expression ) statement</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> el <span class="keyword">of</span> [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>])&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(el);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面案例使用了 for of 语句遍历了包含 4 个元素的数组中的所有元素; for of 循环会按照可迭代对象的 next() 方法产生值的顺序迭代元素;</p><hr><h3 id="标签语句"><a href="#标签语句" class="headerlink" title="标签语句"></a>标签语句</h3><p>标签语句用于给语句加标签, 语法如下:</p><p><code>label: statement</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start: <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述案例中,  start 是一个标签, 可以在后面通过 break 和 continue 语句引用, 标签语句的典型应用场景是嵌套循环;</p><hr><h3 id="break-和-continue"><a href="#break-和-continue" class="headerlink" title="break 和 continue"></a>break 和 continue</h3><p>break: 用于立即退出循环, 强制执行循环后的下一条语句;</p><p>continue: 用于结束本次循环, 开始下一次循环;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// break case </span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    num++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// continue case</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><p>break 和 continue 都可以和标签语句一起使用, 返回代码中的特定位置, 在嵌套循环中经常使用;</p><p>break 和标签 label 使用, 会直接退出循环;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">outermost:</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j =<span class="number">0</span>; j&lt;<span class="number">10</span>; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span> &amp;&amp; j ==<span class="number">5</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span> outermost;</span><br><span class="line">        &#125;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 55</span></span><br></pre></td></tr></table></figure><p>continue 语句和标签 label 使用, 会跳过接下来的循环开始下一次循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">outermost:</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span> &amp;&amp; j == <span class="number">5</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span> outermost;</span><br><span class="line">        &#125;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 95</span></span><br></pre></td></tr></table></figure><hr><h3 id="with-语句"><a href="#with-语句" class="headerlink" title="with 语句"></a>with 语句</h3><p>with 语句的用途是将代码作用域设置为特定的对象, 语法为:</p><p><code>with (expression) statement;</code></p><p>使用 with 语句的主要场景是针对一个对象的反复操作, 这个时候将代码作用域设置为该对象, 可以提供便利;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> qs = location.search.substring(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> hostName = location.hostname;</span><br><span class="line"><span class="keyword">let</span> url = location.href;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用 with 进行简化</span></span><br><span class="line"><span class="keyword">with</span> (location) &#123;</span><br><span class="line">    <span class="keyword">let</span> qs = search.substring(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> hostName = hostname;</span><br><span class="line">    <span class="keyword">let</span> url = href;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>with 语句用于连接 location对象, 意味着在 with 代码块内部, 每个变量首先会被认为是一个局部变量, 如果没有找到该局部变量, 则会搜索 location 对象, 看看 location 对象是否有同名的属性, 如果有的话, 那么这个局部变量就是 location 对象同名的属性;</p><p>在严格模式下不允许使用 with 语句; 而且 with 语句会导致性能降低和难以调试其中代码, 不推荐使用;</p><hr><h3 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h3><p>switch 语句是与 if 语句紧密相关的一种流控制语句; </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (expression) &#123;</span><br><span class="line">    <span class="keyword">case</span> value1:</span><br><span class="line">        statement1</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> value2:</span><br><span class="line">        statement2</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> value3:</span><br><span class="line">        statement3</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        statement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个 case 相当于, 如果表达式 expression 的值等于 case 后面的值, 则执行该 case 下面的表达式; </p><p>如果没有 break, 则代码会继续匹配下一个条件;</p><p>default 关键字用于在任何条件都没有满足的情况下默认执行的语句;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">switch</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> num &lt; <span class="number">0</span>: <span class="comment">// 此处 case 的表达式会求值成 true or false</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;less than 0&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> num &gt;= <span class="number">0</span> &amp;&amp; num &lt;= <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;between 0 and 10&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> num &gt; <span class="number">10</span> &amp;&amp; num &lt;= <span class="number">20</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;between 10 and 20&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;more than 20&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数对于任何语言来说都是核心组件, 因为他可以封装语句, 在任何地方, 任何时间执行; es 中的函数使用 function 关键字声明, 后面跟一组参数, 然后是函数体; 格式为:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fcName</span> (<span class="params">arg0, arg1, arg2</span>)</span>&#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过函数名来调用函数, 要传给函数的参数放在括号内, 如果有多个参数, 则用逗号分隔;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name, message</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hello &quot;</span> + name + <span class="string">&quot;, &quot;</span> + message);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;you input name is &quot;</span> + name + <span class="string">&quot;, and message is &quot;</span> + message;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;return 之后的代码不会执行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> value = sayHi(<span class="string">&quot;kevin&quot;</span>, <span class="string">&quot;how are you today?&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br></pre></td></tr></table></figure><p>在严格模式中, 对函数也有限制</p><ol><li> 函数不能用 eval 或者 arguments 作为名称</li><li> 函数的参数不能叫 eval 或者 arguments</li><li> 两个命名参数不能拥有相同的名称</li></ol>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作符</title>
      <link href="js_operation/"/>
      <url>js_operation/</url>
      
        <content type="html"><![CDATA[<h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><ol><li> 操作符是用于操作数据的, 包括数学操作符, 位操作符, 关系操作符和相等操作符等; </li><li> 操作符是独特的, 因为它们可以用于各种值, 包括字符串, 数值, 布尔值, 甚至对象; </li><li> 在应用给对象时, 通常会调用<code>valueOf()</code>或者<code>toString()</code>方法来先获取可以操作的值;</li></ol><h3 id="一元操作符"><a href="#一元操作符" class="headerlink" title="一元操作符"></a>一元操作符</h3><p>只操作一个值的操作符叫做一元操作符;</p><h4 id="递增-递减"><a href="#递增-递减" class="headerlink" title="递增/递减"></a>递增/递减</h4><ol><li><p>递增和递减单独使用, 前置递增和后置递增没有区别, 前置递减和后置递减也没有区别</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递增和递减单独使用</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">1</span>;</span><br><span class="line">age++;</span><br><span class="line">++age;</span><br><span class="line">age--;</span><br><span class="line">--age;</span><br></pre></td></tr></table></figure></li><li><p>递增和递减参与其他运算, 前置递增递减先对变量进行递增递减操作, 再进行其他操作; 后置递增递减是进行其他操作, 最后再对变量进行递增递减操作;</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">29</span>; </span><br><span class="line"><span class="keyword">let</span> anotherAge = --age + <span class="number">2</span>; <span class="comment">// 先递减 age=age-1; 在进行加法 age=age+2  --&gt;  30</span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 28</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age1 = <span class="number">29</span>;</span><br><span class="line"><span class="keyword">let</span> anotherAge1 = age1-- + <span class="number">2</span>; <span class="comment">// 先进行 age + 2; 再进行递减 age = age - 1  --&gt;  31</span></span><br><span class="line"><span class="built_in">console</span>.log(age1); <span class="comment">// 28</span></span><br></pre></td></tr></table></figure></li><li><p>递增和递减可以用于所有数据类型</p><ol><li>对于字符串:<ol><li> 如果是有效数值形式, 那么转换成数值再进行递减和递减操作; 变量类型从字符串变为数值;</li><li> 如果不是有效数值形式, 则将变量的值设置为 NaN, 变量类型从字符串变为数值;</li></ol></li><li>对于布尔值:<ol><li> 如果是 false, 则转换为 0 再应用改变; 变量类型从布尔值变为数值;</li><li> 如果是 true, 则转换为 1 再应用改变;  变量类型从布尔值变量数值;</li></ol></li><li> 对于浮点数, 进行递增或者递减操作;</li><li> 对于对象: 先调用<code>valueOf()</code>方法取得可操作的值, 对得到的值应用上述规则; 如果是 NaN, 则调用<code>toString()</code>并再次应用上述规则; 变量类型从对象变为数值</li></ol></li></ol><h4 id="一元加减号"><a href="#一元加减号" class="headerlink" title="一元加减号"></a>一元加减号</h4><p>一元加号, 放在数值变量前面表示正号, 对数值没有任何影响;</p><p>用在非数值变量前, 则会执行<code>Number()</code>转型一样进行类型转换; 布尔值 false 和 true 转为 0 和 1; 字符串会根据特殊规则进行解析; 对象则会调用它们的<code>valueOf()</code>方法和<code>toString()</code>方法以得到可以转换的值;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="string">&quot;01&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="string">&quot;1.1&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> s3 = <span class="string">&quot;z&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">    <span class="function"><span class="title">valueOf</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;s1&quot;</span>, +s1);  <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;s2&quot;</span>, +s2); <span class="comment">// 1.1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;s3&quot;</span>, +s3); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;b&quot;</span>, +b); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;f&quot;</span>, +f); <span class="comment">// 1.1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;o&quot;</span>, +o); <span class="comment">// -1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一元减号</p><p>一元减号放在数值变量前, 主要就是用于把数值变成负值</p><p>一元减号放在非数值变量前面, 会先遵循与一元加同样的规则, 先对它们进行转换, 再对其取负值;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="string">&quot;01&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="string">&quot;1.1&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> s3 = <span class="string">&quot;z&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">    <span class="function"><span class="title">valueOf</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;s1&quot;</span>, -s1);  <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;s2&quot;</span>, -s2); <span class="comment">// -1.1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;s3&quot;</span>, -s3); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;b&quot;</span>, -b); <span class="comment">// -0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;f&quot;</span>, -f); <span class="comment">// -1.1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;o&quot;</span>, -o); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><hr><h3 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h3><p>位操作符, 是用于数值的底层操作, 也就是操作内存中表示数值的 bit 位;</p><p>在 es 中, 所有的数值都是使用 64 位格式进行存储的, 但是位操作并不直接作用在 64 位, 而是先把数值转成 32 位整数, 再进行位操作, 最后再将 32 位转成 64 位进行存储; 所以对于开发者而言, 64 位整数存储格式是不可见, 只需要考虑 32 位整数即可;</p><h4 id="按位非"><a href="#按位非" class="headerlink" title="按位非"></a>按位非</h4><p>按位非用波浪符~表示, 它的作用是返回一个数值的一补数; 按位非的最终效果就是对数值取反再减一</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">let</span> num2 = ~num;</span><br><span class="line"><span class="built_in">console</span>.log(num2); <span class="comment">// -26</span></span><br></pre></td></tr></table></figure><h4 id="按位与"><a href="#按位与" class="headerlink" title="按位与"></a>按位与</h4><p>按位与操作使用符号&amp;, 本质上就是将两个操作数的每一个位对齐, 然后基于真值表中的规则, 依次对每一位执行相应的与操作;</p><table><thead><tr><th>第一个数值的位</th><th>第二个数值的位</th><th>结果</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>0</td><td>0</td><td>0</td></tr></tbody></table><p>按位与操作只有在两个位都是 1 的时候返回 1, 有任何一位是 0,则都返回 0;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">25</span> &amp; <span class="number">3</span>; <span class="comment">// 11001 &amp; 00011</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h4 id="按位或"><a href="#按位或" class="headerlink" title="按位或"></a>按位或</h4><p>按位或使用管道符 | 表示; 同样有两个操作数</p><table><thead><tr><th>第一个数值位</th><th>第二个数值位</th><th>结果</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>0</td><td>0</td><td>0</td></tr></tbody></table><p>按位或操作, 至少一个位是 1 时返回 1, 两个都是 0 则返回 0</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">25</span> | <span class="number">3</span>; <span class="comment">// 11001 | 00011</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 11011  27</span></span><br></pre></td></tr></table></figure><h4 id="按位异或"><a href="#按位异或" class="headerlink" title="按位异或"></a>按位异或</h4><p>按位异或使用^来表示, 同样有两个操作数</p><table><thead><tr><th>第一个数的位</th><th>第二个数的位</th><th>结果</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>0</td><td>0</td><td>0</td></tr></tbody></table><p>按位异或操作, 当两个位上的数字不同时返回 1, 两个位上的数字相同时返回 0;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">25</span> ^ <span class="number">3</span>; <span class="comment">// 11001 ^ 00011</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 11010 // 26</span></span><br></pre></td></tr></table></figure><h4 id="左移"><a href="#左移" class="headerlink" title="左移"></a>左移</h4><p>左移操作符用两个小于号&lt;&lt;来表示, 会按照指定的位数将数值的所有位向左移动; 在左移过程中, 数值右端会出现空位, 左移会用 0 填充这些空位; 且左移会保留符号位; </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oldValue = <span class="number">2</span>; <span class="comment">// 0010</span></span><br><span class="line"><span class="keyword">let</span> newValue = oldValue &lt;&lt; <span class="number">5</span>; <span class="comment">// 001000000 // 64</span></span><br></pre></td></tr></table></figure><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-07-03-090941.png"></p><h4 id="有符号右移"><a href="#有符号右移" class="headerlink" title="有符号右移"></a>有符号右移</h4><p>有符号右移由两个大于号&gt;&gt;表示, 会将数值的所有 32位都向右移动, 同时保留符号; 有符号的右移实际上就是左移的逆运算; 有符号右移也会出现空位, 右移之后在左侧会出现空位, 且在符号位之后, es 中会自动使用符号位的值来填充这些空位;</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-07-03-091349.png"></p><h4 id="无符号右移"><a href="#无符号右移" class="headerlink" title="无符号右移"></a>无符号右移</h4><p>无符号的右移用三个大于号&gt;&gt;&gt;表示, 会将数值的所有的 32 位都向右移, 对于正数, 无符号右移与有符号右移结果相同, 对于负数而言, 有时候差异会很大; 无符号右移会给出现的空位补 0, 而不管符号位是什么;</p><hr><h3 id="布尔操作符"><a href="#布尔操作符" class="headerlink" title="布尔操作符"></a>布尔操作符</h3><h4 id="逻辑非"><a href="#逻辑非" class="headerlink" title="逻辑非"></a>逻辑非</h4><p>逻辑非操作符由一个叹号!表示, 可以用于任何值; 这个操作符无论应用在任何数据类型, 返回的都是布尔值; 规则如下</p><ol><li> 如果操作数是对象, 则返回 false</li><li> 如果操作数是空字符串, 则返回 true</li><li> 如果操作数是非空字符串, 则返回 false</li><li> 如果操作数是 0, 则返回 true</li><li> 如果操作数是非 0 (包括 Infinity), 则返回 false</li><li> 如果操作数是 null, 则返回 true</li><li> 如果操作数是 NaN, 则返回 true</li><li> 如果操作数是 undefined, 则返回 true</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(!<span class="literal">false</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(!<span class="string">&quot;blue&quot;</span>);<span class="comment">// false;</span></span><br><span class="line"><span class="built_in">console</span>.log(!<span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!<span class="literal">NaN</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!<span class="string">&quot;&quot;</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!<span class="number">1234</span>);<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>逻辑非也可以用于把任何任意值转为布尔值, 同时使用 !! 相当于调用了转型函数 Boolean(); 无论是什么数据类型, 使用 !! 都会返回该变量真实对应的布尔值, 和使用了 Boolean()效果一样;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(!!<span class="string">&quot;blue&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="literal">NaN</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="string">&quot;&quot;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="number">1224</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="逻辑与"><a href="#逻辑与" class="headerlink" title="逻辑与"></a>逻辑与</h4><p>逻辑与操作由两个 &amp;&amp; 符号表示, 真值表为:</p><table><thead><tr><th>第一个操作数</th><th>第二个操作数</th><th>结果</th></tr></thead><tbody><tr><td>true</td><td>true</td><td>true</td></tr><tr><td>false</td><td>true</td><td>false</td></tr><tr><td>true</td><td>false</td><td>false</td></tr><tr><td>false</td><td>false</td><td>false</td></tr></tbody></table><p>逻辑与操作可用于任何类型的操作数, 不限于布尔值; 如果有操作数不是布尔值, 则逻辑与并不一定返回布尔值; 规则如下:</p><ol><li> 如果第一个操作数是对象, 则返回第二个操作数</li><li> 如果第二个操作数是对象, 则只有第一个操作数是 true 才返回该对象;</li><li> 如果两个操作数都是对象, 则返回第二个操作数</li><li> 如果有一个操作数是 null, 则返回 null;</li><li> 如果有一个操作数是 NaN, 则返回 NaN;</li><li> 如果有一个操作数是 undefined, 则返回 undefined;</li></ol><p>逻辑与操作符是一种短路操作符, 意思就是如果第一个操作数决定了结果, 那么永远不会对第二个操作数求值; 对于逻辑与操作符来说, 如果第一个操作数是 false, 那么无论第二个操作数是什么值, 结果也不可能为 true; </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> found = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> result = (found &amp;&amp; someUndefined); <span class="comment">// 这里会出错, 但是并不会执行到后面, </span></span><br><span class="line"><span class="comment">// 因为短路操作, 第一个操作数 false 已经决定了 &amp;&amp;的结果为 false</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="逻辑或"><a href="#逻辑或" class="headerlink" title="逻辑或"></a>逻辑或</h4><p>逻辑或操作符由两个管道符 | | 表示;</p><table><thead><tr><th>第一个操作数</th><th>第二个操作数</th><th>结果</th></tr></thead><tbody><tr><td>true</td><td>true</td><td>true</td></tr><tr><td>true</td><td>false</td><td>true</td></tr><tr><td>false</td><td>true</td><td>true</td></tr><tr><td>false</td><td>false</td><td>false</td></tr></tbody></table><p>和逻辑与操作符相同, 如果有一个操作符不是布尔值, 那么逻辑或操作符也不一定返回布尔值;</p><ol><li> 如果第一个操作数是对象, 则返回第一个操作数</li><li> 如果第一个操作数求值为 false, 则返回第二个操作数</li><li> 如果两个操作数都是对象, 则返回第一个操作数</li><li> 如果两个操作数都是 null, 则返回 null</li><li> 如果两个操作数都是 NaN, 则返回 NaN</li><li> 如果两个操作数都是 undefined, 则返回 undefined</li></ol><p>逻辑或操作符也具有短路性, 只不过对于逻辑或而言, 第一个操作数求值为 true, 第二个操作数就不会再被求值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> found = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> result = (found || someUndefined); <span class="comment">// 第一个为 true, 则 || 短路直接返回第一个</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>利用这种特性, 可以避免给变量赋值 null 或者 undefined;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = preferredObject || backupObject;</span><br></pre></td></tr></table></figure><hr><h3 id="乘性操作符"><a href="#乘性操作符" class="headerlink" title="乘性操作符"></a>乘性操作符</h3><h4 id="乘法操作符"><a href="#乘法操作符" class="headerlink" title="乘法操作符"></a>乘法操作符</h4><p>乘法操作符由一个星号* 表示, 可以用于计算两个数值的乘积, 也可以进行一些特殊操作</p><ol><li> 如果两个操作数都是数值, 那么就执行常规乘法操作, 即两个正值相乘, 两个负值相乘结果也是正值; 正负不同, 相乘为负值; 如果不能表示该乘积则返回 Infinity 或者-Infinity;</li><li> 如果有任意一个操作数是 NaN, 则返回 NaN;</li><li> 如果是Infinity 乘以 0, 返回 NaN;</li><li> 如果是 Infinity 乘以非 0, 则根据第二个操作数的符号返回 Infinity 或者-Infinity</li><li> 如果是 Infinity 乘以 Infinity, 则返回 Infinity</li><li> 如果有不是数值的数据类型, 则先后台调用 Number()进行转型, 再按照上述规则进行计算</li></ol><h4 id="除法操作符"><a href="#除法操作符" class="headerlink" title="除法操作符"></a>除法操作符</h4><p>除法操作符由一个斜杠 / 表示; 用于计算第一个操作数和第二个操作数的商;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">66</span> <span class="comment">// 11;</span></span><br></pre></td></tr></table></figure><ol><li> 如果操作数是数值, 则执行常规的除法操作, 两个正数相除结果是正数, 两个负数相除, 结果是正数, 符号不同的两个数相除, 结果是负数;如果是 es 中不能表示的数, 则返回 Infinity 或者-Infinity</li><li> 如果有任何一个操作数是 NaN, 则返回 NaN;</li><li> 如果是 Infinity 除以 Infinity, 则返回 NaN;</li><li> 如果是 0 除以 0, 则返回 NaN;</li><li> 如果是非零数值除以 0, 则根据第一个操作数的符号返回 Infinity 或者 -Infinity</li><li> 如果是 Infinity 除以任何数值, 则根据第二个操作数的符号返回 Infinity 或者 -Infinity</li><li> 如果有不是数值的操作数, 则现在后台进行 Number()转型, 再应用上述规则进行判断</li></ol><h4 id="取模操作符"><a href="#取模操作符" class="headerlink" title="取模操作符"></a>取模操作符</h4><p>取模(余数) 操作符是一个百分比符号 % 表示;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">26</span> % <span class="number">5</span>;</span><br></pre></td></tr></table></figure><ol><li> 如果操作数是数值, 则执行常规的除法运算, 返回余数</li><li> 如果被除数是无限值, 除数是有限值, 则返回 NaN;</li><li> 如果被除数是有限值, 除数是 0, 则返回 NaN;</li><li> 如果是 Infinity 除以 Infinity, 则返回 NaN;</li><li> 如果被除数是有限值, 除数是无限值, 则返回被除数;</li><li> 如果被除数是 0, 除数不是 0, 则返回 0;</li><li> 如果有不是数值的操作数, 则现在后台用 Number() 函数转换类型, 再根据上述规则进行计算;</li></ol><h4 id="指数操作符"><a href="#指数操作符" class="headerlink" title="指数操作符"></a>指数操作符</h4><p>es7 中新增了指数操作符, <code>Math.pow()</code>现在有了自己的操作符, 两个星号 **; </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow(<span class="number">3</span>,<span class="number">2</span>)); <span class="comment">// 9</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> ** <span class="number">2</span>); <span class="comment">// 9</span></span><br></pre></td></tr></table></figure><hr><h3 id="加性操作符"><a href="#加性操作符" class="headerlink" title="加性操作符"></a>加性操作符</h3><h4 id="加法操作符"><a href="#加法操作符" class="headerlink" title="加法操作符"></a>加法操作符</h4><ol><li> 如果两个操作数都是数值, 则加法操作符执行加法运算;</li><li> 如果有任意个操作数是 NaN, 则返回 NaN;</li><li> 如果是 Infinity 加 Infinity ,则返回 Infinity</li><li> 如果是-Infinity 加-Infinity, 则返回 -Infinity;</li><li> 如果是 Infinity 加 -Infinity, 则返回 NaN</li><li> 如果是+0 加 +0, 则返回+0;</li><li> 如果是-0 加 +0, 则返回+0</li><li> 如果是-0 加 -0, 则返回-0</li><li> 如果有一个操作数是字符串, 则将另一个操作数转换成字符串再进行字符串拼接操作</li><li> 如果两个都是字符串, 则直接进行拼接操作</li><li> 如果有任意一个操作数是对象, 数值或者布尔值, 则先调用它们的 <code>toString()</code>方法, 再应用上述规则进行操作</li><li> 对于 undefined 和 null, 则调用 toString()函数, 分别获取 “undefined”和”null”</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;the sum of 5 and 10 is &quot;</span> + num + num2; <span class="comment">// the sum of 5 and 10 is 510</span></span><br><span class="line"><span class="keyword">let</span> message2 = <span class="string">&quot;the sum of 5 and 10 is &quot;</span> + (num + num2); <span class="comment">// the sum of 5 and 10 is 15</span></span><br></pre></td></tr></table></figure><h4 id="减法操作符"><a href="#减法操作符" class="headerlink" title="减法操作符"></a>减法操作符</h4><ol><li> 如果两个数都是数值, 则执行减法操作</li><li> 如果有任意一个是 NaN, 则返回 NaN;</li><li> 如果是 Infinity 减 Infinity, 则返回 NaN;</li><li> 如果是 -Infinity 减 -Infinity, 则返回 NaN;</li><li> 如果是 Infinity 减 -Infinity, 则返回 Infinity;</li><li> 如果是 -Infinity 减 Infinity, 则返回 -Infinity;</li><li> 如果是 +0 减 +0, 则返回 +0;</li><li> 如果是+0 减 -0, 则返回 -0;</li><li> 如果有任意一个操作数是字符串, 布尔值, null 或者 undefined, 则先在后台使用 Number()进行转换, 则根据上述规则进行数学运算; 如果转化结果为 NaN, 则减法结果为 NaN;</li><li> 如果有任意一个操作数是对象, 则调用 valueOf()方法先获取它的数值, 如果获取到的是 NaN, 则减法结果为 NaN; 如果对象没有 valueOf()方法, 则调用 toString()方法, 然后再讲字符串转为数值;</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = <span class="number">5</span> - <span class="literal">true</span>; <span class="comment">// true 被转换为 1，所以结果是 4 </span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="literal">NaN</span> - <span class="number">1</span>; <span class="comment">// NaN </span></span><br><span class="line"><span class="keyword">let</span> result3 = <span class="number">5</span> - <span class="number">3</span>; <span class="comment">// 2 </span></span><br><span class="line"><span class="keyword">let</span> result4 = <span class="number">5</span> - <span class="string">&quot;&quot;</span>; <span class="comment">// &quot;&quot;被转换为 0，所以结果是 5 </span></span><br><span class="line"><span class="keyword">let</span> result5 = <span class="number">5</span> - <span class="string">&quot;2&quot;</span>; <span class="comment">// &quot;2&quot;被转换为 2，所以结果是 3 </span></span><br><span class="line"><span class="keyword">let</span> result6 = <span class="number">5</span> - <span class="literal">null</span>; <span class="comment">// null 被转换为 0，所以结果是 5</span></span><br></pre></td></tr></table></figure><hr><h3 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h3><hr><p>关系操作符执行比较两个数的大小, 包括大于, 小于, 小于等于, 大于等于, 用法和数学上的相同, 这几个操作数最终都返回布尔值结果</p><ol><li> 如果操作数都是数值, 则执行值的比较</li><li> 如果操作数都是字符串, 则逐个比较字符串中对应字符的编码</li><li> 如果有任一操作数是数值, 则将另一个操作数转换为数值, 执行数值比较</li><li> 如果有任一操作数是对象, 则调用其 valueOf()方法, 取得结果后再根据前面的规则进行比较; 如果没有 valueOf()方法, 则调用 toString()方法, 取得结果后再根据前面的规则进行比较;</li><li> 如果有任一操作数是布尔值, 则将其转换为数值再进行比较;</li></ol><h3 id="相等操作符"><a href="#相等操作符" class="headerlink" title="相等操作符"></a>相等操作符</h3><hr><h4 id="等于和不等于"><a href="#等于和不等于" class="headerlink" title="等于和不等于"></a>等于和不等于</h4><p>等于操作符用 == 表示, 如果操作数相等, 则返回 true; 不等于操作符用 != 表示; 如果两个操作数不相等, 则返回 true; 这两个操作符在使用时候都会在后台先进行强制数据类型转换, 再确定操作数是否相等;</p><ol><li> 如果任意操作数是布尔值, 则将其转换为数值再进行比较; false 转换为 0, true 转换为 1</li><li> 如果一个操作数是字符串, 另一个操作数是数值, 则尝试将字符串转为数值, 再进行比较</li><li> 如果一个操作数是对象, 另一个操作数不是, 则调用 valueOf()方法取得其对应的原始值, 再根据上述规则进行比较</li><li> null 和 undefined 相等;</li><li> null 和 undefined 不能转换为其他类型的数据再进行比较</li><li> 如果有任意一个操作数是 NaN, 则相等操作符返回 false, 不相等操作符返回 true; 即使两个操作数都是 NaN, 结果也是一样的;</li><li> 如果两个操作数都是对象, 则比较他们是不是同一个对象, 如果两个操作数都指向了同一个对象, 则相等操作符返回 true, 否则返回 false;</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span> ; <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;NaN&quot;</span> == <span class="literal">NaN</span>;   <span class="comment">// false</span></span><br><span class="line"><span class="number">5</span> == <span class="literal">NaN</span>; <span class="comment">// false</span></span><br><span class="line"><span class="literal">NaN</span> == <span class="literal">NaN</span> <span class="comment">// false</span></span><br><span class="line"><span class="literal">NaN</span> != <span class="literal">NaN</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">false</span> == <span class="number">0</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">true</span> == <span class="number">1</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">true</span> == <span class="number">2</span> <span class="comment">// false</span></span><br><span class="line"><span class="literal">undefined</span> == <span class="number">0</span> <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="number">0</span> <span class="comment">// false</span></span><br><span class="line"><span class="string">&quot;5&quot;</span> == <span class="number">5</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="全等和不全等"><a href="#全等和不全等" class="headerlink" title="全等和不全等"></a>全等和不全等</h4><p>全等和不全等和相等和不相等操作符类似, 只是他们在比较的时候不会进行数据类型转换; 全等用 === 表示, 不全等用 !===表示;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;55&quot;</span> == <span class="number">55</span>; <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;55&quot;</span> === <span class="number">55</span>; <span class="comment">// false</span></span><br><span class="line"><span class="string">&quot;55&quot;</span> != <span class="number">55</span>; <span class="comment">// false</span></span><br><span class="line"><span class="string">&quot;55&quot;</span> !=== <span class="number">55</span>; <span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>; <span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> === <span class="literal">undefined</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><hr><h3 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h3><p>条件操作符在 es 中应用非常广泛, 和 java 中一样:</p><p><code>variable = boolean_expression ? true_value : false_value</code></p><p>当条件表达式成立, 则赋值 true_value, 当条件表达式不成立, 则赋值 false_value;</p><hr><h3 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h3><ol><li> *= : 乘后赋值</li><li> /= : 除后赋值</li><li> %= :  取余后赋值</li><li> += : 加后赋值</li><li> -= : 减后赋值</li><li> &lt;&lt;= : 左移后赋值</li><li> &gt;&gt;= : 右移后赋值</li><li> &gt;&gt;&gt;= : 无符号右移后赋值</li></ol><hr><h3 id="逗号操作符"><a href="#逗号操作符" class="headerlink" title="逗号操作符"></a>逗号操作符</h3><p>逗号操作符可以用来在一条语句中执行多个操作, <code>let num1 = 1, num2 = 2, num3 = 3;</code></p><p>在赋值时使用逗号操作符来分隔值, 最终返回表达式中最后一个值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">0</span>; <span class="comment">// num = 0 </span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据类型</title>
      <link href="js_type/"/>
      <url>js_type/</url>
      
        <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>在 js 中所有的值都可以用下列的 7 种数据类型进行表示;</p><p>es 中有 6 种原始数据类型:</p><ol><li> Undefined</li><li> Null</li><li> Boolean</li><li> Number</li><li> String</li><li> Symbol (es6 中新增)</li></ol><p>es 中有 1 种复杂的数据类型:</p><ol><li> Object: 一种无序的键值对的集合;</li></ol><hr><h3 id="typeOf-操作符"><a href="#typeOf-操作符" class="headerlink" title="typeOf 操作符"></a>typeOf 操作符</h3><p><code>typeOf</code> 操作符是用来确定任意数据的数据类型, 对任意一个数据使用操作符返回的结果为:</p><ol><li> “undefined”: 未定义</li><li> “boolean”: bool 类型</li><li> “string”: 字符串</li><li> “number”: 数值</li><li> “object”: 对象(而不是函数) 或者 null;</li><li> “function”: 函数</li><li> “symbol” : 符号</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">&quot;some string&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;message&quot;</span>, <span class="keyword">typeof</span> (message)); <span class="comment">// string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;cool&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;sayHi&quot;</span>, <span class="keyword">typeof</span> (sayHi)); <span class="comment">// function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> number = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;number&quot;</span>, <span class="keyword">typeof</span> (number)); <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;flag&quot;</span>, <span class="keyword">typeof</span> (flag)); <span class="comment">// boolean</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;age&quot;</span>, <span class="keyword">typeof</span> (age)); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> none = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;none&quot;</span>, <span class="keyword">typeof</span> (none)); <span class="comment">// 特殊值 null 被认为是一个空对象的引用, 所以 typeof 为 Object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;kevin&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">29</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;obj&quot;</span>, <span class="keyword">typeof</span> (obj)); <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sym = <span class="built_in">Symbol</span>(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;sym&quot;</span>, <span class="keyword">typeof</span> sym); <span class="comment">// symbol</span></span><br></pre></td></tr></table></figure><hr><h3 id="Undefined-类型"><a href="#Undefined-类型" class="headerlink" title="Undefined 类型"></a>Undefined 类型</h3><p>Undefined 类型只有一个值, 就是特殊值 <code>undefined</code>; 当使用 var 或者 let 对变量进行声明的时候, 如果没有对变量进行赋值, 那么变量默认就是<code>undefined</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message;</span><br><span class="line"><span class="built_in">console</span>.log(message); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = <span class="literal">undefined</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>undefined 和 null 可以区分一个变量是一个空指针对象(null) 还是一个未初始化的变量; null  –&gt;  空指针对象  –&gt;  Obejct; undefined  –&gt;  未初始化的变量;</p><hr><h3 id="Null-类型"><a href="#Null-类型" class="headerlink" title="Null 类型"></a>Null 类型</h3><p>Null 类型同样只有一个值, 就是特殊值 null; 逻辑上讲, null 值表示一个空指针对象, 所以对一个 null 变量使用 typeOf 操作符会返回一个 object;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> car = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(typeOf(car)); <span class="comment">// obejct</span></span><br></pre></td></tr></table></figure><p>在声明一个未来要保存对象的变量时, 推荐初始化的时候赋值 null, 因为这样在之后只需要检测这个变量的值是不是 null 就可以知道这个变量在后面是否被成功赋予了一个对象的引用;</p><h3 id="Boolean-类型"><a href="#Boolean-类型" class="headerlink" title="Boolean 类型"></a>Boolean 类型</h3><p>Boolean 类型只有两个值, true 和 false</p><p>所有其他类型的值都可以通过 Boolean() 等价形式转换成 Boolean 类型; </p><table><thead><tr><th>数据类型</th><th>转换为 true</th><th>转换为 false</th></tr></thead><tbody><tr><td>Boolean</td><td>true</td><td>false</td></tr><tr><td>String</td><td>非空字符串</td><td>“”空字符串</td></tr><tr><td>Number</td><td>非 0 数值</td><td>0, NaN</td></tr><tr><td>Object</td><td>任意对象</td><td>null</td></tr><tr><td>Undefined</td><td>不存在, 永远无法为 true</td><td>undefined</td></tr></tbody></table><hr><h3 id="Number-类型"><a href="#Number-类型" class="headerlink" title="Number 类型"></a>Number 类型</h3><p>es 中 Number 类型可以表示整数和浮点数</p><h4 id="十进制-八进制和十六进制"><a href="#十进制-八进制和十六进制" class="headerlink" title="十进制, 八进制和十六进制"></a>十进制, 八进制和十六进制</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 十进制</span></span><br><span class="line"><span class="keyword">let</span> num1 = <span class="number">10</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 八进制</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">070</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 十六进制</span></span><br><span class="line"><span class="keyword">let</span> num3 = <span class="number">0xA</span>;</span><br><span class="line"><span class="keyword">let</span> num4 = <span class="number">0XA</span>; </span><br></pre></td></tr></table></figure><h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><p>在 es 中, 定义浮点数必须包含小数点, 而且小数点后面至少有一个数字; 虽然小数点前面可以不要求有整数, 但是推荐还是加上;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">let</span> num3 = <span class="number">.1</span> <span class="comment">// 合法 不推荐</span></span><br></pre></td></tr></table></figure><p>在小数点后面没有数字的情况下, 浮点数会直接被转换成整数; 在小数点后面是 0 的情况下, 也会直接转换成整数;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 都会被自动转换成整数</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">1.</span>; </span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">10.0</span>; </span><br></pre></td></tr></table></figure><h4 id="科学计数法"><a href="#科学计数法" class="headerlink" title="科学计数法"></a>科学计数法</h4><p>科学计数法的写法为 : <code>数值(整数或者浮点数) + e or E + 乘以 10 的多少次幂</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">2.123e4</span>;</span><br><span class="line"><span class="keyword">let</span> num=  <span class="number">3e-2</span>;</span><br></pre></td></tr></table></figure><h4 id="浮点数精度"><a href="#浮点数精度" class="headerlink" title="浮点数精度"></a>浮点数精度</h4><p>在 js 中, 浮点数精度运算非常诡异, 不要检测某个特定的浮点数值;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">0.2</span>;</span><br><span class="line"><span class="keyword">if</span> (a + b == <span class="number">0.3</span>)&#123; <span class="comment">// 这样判断, 很可能不成立</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;you get 0.3&quot;</span>) </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;精度真的有很大问题&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="值的范围"><a href="#值的范围" class="headerlink" title="值的范围"></a>值的范围</h4><p>最大值保存在 Number.MAX_VALUE 中, 最小值保存在 Number.MIN_VALUE 中; </p><p>如果超过了最大值则会自动转成正无穷 <code>Infinity</code>; 超过了最小值会转成负无穷 <code>-Infinity</code>;</p><p>正无穷和负无穷都不能再进行任何计算, 参与计算结果也是正无穷或者负无穷;</p><p>可以使用 <code>isFinite()</code>检测某个变量是否是有限数, 有限数返回 true, 无穷数返回 false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="built_in">Number</span>.MAX_VALUE + <span class="built_in">Number</span>.MIN_VALUE;</span><br><span class="line">consoel.log(ifFinite(result)); <span class="comment">// true 是有限数字</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_VALUE); <span class="comment">// 1.7976931348623157e+308</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MIN_VALUE); <span class="comment">// 5e-324</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isFinite</span>(<span class="literal">Infinity</span>)); <span class="comment">// false 不是有限数字</span></span><br></pre></td></tr></table></figure><h4 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h4><p>NaN 是一个特殊的数值, 表示的是<code>不是数值</code>; 用于表示本来要返回数值的操作, 但是失败了;  比如, 用 0 除任何数在其他语言中会直接导致错误, 但是在 ES 中, 0, +0, -0 或者 NaN 都有可能是返回值;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;0/0&quot;</span>, <span class="number">0</span> / <span class="number">0</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;-0/+0&quot;</span>, -<span class="number">0</span> / +<span class="number">0</span>); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果分子是非 0 值, 分母是有符号 0 或者无符号 0, 那么返回 -Infinity 或者 Infinity</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;5/0&quot;</span>, <span class="number">5</span> / <span class="number">0</span>); <span class="comment">// Infinity</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;5/-0&quot;</span>, <span class="number">5</span> / -<span class="number">0</span>); <span class="comment">// -Infinity</span></span><br></pre></td></tr></table></figure><p>任何涉及到 NaN 的计算, 最终的结果都是 NaN</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 任何涉及 NaN 的运算返回的始终是 NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;NaN/10+100+200-33&quot;</span>, <span class="literal">NaN</span> / <span class="number">10</span> + <span class="number">100</span> + <span class="number">200</span> - <span class="number">33</span>); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p>js 中提供了函数<code>isNaN()</code>来检测传入的参数是否是数值类型, 如果传入的参数可以转换成合法的数值, 那么返回 true, 否则返回 false; </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">NaN</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="number">10</span>)); <span class="comment">// false 10是数值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">&quot;10&quot;</span>)) <span class="comment">// false 可以转换成数值 10;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">&quot;blue&quot;</span>)); <span class="comment">// true 不能转换成数值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">true</span>)); <span class="comment">// false 可以转换成数值 1</span></span><br></pre></td></tr></table></figure><h4 id="Number"><a href="#Number" class="headerlink" title="Number()"></a>Number()</h4><p><code>Number()</code>是转型函数, 可以将任意数据类型转成数值;</p><ol><li><p> 布尔值: true 转成 1, false 转成 0;</p></li><li><p> 数值: 直接返回</p></li><li><p> null: 返回 0</p></li><li><p> undefined: 返回 NaN;</p></li><li><p>字符串</p><ol><li> 字符串中为合法数值, 包括字符前面的加减号, 直接转成含有符号十进制数值(+忽略);</li><li> 字符串中以 0 开头的合法八进制, 直接忽略 0, 转成十进制数;</li><li> 字符串中以 0x 和 0X 开头的合法十六进制数, 转成对应的十进制数;</li><li> 字符串中以合法的浮点数, 则直接转换成对应的浮点数;</li><li> 如果是空字符串, 则转为 0</li><li>如果字符串中的内容不是合法数值, 则返回 NaN;</li></ol></li><li><p>对象</p><ol><li><p> 先调用<code>valueOf()</code>方法, 按照上面的规则进行转换, 如果转换的结果是 NaN, 则进行下一步参照 2</p></li><li><p>再调用<code>toString()</code>方法将对象转成字符串, 再按照字符串转换成 Number 的规则进行转换;</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="built_in">Number</span>(<span class="string">&quot;hello world&quot;</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="keyword">let</span> num1 = <span class="built_in">Number</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="built_in">Number</span>(<span class="string">&quot;00001&quot;</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">let</span> num3 = <span class="built_in">Number</span>(<span class="literal">true</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt()"></a>parseInt()</h4><p>主要用于将字符串转成数值, 推荐优先使用该方法进行转换;</p><ol><li><p> 浮点数, 仅保留整数</p></li><li><p>字符串:</p><ol><li><p> 字符串前面的空格会被忽略, 从第一个非空格字符串开始转换;</p></li><li><p> 如果第一个有效字符不是+,-或者有效数值, 那么会直接返回 NaN;</p></li><li><p> 空字符进行转换的时候会直接返回 NaN;</p></li><li><p>如果开始是有效的数值或者+,-; 则会依次进行转换, 后面遇到无效字符则截断, 仅转换有效部分; </p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="string">&quot;123blue&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(num)); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure></li><li><p>小数点也是无效字符, 所以转换的时候如果是浮点数, 则仅保留整数部分</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">12.33</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(num)); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure></li><li><p> 如果字符串是<code>0x</code>开头, 则会被转换为十六进制; </p></li><li><p> 如果字符是<code>0</code>开头, 且后面紧跟数值, 在非严格模式下会被某些实现解释成八进制整数;</p></li></ol> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="built_in">parseInt</span>(<span class="string">&quot;123blue&quot;</span>); <span class="comment">// 123</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="built_in">parseInt</span>(<span class="string">&quot;&quot;</span>) <span class="comment">// NaN 如果使用 Number(&quot;&quot;)则返回 0</span></span><br><span class="line"><span class="keyword">let</span> num3 = <span class="built_in">parseInt</span>(<span class="string">&quot;0xA&quot;</span>); <span class="comment">// 10 解释为十六进制的整数</span></span><br><span class="line"><span class="keyword">let</span> num4 = <span class="built_in">parseInt</span>(<span class="number">22.5</span>); <span class="comment">// 22</span></span><br><span class="line"><span class="keyword">let</span> num5 = <span class="built_in">parseInt</span>(<span class="string">&quot;70&quot;</span>) <span class="comment">// 70</span></span><br><span class="line"><span class="keyword">let</span> num6 = <span class="built_in">parseInt</span>(<span class="string">&quot;0xf&quot;</span>) <span class="comment">// 15</span></span><br></pre></td></tr></table></figure></li><li><p><code>parseInt(param, index)</code>支持第二个参数, 可以指定要转换数字的进制;</p><ol><li><p>将十六进制转换为十进制:</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="built_in">parseInt</span>(<span class="string">&quot;0xAF&quot;</span>, <span class="number">16</span>); <span class="comment">// 175</span></span><br><span class="line"><span class="keyword">let</span> num1 = <span class="built_in">parseInt</span>(<span class="string">&quot;AF&quot;</span>, <span class="number">16</span>); <span class="comment">// 175  指定了进制之后, 十六进制的标志 0x 可以忽略</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="built_in">parseInt</span>(<span class="string">&quot;AF&quot;</span>); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure></li><li><p>将不同进制数字字符串转换为十进制</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>,<span class="number">2</span>); <span class="comment">// 2 将二进制的 10 转换为十进制</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>, <span class="number">8</span>); <span class="comment">// 8 将八进制的 10 转换为十进制</span></span><br><span class="line"><span class="keyword">let</span> num3 = <span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>, <span class="number">10</span>); <span class="comment">// 10 将十进制的 10 转换为十进制</span></span><br><span class="line"><span class="keyword">let</span> num4 = <span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>, <span class="number">16</span>); <span class="comment">// 16 将十六进制的 10 转换为十进制</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="parseFloat"><a href="#parseFloat" class="headerlink" title="parseFloat()"></a>parseFloat()</h4><p><code>parseFloat()</code>函数的工作方式跟<code>parseInt()</code>类似; </p><ol><li> 从位置[0]开始检测每个字符; </li><li> 依次对字符串进行解析, 直到末尾或者出现无效浮点数值为止, 一旦无效就返回当前有效结果;</li><li> 第一次出现的小数点是有效的, 第二次出现的则无效, 一旦无效则返回当前有效结果;</li><li> 始终忽略字符串开头的 0; </li><li> 只能解析十进制, 如果入参是十六进制, 则直接返回 0;</li><li> 如果字符串只有整数或者小数点后面只有 0, 那么<code>parseFloat()</code>会返回整数;</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="built_in">parseFloat</span>(<span class="string">&quot;1234blue&quot;</span>); <span class="comment">// 1234</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="built_in">parseFloat</span>(<span class="string">&quot;0xA&quot;</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">let</span> num3 = <span class="built_in">parseFloat</span>(<span class="string">&quot;22.5&quot;</span>); <span class="comment">// 22.5</span></span><br><span class="line"><span class="keyword">let</span> num4 = <span class="built_in">parseFloat</span>(<span class="number">22.34</span><span class="number">.5</span>); <span class="comment">// 22.34</span></span><br><span class="line"><span class="keyword">let</span> num5 = <span class="built_in">parseFloat</span>(<span class="string">&quot;0908.5&quot;</span>); <span class="comment">// 908.5</span></span><br><span class="line"><span class="keyword">let</span> num6 = <span class="built_in">parseFloat</span>(<span class="number">3.14e5</span>) <span class="comment">// 314000</span></span><br></pre></td></tr></table></figure><hr><h3 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a>String 类型</h3><p>String 字符串类型可以使用 0 个或者多个 16 位的 Unicode 字符序列; 字符串可以使用双引号, 单引号或者反引号`来表示;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name1= <span class="string">&quot;kevin&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> name2 = <span class="string">`kevin`</span>;</span><br><span class="line"><span class="keyword">let</span> name3 = <span class="string">&#x27;kevin&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="字符字面量"><a href="#字符字面量" class="headerlink" title="字符字面量"></a>字符字面量</h4><table><thead><tr><th>字面量</th><th>含义</th></tr></thead><tbody><tr><td>\n</td><td>换行</td></tr><tr><td>\t</td><td>制表</td></tr><tr><td>\b</td><td>退格</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\f</td><td>换页</td></tr><tr><td>\\</td><td>反斜杠</td></tr><tr><td>\‘</td><td>单引号</td></tr><tr><td>\“</td><td>双引号</td></tr><tr><td>\`</td><td>反引号</td></tr><tr><td>\xnn</td><td>十六进制编码 nn 的字符</td></tr><tr><td>\unnnn</td><td>十六进制编码nnnn 表示的 unicode 字符</td></tr></tbody></table><h4 id="字符串的长度"><a href="#字符串的长度" class="headerlink" title="字符串的长度"></a>字符串的长度</h4><p>字符串可以通过<code>length</code>属性来获取长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.length); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h4><p>将其他数据类型转换为字符串;</p><ol><li><p>几乎所有的 js 数据类型都有<code>toString()</code>方法, 唯一的用处就是将其他类型转换为字符串;</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">let</span> age2String = age.toString(); <span class="comment">// &quot;11&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> found = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> found2String = found.toString(); <span class="comment">// &quot;true&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>toString()</code>可以接受参数, 作用是将十进制转换为其他进制</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toString()); <span class="comment">// 十进制转十进制</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">2</span>)); <span class="comment">// 十进制转二进制</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">8</span>)); <span class="comment">// 十进制转八进制</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">16</span>)); <span class="comment">// 十进制转十六进制String 的转换规则</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="String"><a href="#String" class="headerlink" title="String()"></a>String()</h4><p><code>String()</code>将其他类型转换为字符串;</p><ol><li><p> 如果传入的参数有 <code>toString()</code>方法, 则直接调用该方法;</p></li><li><p> 如果传入的参数是 null, 则直接返回<code>&quot;null&quot;</code></p></li><li><p>如果传入的参数是 undefined, 则直接返回 <code>&quot;undefined&quot;</code></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>(<span class="number">10</span>); <span class="comment">// &quot;10&quot;</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">true</span>); <span class="comment">// &quot;true&quot;</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">null</span>); <span class="comment">// &quot;null&quot;</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">undefined</span>); <span class="comment">// &quot;undefined&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="模板字面量"><a href="#模板字面量" class="headerlink" title="模板字面量"></a>模板字面量</h4><p>es6 中新增了模板字面量, 不同于单引号和双引号, 模板字面量可以换行定义字符串并保留换行符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> line = <span class="string">`hello world,</span></span><br><span class="line"><span class="string">kevin!`</span>;</span><br></pre></td></tr></table></figure><h4 id="字符串插值"><a href="#字符串插值" class="headerlink" title="字符串插值"></a>字符串插值</h4><p>在模板字面量中, 可以使用<code>$&#123;&#125;</code>在字符串中插入变量, 也可以调用函数和方法; 只能用于使用了模板字面量的字符串中, 不能在””和’’定义的字符串中使用;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> exponet = <span class="string">&quot;second&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> newLine = value + <span class="string">&quot;to the &quot;</span> + exponet + <span class="string">&quot;power is &quot;</span> + (value * value);</span><br><span class="line"><span class="keyword">let</span> newLine2 = <span class="string">`<span class="subst">$&#123;value&#125;</span> to the <span class="subst">$&#123;exponet&#125;</span> power is <span class="subst">$&#123;value * value&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="Symbol-类型"><a href="#Symbol-类型" class="headerlink" title="Symbol 类型"></a>Symbol 类型</h3><p>Symbol 是 ES6中新增的数据类型, 符号是原始值, 且符号实例是唯一的, 不可变的; 符号的用途是为了确保属性使用唯一标识, 不会发生属性冲突;</p><ol><li><p>符号的基本使用</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(sym)); <span class="comment">// symbol</span></span><br></pre></td></tr></table></figure></li><li><p>调用<code>Symbol()</code>函数时, 可以传入一个字符串作为参数对符号进行描述, 这个字符串参数与符号定义或者标识完全无关</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym1 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> sym2 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">if</span> (sym1 == sym2) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;sym1 == sym2&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;sym1 != sym2&quot;</span>); <span class="comment">// sym1 !== sym2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sym3 = <span class="built_in">Symbol</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> sym4 = <span class="built_in">Symbol</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sym3 == sym4); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p> 只要创建 <code>Symbol()</code> 实例并将其作为对象的属性, 那么就可以保证它不会覆盖原有的属性, 无论是符号还是字符串属性;</p></li><li><p> <code>Symbol()</code> 函数不能和 new 关键字一起作为构造函数使用, 因为 new 出来的是一个 Object, 而 Symbol()的话需要产生一个 symbol 的基础数据类型</p></li><li><p>全局符号注册表: 通过 <code>Symbol.for()</code>来注册全局符号, 方便符号的复用; 调用<code>Symbol.for()</code>的时候, 会先检查全局注册表中是否存在对应的符号, 如果存在那么就会调用这个存在的符号进行操作, 如果不存在, 那么就会新建一个符号并返回符号实例;</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym1 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;foo&#x27;</span>); <span class="comment">// 创建新符号</span></span><br><span class="line"><span class="keyword">let</span> sym2 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;foo&#x27;</span>); <span class="comment">// 重用已有符号</span></span><br><span class="line"><span class="built_in">console</span>.log(sym1 === sym2); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p>采用相同的符号描述, 在全局注册表中定义的符号和使用 <code>Symbol.for()</code>定义的符号也并不等同;</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym1 = <span class="built_in">Symbol</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> sym2 = <span class="built_in">Symbol</span>.for(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sym1 == sym2); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p> 全局注册表中的符号必须使用字符串键来创建, 因此作为参数传给<code>Symbol.for()</code>的任何值都会被转换成字符串;</p></li><li><p>全局注册表中可以使用  <code>Symbol.keyFor()</code>来查询全局注册表, 这个方法接受符号, 返回该全局符号对应的字符串键, 如果查询的不是全局符号, 则返回 undefined;</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建符号</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>.for(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(s)); <span class="comment">// foo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建普通符号</span></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(s2)); <span class="comment">// undefined </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果传入的不是符号, 则 Symbol.keyFor()会抛出 TypeError</span></span><br><span class="line"><span class="built_in">Symbol</span>.keyFor(<span class="number">123</span>); <span class="comment">// TypeError: 123 is not a symbol</span></span><br></pre></td></tr></table></figure></li><li><p> 使用符号作为属性</p></li></ol><hr><h3 id="Object-类型"><a href="#Object-类型" class="headerlink" title="Object 类型"></a>Object 类型</h3><ol><li> es 中的对象其实就是一组数据和功能的集合;</li><li> 对象通过 new 操作符和对象类型的名称来创建, 比如 <code>let obj = new Object();</code></li><li> <code>Object</code>也是派生其他类型对象的基类, Object 类型的所有属性和方法在派生对象的身上也同样存在;</li></ol><h4 id="Object-属性和方法"><a href="#Object-属性和方法" class="headerlink" title="Object 属性和方法"></a>Object 属性和方法</h4><ol><li> <code>constructor</code>: 用于创建当前对象的函数, 例如在<code>let obj = new Object();</code>中, <code>Object()</code>函数就是<code>constructor</code>;</li><li> <code>hasOwnProperty(propertyName)</code>: 用于判断当前对象实例(不是原型)上是否存在给定的属性, 要检查的属性名必须是字符串或者符号;</li><li> <code>isPrototypeof(object)</code>: 判断当前调用<code>isPrototypeof()</code>方法的对象是否是入参 object 的原型</li><li> <code>propertyIsEnumerable(propertyName)</code>: 判断入参属性对用的值是否可以使用<code>for-in</code>语句进行枚举</li><li> <code>toLocalString()</code>: 返回对象的字符串表示, 该字符串反应了对象所在本地执行环境;</li><li> <code>toString()</code>: 返回对象的等价字符串表示;</li><li> <code>valueOf()</code>: 返回对象的字符串, 数值或者布尔值表示; 通常和<code>toString()</code>返回的结果相同;</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量</title>
      <link href="js_variaty/"/>
      <url>js_variaty/</url>
      
        <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>es 中变量是松散的, 变量可以用于保存任何类型的数据;</p><p>变量名知识用于保存任意变量而存在的占位符;</p><p>有三个关键字可以声明变量, var, let 和 const; 其中 var 可以在 es 任意版本中使用, let 和 const 只能在 es6 以及更晚的版本中使用;</p><h3 id="var-声明"><a href="#var-声明" class="headerlink" title="var 声明"></a>var 声明</h3><p>要定义变量, 可以使用 var 操作符, 后面跟上变量名; <code>var message;</code> 这行代码定义了一个名为 <code>message</code>的变量, 可以用它来存放任意的数据类型; 在不进行初始化的情况下, 默认会给变量赋值 <code>undefined</code></p><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>var 声明的作用域会作用于包含它的函数内部, 作为局部变量; 在函数退出的时候进行销毁;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> message = <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;message&quot;</span>, message); <span class="comment">// 报错, 局部变量不能在全局中使用</span></span><br></pre></td></tr></table></figure><p>去掉 var 进行声明的变量就是全局变量, 全局变量可以在所有函数的作用域中使用;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    message = <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;message&quot;</span>, message);</span><br></pre></td></tr></table></figure><h4 id="全局提升为-window-属性"><a href="#全局提升为-window-属性" class="headerlink" title="全局提升为 window 属性"></a>全局提升为 window 属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在全局中使用 var 声明变量会自动提升成 window 属性</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;kevin&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name);</span><br></pre></td></tr></table></figure><h4 id="声明多个变量"><a href="#声明多个变量" class="headerlink" title="声明多个变量"></a>声明多个变量</h4><p>需要定义多个变量, 可以在一条语句中用逗号进行分隔;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="number">11</span>, found = <span class="literal">false</span>, age = <span class="number">29</span>;</span><br></pre></td></tr></table></figure><h4 id="var-声明提升"><a href="#var-声明提升" class="headerlink" title="var 声明提升"></a>var 声明提升</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(age);</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// 输出结果为 undefined, 因为声明提升导致的, 上面的代码等价于下面的:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age;</span><br><span class="line">    <span class="built_in">console</span>.log(age);</span><br><span class="line">    age = <span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><h3 id="let-声明"><a href="#let-声明" class="headerlink" title="let 声明"></a>let 声明</h3><h4 id="作用域-1"><a href="#作用域-1" class="headerlink" title="作用域"></a>作用域</h4><p>let 和 var 的作用差不多, 但是最明显的区别就是 let 的作用域是块, 而 var 的作用域是函数; </p><p>块作用域是函数作用域的子集;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">26</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;age&quot;</span>, age); <span class="comment">// 26</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;age&quot;</span>, age); <span class="comment">// 26</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">26</span>; <span class="comment">// let 声明的变量只能在在块中生效, 不能在块的外部使用</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;num&quot;</span>, num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;num&quot;</span>, num); <span class="comment">// 报错, ReferenceError: age is not defined</span></span><br></pre></td></tr></table></figure><h4 id="不允许多次声明"><a href="#不允许多次声明" class="headerlink" title="不允许多次声明"></a>不允许多次声明</h4><p>使用 let 声明变量, 不允许在块作用域中出现多次的冗余声明; var 则支持多次声明; </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"><span class="keyword">var</span> name; <span class="comment">// 不会报错, var 允许多次声明相同的变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age;</span><br><span class="line"><span class="keyword">let</span> age; <span class="comment">// 报错 SyntaxError: Identifier &#x27;age&#x27; has already been declared, 不允许使用 let 在相同作用域下声明相同变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name; <span class="comment">// 报错 SyntaxError: Identifier &#x27;name&#x27; has already been declared</span></span><br></pre></td></tr></table></figure><p>在 html 中通过 let 声明相同的变量也会报错</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> name = <span class="string">&quot;kevin&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> age = <span class="number">26</span>;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 使用 var 声明, 会出现变量提升, 变量提升会自动在作用域的顶部将冗余的声明合并成一个</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> name = <span class="string">&quot;matt&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> age = <span class="number">30</span>; <span class="comment">// 因为 let 不存在变量提升 所以并没有合并冗余的声明, 这里会报错</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="不支持变量提升"><a href="#不支持变量提升" class="headerlink" title="不支持变量提升"></a>不支持变量提升</h4><p>let 和 var 另一个重要区别是 let 不支持变量提升;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// name 会被变量提升</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;name&quot;</span>, name); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;kevin&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// age 不会被变量提升</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;age&quot;</span>, age); <span class="comment">//ReferenceError: Cannot access &#x27;age&#x27; before initialization</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><h4 id="let-不会成为-window-属性"><a href="#let-不会成为-window-属性" class="headerlink" title="let 不会成为 window 属性"></a>let 不会成为 window 属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;kevin&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;name&quot;</span>, <span class="built_in">window</span>.name); <span class="comment">// 全局中使用 var, 会直接赋值为 window 的属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;age&quot;</span>, <span class="built_in">window</span>.age); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h4 id="循环中使用-let"><a href="#循环中使用-let" class="headerlink" title="循环中使用 let"></a>循环中使用 let</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 let 出现前, for 循环定义的迭代器变量会渗透到循环体外部</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 let 可以解决循环体渗透的问题</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> n = <span class="number">0</span>; n &lt; <span class="number">5</span>; n++)&#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(n) <span class="comment">// ReferenceError: n 没有定义</span></span><br></pre></td></tr></table></figure><h3 id="const-声明"><a href="#const-声明" class="headerlink" title="const 声明"></a>const 声明</h3><p>const 的行为和 let 基本相同, 都是作用于块作用域中, 唯一的区别就是 const 声明的变量必须同时初始化, 且不允许改变;</p><h4 id="不允许修改-const-的值"><a href="#不允许修改-const-的值" class="headerlink" title="不允许修改 const 的值"></a>不允许修改 const 的值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">26</span>;</span><br><span class="line">age = <span class="number">20</span> <span class="comment">// TypeError: 给常量赋值</span></span><br></pre></td></tr></table></figure><h4 id="const-不允许重复声明"><a href="#const-不允许重复声明" class="headerlink" title="const 不允许重复声明"></a>const 不允许重复声明</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;kevin&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">&quot;matt&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;name&quot;</span>, name); <span class="comment">// kevin</span></span><br></pre></td></tr></table></figure><h4 id="const-不能用于循环计数"><a href="#const-不能用于循环计数" class="headerlink" title="const 不能用于循环计数"></a>const 不能用于循环计数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;  <span class="comment">// 因为循环的计数变量会自增, const 不允许改变值</span></span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">// TypeError：给常量赋值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="const-可以用于-for-in-和-for-of"><a href="#const-可以用于-for-in-和-for-of" class="headerlink" title="const 可以用于 for-in 和 for-of"></a>const 可以用于 for-in 和 for-of</h4><p>在 for-of 和 for-in 中, 使用 const 相当于每次都创建一个新的变量;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key) <span class="comment">// a, b</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h3><ol><li> 尽量不使用 var 进行变量的定义, 有了 let 和 const 之后, 大多数情况下都不需要使用 var 了, 强制自己使用 let 和 const, 提高代码质量</li><li> 优先使用 const, 只有在提前预知未来会修改该变量的值时才使用 let;</li></ol>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js语法基础</title>
      <link href="js_basic/"/>
      <url>js_basic/</url>
      
        <content type="html"><![CDATA[<h2 id="基础规则"><a href="#基础规则" class="headerlink" title="基础规则"></a>基础规则</h2><ol><li><p> 区分大小写</p></li><li><p>标识符, 所谓的标识符就是变量, 函数, 属性或者函数参数的名称; 标识符可以由一个或者多个下列字符组成:</p><ol><li> 第一个字符必须是字母, 下划线或者$美元符</li><li> 剩下的其他字符可以是字母, 下划线, $美元符或者数字</li><li> 标识符中的字母可是 ascii 中的字母也可以是 unicode 中的字母字符, 但是不推荐使用 unicode;</li><li> 按照惯例, 标识符使用驼峰大小写来命名; 第一个单词的首字母小写, 后面的单词的首字母大写;</li></ol></li><li><p>注释:</p><ol><li> 单行注释: <code>// 单行注释</code></li><li> 多行注释: <code>/* 多行注释 */</code></li></ol></li><li><p>严格模式: es6 中增加了严格模式 strict mode 模式, 严格模式中会将 es3 中一些不规范的写法进行规范, 抛出错误;</p><ol><li><p> 对整个脚本开启严格模式, 在脚本开头增加 <code>&quot;use strict&quot;;</code></p></li><li><p>对某个函数增加严格模式, 在函数开头加上预处理指令</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomeThing</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">    &quot;use strict&quot;</span>;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>es 中语句默认使用 ; 结尾, 如果省略了分号, 那么解释器在解释代码的过程中会自动加上分号; 推荐每个语句结束的时候手动加上分号, 防止错误</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = a + b <span class="comment">// 没有分号也有效, 但是不推荐</span></span><br><span class="line"><span class="keyword">let</span> sum = a + b; <span class="comment">// 推荐使用分号作为结尾</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="关键字和保留字"><a href="#关键字和保留字" class="headerlink" title="关键字和保留字"></a>关键字和保留字</h2><p>保留的关键字不能作为标识符或属性名 </p><table><thead><tr><th>关键词</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>break</td><td>do</td><td>in</td><td>typeof</td></tr><tr><td>case</td><td>else</td><td>instanceof</td><td>var</td></tr><tr><td>catch</td><td>export</td><td>new</td><td>void</td></tr><tr><td>class</td><td>extends</td><td>return</td><td>while</td></tr><tr><td>const</td><td>finally</td><td>super</td><td>with</td></tr><tr><td>continue</td><td>for</td><td>switch</td><td>yield</td></tr><tr><td>debugger</td><td>function</td><td>this</td><td></td></tr><tr><td>default</td><td>if</td><td>throw</td><td></td></tr><tr><td>delete</td><td>import</td><td>try</td><td></td></tr></tbody></table><table><thead><tr><th>始终保留</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>enum</td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>严格模式下保留</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>implements</td><td>package</td><td>public</td><td>interface</td></tr><tr><td>protected</td><td>static</td><td>let</td><td>private</td></tr></tbody></table><table><thead><tr><th>模块代码中保留</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>await</td><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>script标签</title>
      <link href="js_script/"/>
      <url>js_script/</url>
      
        <content type="html"><![CDATA[<h2 id="lt-script-gt-元素"><a href="#lt-script-gt-元素" class="headerlink" title="&lt;script&gt;元素"></a><code>&lt;script&gt;</code>元素</h2><h3 id="lt-script-gt-属性"><a href="#lt-script-gt-属性" class="headerlink" title="&lt;script&gt;属性"></a><code>&lt;script&gt;</code>属性</h3><p>将 javascript 插入到 html 中, 主要的方式是使用<code>&lt;script&gt;</code>标签, 该元素有 8 个属性;</p><ol><li> <code>async</code>: 可选, 表示应该立即开始下载脚本, 但不能阻塞其他页面的动作, 只对外部文件有效;</li><li> <code>charset</code>: 可选, 表示了使用<code>src</code>属性指定的代码的字符集, 这个属性基本不使用, 浏览器也不在乎它的值;</li><li> <code>crossorigin</code>: 可选, 配置相关请求的 cors(跨源资源共享), 默认不使用 cors, <code>crossorigin=&quot;anonymous&quot;</code>配置文件请求不必设置凭据标志; 当 <code>crossorigin=&quot;use-credentials&quot;</code>设置凭据标志, 意味着出站请求会包含凭据标志;</li><li> <code>defer</code>: 可选, 表示脚本可以延迟到文档完全被解析和显示之后再执行, 只对外部脚本文件有效;</li><li> <code>integrity</code>: 可选, 允许对比收到的资源文件和指定的加密签名, 以此来保证资源的完整性和安全性; 如果收到的资源的签名和这个属性指定的签名不匹配, 则页面会报错, 脚本不会执行; 这个属性可以用于确认内容分发网络 cdn 不会提供恶意的内容;</li><li> <code>language</code>: 废弃, 最初用来表示代码块中的脚本语言, 大多数浏览器都会忽略这个属性;</li><li> <code>src</code>: 可选, 表示包含要执行的外部代码的路径;</li><li> <code>type</code>: 可选, 代替 <code>language</code>; 表示了外部代码脚本语言的内容类型, 按照惯例一般都是<code>text/javascript</code>; 如果这个值为<code>module</code>, 则代码块中的代码会被当成是 ES6 中的模块, 只有这个时候, 代码中才可以出现 <code>import</code>和<code>export</code>关键字;</li></ol><h3 id="defer-和-async"><a href="#defer-和-async" class="headerlink" title="defer 和 async"></a>defer 和 async</h3><p><code>defer</code>表示推迟脚本执行, 这个属性只适用于外部的 js 脚本, 表示脚本在执行的时候不会改变页面结构, 脚本会在整个页面都解析完成后再运行, 设置了<code>defer</code>就是告诉浏览器, 立即下载这个脚本但是延迟执行; 虽然 html5 的规范中规定了, 使用了<code>defer</code>属性的 js 脚本应该是按照<code>&lt;script&gt;</code>出现的顺序依次执行, 且必须在 <code>DOMContentLoaded</code>事件之前执行, 但是实际上不一定都遵守这个规范, 所以推荐最好只包含一个带有<code>defer</code>属性的脚本;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>example html page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;example.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;example1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 页面内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>async</code>属性表示了当前加载的 js 支持异步, 标记了<code>async</code>之后不会阻塞主进程, 同时也不会按照次序执行;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--page body--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;example.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;example1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li> 第二个脚本可能先于第一个脚本执行</li><li> <code>async</code>的作用是告诉浏览器, 不必等待 javascript 脚本下载完毕后再加载页面, 也不需要等该异步脚本下载和执行后再加载其他脚本</li><li> 因为异步存在, 所有使用了该属性的 javascript 脚本不应该在加载期间修改 dom 节点;</li><li> 并不推荐使用这个属性;</li></ol><h3 id="lt-script-gt-使用方式"><a href="#lt-script-gt-使用方式" class="headerlink" title="&lt;script&gt;使用方式"></a><code>&lt;script&gt;</code>使用方式</h3><h4 id="在-html-代码中直接嵌入-javascript"><a href="#在-html-代码中直接嵌入-javascript" class="headerlink" title="在 html 代码中直接嵌入 javascript"></a>在 html 代码中直接嵌入 javascript</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;hi&quot;</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p> 包含在<code>&lt;script&gt;</code>内的代码会被从上到下解释</p></li><li><p> 在<code>&lt;script&gt;</code>元素中的代码被计算完成之前, 页面的其余内容都不会被加载, 也不会被显示, 这个过程会阻塞</p></li><li><p>在使用行内 javascript 的时候, 代码中不能出现字符串 <code>&lt;/script&gt;</code>, 因为浏览器在解析脚本的时候会将<code>&lt;/script&gt;</code>当做是 javascript 结束的标志; 需要使用转义字符来避免这个问题</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;&lt;\/script&gt;&quot;</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="引入外部文件"><a href="#引入外部文件" class="headerlink" title="引入外部文件"></a>引入外部文件</h4><p>通过引入外部文件中的 javascript 代码, 使用 <code>src</code>属性来指定一个外部的 url 地址;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;example.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p> 和解释行内 javascript 一样, 在解释外部 javascript 文件时, 也会阻塞页面;</p></li><li><p> 在使用了<code>src</code>属性之后, <code>&lt;script&gt;</code>标签内不能再包含其他的 javascript 代码, 即使包含了也不会被执行;</p></li><li><p><code>&lt;script&gt;</code>可以直接引入其他域的 js 代码, <code>src</code>属性可以是一个完整的 url, 而且这个 url 可以执行和 html 不在一个域下面的脚本文件;</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://www.somewhere.com/afile.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p> 浏览器会按照<code>&lt;script&gt;</code>在页面中出现的顺序依次解释它们, 前提是它们没有包含<code>async</code>和 <code>defer</code>属性; 第二个<code>&lt;script&gt;</code>只能在上一个<code>&lt;script&gt;</code>元素的代码解释完毕之后才能开始解释;</p></li></ol><h4 id="动态加载-js"><a href="#动态加载-js" class="headerlink" title="动态加载 js"></a>动态加载 js</h4><p>除了使用<code>&lt;script&gt;</code>标签, 还有其他的方式可以加载脚本, 可以通过向 DOM 中动态添加<code>&lt;script&gt;</code>元素来加载指定的文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    script.src = <span class="string">&quot;example.js&quot;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.head.appendChild(script);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用这种方式添加脚本会默认使用<code>async</code>属性, 因为不是所有的浏览器都支持<code>async</code>属性, 所有推荐使用下面的方式进行动态加载:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--body page--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">&quot;script&quot;</span>);</span></span><br><span class="line"><span class="javascript">        script.src = <span class="string">&quot;example.js&quot;</span>;</span></span><br><span class="line"><span class="javascript">        script.async = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.head.appendChild(script);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用这种方式动态加载 javascript 文件对浏览器预加载器是完全不可见的, 可能会影响性能; 要想让预加载器知道这些动态请求文件的存在, 可以在文档头部显示的进行声明; <code>&lt;link rel=&quot;preload&quot; href=&quot;gibberish.js&quot;&gt;</code></p><h3 id="lt-script-gt-出现的位置"><a href="#lt-script-gt-出现的位置" class="headerlink" title="&lt;script&gt;出现的位置"></a><code>&lt;script&gt;</code>出现的位置</h3><p>过去一般都会吧<code>&lt;script&gt;</code>标签统一放在<code>&lt;head&gt;</code>标签内, 例如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example html page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">scr</span>=<span class="string">&quot;example1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">scr</span>=<span class="string">&quot;example2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!---- 页面内容 ----&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样写的好处是将 css 和 js 都集中起来, 方便管理而且比较美观; 但是这样会导致在页面加载的过程中, 需要将所有的 js 文件全部下载并解释完毕之后才可以开始渲染, 导致页面出现明显的渲染延迟, 所以不推荐采用这样的方式;</p><p>现在一般都将 <code>&lt;script&gt;</code>统一放置在<code>&lt;body&gt;</code>元素的内容后面, 这样可以提高页面渲染的速度; 例如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;! DOCTYPE HTML&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example heml page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--- 页面内容 ----&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;example.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;example1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>javascript 是通过<code>&lt;script&gt;</code>标签插入到 html 代码中的, 这个元素可以用于把 js 代码嵌入到 html 页面中, 和其他标记混合在一起使用, 也可以用于引入保存在外部文件中的 js;</p><ul><li>  要包含外部的 js 文件, 必须将 <code>src</code>属性设置为要包含文件的 url 地址, 文件可以和网页在同一个域下也可以不在同一个域下;</li><li>  所有 <code>&lt;script&gt;</code>元素会按照它们在页面中出现的次序被解释, 在不使用<code>defer</code>和<code>async</code>属性的情况下, 包含在<code>&lt;script&gt;</code>元素中的代码会严格按照出现的次序依次执行;</li><li>  对不推迟执行的脚本, 浏览器必须解释完位于<code>&lt;script&gt;</code>元素中的代码, 然后才能继续渲染页面的剩余部分; 因此, 通常应该把<code>&lt;script&gt;</code>元素放在页面末尾, 介于主内容以及<code>&lt;/body&gt;</code>标签之前;</li><li>  可以使用 defer 属性把脚本推迟到文档渲染完毕之后再执行, 推迟的脚本原则上按照它们被列出的次序进行执行;</li><li>  可以使用 async 属性表示脚本不需要等待其他脚本, 同时也不阻塞文档的渲染, 即异步加载; 异步加载不能保证按照它们出现在页面的次序执行;</li></ul>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unidbg</title>
      <link href="unidbg/"/>
      <url>unidbg/</url>
      
        <content type="html"><![CDATA[<h1 id="unidbg-基本框架"><a href="#unidbg-基本框架" class="headerlink" title="unidbg 基本框架"></a>unidbg 基本框架</h1><h2 id="unidbg-构建-ByteArray-对象"><a href="#unidbg-构建-ByteArray-对象" class="headerlink" title="unidbg 构建 ByteArray 对象"></a>unidbg 构建 ByteArray 对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入通用且标准的类库</span></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.EmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ByteArray;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">oasis</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    oasis()&#123;</span><br><span class="line">        <span class="comment">// 创建模拟器实例, 进程名称建议依照时机进程名填写, 可以规避针对进程名的校验</span></span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.sina.oasis&quot;</span>).build();</span><br><span class="line">        <span class="comment">// 获取模拟器的内存操作接口</span></span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory();</span><br><span class="line">        <span class="comment">// 设置系统类库解析</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>));</span><br><span class="line">        <span class="comment">// 创建 Android 虚拟机, 传入 apk, Unidbg 可以帮助我们做部分前面检验工作</span></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;./unidbg-android/src/test/java/com/lession1/lvzhou.apk&quot;</span>));</span><br><span class="line">        <span class="comment">// 加载目标 so, true 表示是否自动调用 init_array 中方法</span></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;./unidbg-android/src/test/java/com/lession1/liboasiscore.so&quot;</span>), <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 获取加载的 so 模块的句柄</span></span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line">        <span class="comment">// 设置 jni</span></span><br><span class="line">        vm.setJni(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 打印日志</span></span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 调用 JNI_Onload</span></span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">invokeS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 构建参数</span></span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">// a1</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// a2 jobject or jclass 一般用不到, 可以填 0</span></span><br><span class="line">        String input = <span class="string">&quot;aid=01A-khBWIm48A079Pz_DMW6PyZR8&quot;</span> +</span><br><span class="line">                <span class="string">&quot;uyTumcCNm4e8awxyC2ANU.&amp;cfrom=28B529501&quot;</span> +</span><br><span class="line">                <span class="string">&quot;0&amp;cuid=5999578300&amp;noncestr=46274W9279Hr1&quot;</span> +</span><br><span class="line">                <span class="string">&quot;X49A5X058z7ZVz024&amp;platform=ANDROID&amp;timestamp&quot;</span> +</span><br><span class="line">                <span class="string">&quot;=1621437643609&amp;ua=Xiaomi-MIX2S__oasis__3.5.8_&quot;</span> +</span><br><span class="line">                <span class="string">&quot;_Android__Android10&amp;version=3.5.8&amp;vid=10190135&quot;</span> +</span><br><span class="line">                <span class="string">&quot;94003&amp;wm=20004_90024&quot;</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] inputBytes = input.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        ByteArray byteArray = <span class="keyword">new</span> ByteArray(vm,inputBytes);</span><br><span class="line">        list.add(vm.addLocalObject(byteArray));</span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// a4 boolean true 1 false 0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据地址进行函数调用</span></span><br><span class="line">        Number number = <span class="keyword">module</span>.callFunction(emulator, <span class="number">0xc365</span>, list.toArray())[<span class="number">0</span>];</span><br><span class="line">        String result = vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        oasis oasisObj = <span class="keyword">new</span> oasis();</span><br><span class="line">        String result = oasisObj.invokeS();</span><br><span class="line">        System.out.println(<span class="string">&quot;result: &quot;</span>+ result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="unidbg-构建参数"><a href="#unidbg-构建参数" class="headerlink" title="unidbg 构建参数"></a>unidbg 构建参数</h2><h2 id="unidbg-构建-String-对象"><a href="#unidbg-构建-String-对象" class="headerlink" title="unidbg 构建 String 对象"></a>unidbg 构建 String 对象</h2><h2 id="unidbg-构建-context-对象"><a href="#unidbg-构建-context-对象" class="headerlink" title="unidbg 构建 context 对象"></a>unidbg 构建 context 对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lesson2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入通用且标准的类库</span></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.pointer.UnidbgPointer;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.utils.Inspector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> keystone.Keystone;</span><br><span class="line"><span class="keyword">import</span> keystone.KeystoneArchitecture;</span><br><span class="line"><span class="keyword">import</span> keystone.KeystoneEncoded;</span><br><span class="line"><span class="keyword">import</span> keystone.KeystoneMode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">sina</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator androidEmulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DalvikModule dm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    sina() &#123;</span><br><span class="line">        <span class="comment">// 创建模拟器实例</span></span><br><span class="line">        androidEmulator =  AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.weico.international&quot;</span>).build();</span><br><span class="line">        <span class="comment">// 获取模拟器内存操作接口</span></span><br><span class="line">        <span class="keyword">final</span> Memory memory = androidEmulator.getMemory();</span><br><span class="line">        <span class="comment">// 设置系统类库解析</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>));</span><br><span class="line">        <span class="comment">// 创建 Android 虚拟机, 传入 apk, Unidbg 可以替我们做部分签名校验</span></span><br><span class="line">        vm = androidEmulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;./LibAndApk/sinaInternational.apk&quot;</span>));</span><br><span class="line">        <span class="comment">// 加载目标 so</span></span><br><span class="line">        dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;./LibAndApk/libutility.so&quot;</span>), <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 获取 so 模块的句柄, 后续需要使用</span></span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置 JNI</span></span><br><span class="line">        vm.setJni(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 设置日志</span></span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">calculateS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 构建参数 List</span></span><br><span class="line">        ArrayList&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数 JNIEnv</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// 第二个参数 jobject this 并未用到  传入 0</span></span><br><span class="line">        <span class="comment">// 第三个参数 context, 使用 vm.resolveClass 获取 java 层的类, className 使用类签名, newObject() 新建对象</span></span><br><span class="line">        DvmObject&lt;?&gt; context = vm.resolveClass(<span class="string">&quot;android/content/Context&quot;</span>).newObject(<span class="keyword">null</span>); <span class="comment">// context</span></span><br><span class="line">        <span class="comment">// 除了基本类型，比如 int，long 等，其他的对象类型一律要手动 addLocalObject。</span></span><br><span class="line">        list.add(vm.addLocalObject(context));</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> StringObject(vm,<span class="string">&quot;aa123&quot;</span>)));</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> StringObject(vm, <span class="string">&quot;CypCHG2kSlRkdvr2RG1QF8b2lCWXl7k7&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主动调用 因为是 thumb 指令集, 需要地址+1</span></span><br><span class="line">        Number number = <span class="keyword">module</span>.callFunction(androidEmulator, <span class="number">0x1E7C</span> + <span class="number">1</span>, list.toArray())[<span class="number">0</span>];</span><br><span class="line">        String result = vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        sina test = <span class="keyword">new</span> sina();</span><br><span class="line">        test.calculateS();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="unidbg-添加-patch"><a href="#unidbg-添加-patch" class="headerlink" title="unidbg 添加 patch"></a>unidbg 添加 patch</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lesson2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入通用且标准的类库</span></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.pointer.UnidbgPointer;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.utils.Inspector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> keystone.Keystone;</span><br><span class="line"><span class="keyword">import</span> keystone.KeystoneArchitecture;</span><br><span class="line"><span class="keyword">import</span> keystone.KeystoneEncoded;</span><br><span class="line"><span class="keyword">import</span> keystone.KeystoneMode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">sina</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator androidEmulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DalvikModule dm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    sina() &#123;</span><br><span class="line">        <span class="comment">// 创建模拟器实例</span></span><br><span class="line">        androidEmulator =  AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.weico.international&quot;</span>).build();</span><br><span class="line">        <span class="comment">// 获取模拟器内存操作接口</span></span><br><span class="line">        <span class="keyword">final</span> Memory memory = androidEmulator.getMemory();</span><br><span class="line">        <span class="comment">// 设置系统类库解析</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>));</span><br><span class="line">        <span class="comment">// 创建 Android 虚拟机, 传入 apk, Unidbg 可以替我们做部分签名校验</span></span><br><span class="line">        vm = androidEmulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;./LibAndApk/sinaInternational.apk&quot;</span>));</span><br><span class="line">        <span class="comment">// 加载目标 so</span></span><br><span class="line">        dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;./LibAndApk/libutility.so&quot;</span>), <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 获取 so 模块的句柄, 后续需要使用</span></span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置 JNI</span></span><br><span class="line">        vm.setJni(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 设置日志</span></span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">calculateS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 构建参数 List</span></span><br><span class="line">        ArrayList&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数 JNIEnv</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// 第二个参数 jobject this 并未用到  传入 0</span></span><br><span class="line">        <span class="comment">// 第三个参数 context, 使用 vm.resolveClass 获取 java 层的类, className 使用类签名, newObject() 新建对象</span></span><br><span class="line">        DvmObject&lt;?&gt; context = vm.resolveClass(<span class="string">&quot;android/content/Context&quot;</span>).newObject(<span class="keyword">null</span>); <span class="comment">// context</span></span><br><span class="line">        <span class="comment">// 除了基本类型，比如 int，long 等，其他的对象类型一律要手动 addLocalObject。</span></span><br><span class="line">        list.add(vm.addLocalObject(context));</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> StringObject(vm,<span class="string">&quot;aa123&quot;</span>)));</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> StringObject(vm, <span class="string">&quot;CypCHG2kSlRkdvr2RG1QF8b2lCWXl7k7&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主动调用 因为是 thumb 指令集, 需要地址+1</span></span><br><span class="line">        Number number = <span class="keyword">module</span>.callFunction(androidEmulator, <span class="number">0x1E7C</span> + <span class="number">1</span>, list.toArray())[<span class="number">0</span>];</span><br><span class="line">        String result = vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手动打 patch</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">patch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 需要注意的是，这儿地址可别 + 1 了，Thumb 的 + 1 只在运行和 Hook 时需要考虑，打 Patch 可别想</span></span><br><span class="line">        <span class="keyword">int</span> patchCode = <span class="number">0x4FF00100</span>; <span class="comment">// mov r0, 1</span></span><br><span class="line">        <span class="comment">// 源代码: FF F7 EB FE  --&gt;  BL sub_1C60</span></span><br><span class="line">        androidEmulator.getMemory().pointer(<span class="keyword">module</span>.base + <span class="number">0x1E86</span>).setInt(<span class="number">0</span>, patchCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动态打 patch</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">patch1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UnidbgPointer pointer = UnidbgPointer.pointer(androidEmulator, <span class="keyword">module</span>.base + <span class="number">0x1E86</span>);</span><br><span class="line">        <span class="keyword">assert</span> pointer != <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] code = pointer.getByteArray(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span> (!Arrays.equals(code, <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;(<span class="keyword">byte</span>) <span class="number">0xFF</span>, (<span class="keyword">byte</span>) <span class="number">0xF7</span>, (<span class="keyword">byte</span>) <span class="number">0xEB</span>, (<span class="keyword">byte</span>) <span class="number">0xFE</span>&#125;)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(Inspector.inspectString(code, <span class="string">&quot;patch32 code=&quot;</span> + Arrays.toString(code)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Keystone keystone = <span class="keyword">new</span> Keystone(KeystoneArchitecture.Arm, KeystoneMode.ArmThumb);</span><br><span class="line">            KeystoneEncoded assemble = keystone.assemble(<span class="string">&quot;mov r0, 1&quot;</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] patch = assemble.getMachineCode();</span><br><span class="line">            <span class="keyword">if</span> (patch.length != code.length) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(Inspector.inspectString(patch, <span class="string">&quot;patch32 length=&quot;</span> + patch.length));</span><br><span class="line">            &#125;</span><br><span class="line">            pointer.write(<span class="number">0</span>, patch, <span class="number">0</span>, patch.length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        sina test = <span class="keyword">new</span> sina();</span><br><span class="line">        test.patch();</span><br><span class="line">        test.patch1();</span><br><span class="line">        test.calculateS();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> unidbg </category>
          
      </categories>
      
      
        <tags>
            
            <tag> so </tag>
            
            <tag> unidbg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序是怎么跑起来的</title>
      <link href="computerhowtorun/"/>
      <url>computerhowtorun/</url>
      
        <content type="html"><![CDATA[<h1 id="cpu-是什么"><a href="#cpu-是什么" class="headerlink" title="cpu 是什么"></a>cpu 是什么</h1><ul><li>程序是什么<ul><li>  指示计算机每一步动作的一组指令</li><li>  可以理解成行事的先后顺序</li></ul></li><li>程序是由什么组成的<ul><li>  指令和数据组成</li><li>  程序是指令和数据的组合体, 例如, C 语言中<code>printf(&quot;你好&quot;);</code> 这个简单的程序中, <code>printf</code>是指令, <code>&quot;你好&quot;</code>是数据;</li></ul></li><li>什么是机器语言<ul><li>  cpu 可以识别和直接使用的语言</li><li>  cpu 能够直接识别和执行的只有机器语言, 使用 C, java等语言进行开发, 最后都会转化成机器语言;</li></ul></li><li>正在运行的程序存在什么位置<ul><li>  内存</li><li>  硬件和磁盘等媒介上保存的程序被复制到内存后才能运行;</li></ul></li><li>什么是内存地址<ul><li>  内存中, 用来表示命令和数据存储位置的数值就是地址</li><li>  内存中保存命令和数据的场所, 通过地址来标记和指定, 地址由整数值来表示;</li></ul></li><li>计算机的构成元件中, 负责程序的解释和运行的是哪个<ul><li>  cpu</li><li>  计算机的构成元件中, 根据程序的指令来进行数据运算, 并控制整个计算机的设备称作 cpu;</li></ul></li></ul><h2 id="cpu-结构和简单运行"><a href="#cpu-结构和简单运行" class="headerlink" title="cpu 结构和简单运行"></a>cpu 结构和简单运行</h2><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-04-28-050812.png"></p><p>cpu 内部由寄存器, 控制器, 运算器和时钟四个部分构成, 各个部分之间通过电流信号相互连通</p><ol><li> 寄存器: 可用来暂存指令, 数据等处理对象, 可以将其看做内存的一种; 根据种类的不同, 一个 cpu 内部会有 20-100 个寄存器;</li><li> 控制器: 负责把内存上的指令, 数据等读入寄存器, 并根据指令的执行结果来控制整个计算机; </li><li> 运算器: 运算器负责运算从内存读取到寄存器中的数据, </li><li> 时钟: 负责发出 cpu 开始计时的时钟信号; 不过有些 cpu 的时钟位于 cpu 外部;</li></ol><p>cpu 的简单运行:</p><ol><li> 程序启动后, 根据时钟信号, 控制器从内存中的读取指令和数据</li><li> 通过对这些指令和数据加以解释和运行, 运算器就会对数据进行运算</li><li> 控制器根据运算的结果来控制计算机; 这里的控制简单可以理解为数据运算之外的处理, 主要是数据的输入输出的时机控制, 比如内存和磁盘等媒介的输入输出, 键盘和鼠标的输入, 显示器和打印机的输出等, 这些都是控制的内容;</li></ol><h2 id="内存简介"><a href="#内存简介" class="headerlink" title="内存简介"></a>内存简介</h2><p>通常所说的内存指的是计算机的主存储器, 简称主存; 主存通过控制芯片等于 cpu 相连, 主要负责存储指令和数据; 主存由可读写的元素构成, 每个字节(1 字节=  8 位 )都带有一个地址编号; cpu 通过该地址读取主存中的指令和数据, 当然也可以写入数据;</p><h2 id="cpu-是寄存器的集合体"><a href="#cpu-是寄存器的集合体" class="headerlink" title="cpu 是寄存器的集合体"></a>cpu 是寄存器的集合体</h2><p>cpu 的四个构成部分中, 程序员只要了解寄存器即可, 其他三个不用太过于关注; 因为程序是把寄存器作为对象来描述的</p><p>内存的存储场所通过地址编号来区分, 而寄存器的种类则通过寄存器名称来区分;</p><p>寄存器中存储的内容可以是指令也可是是数据; 数据分为 <code>用于运算的数值</code> 和 <code>表示内存地址的数值</code> 两种;</p><p>寄存器的主要种类和功能:</p><table><thead><tr><th>种类</th><th>功能</th></tr></thead><tbody><tr><td>累加寄存器 (accumulator register)</td><td>存储执行运算的数据和运算后的数据</td></tr><tr><td>标志寄存器 (flag register)</td><td>存储运算处理后的 cpu 的状态</td></tr><tr><td>程序计数器 (program register)</td><td>存储下一条指令所在内存的地址</td></tr><tr><td>基址寄存器 (base register)</td><td>存储数据内存的起始地址</td></tr><tr><td>变址寄存器 (index register)</td><td>存储基址寄存器的相对地址</td></tr><tr><td>通用寄存器 (general purpose register)</td><td>存储任意数据</td></tr><tr><td>指令寄存器 (instruction register)</td><td>存储指令, cpu 内部使用, 程序员无法通过程序对该寄存器进行读写操作</td></tr><tr><td>栈寄存器 (stack register)</td><td>存储栈区域的起始地址</td></tr></tbody></table><h3 id="pc-程序计数器"><a href="#pc-程序计数器" class="headerlink" title="pc 程序计数器"></a>pc 程序计数器</h3><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-04-28-061038.png"></p><p>注: 为了方便演示, 把指令和数据分配到了一个地址中; 实际上, 一个命令和数据通常被存储在多个地址上;</p><ul><li>   地址 0100 是程序运行的开始位置, 操作系统将程序从硬盘复制到内存后, 会将程序计数器设定为 0100, 然后程序开始运行</li><li>  cpu 每执行一条指令, 程序计数器的值会自动增加一个指令的长度; 这里是+1, 当执行的指令占据多个内存地址时, 增加于指令长度相应的数值;</li><li>  cpu 的控制器会参照程序计数器的数值, 从内存中读取命令并执行, 也就是说, 程序计数器决定着程序的流程</li></ul><h3 id="条件分支和循环"><a href="#条件分支和循环" class="headerlink" title="条件分支和循环"></a>条件分支和循环</h3><p>程序的流程分为顺序执行, 条件分支和循环三种;</p><p>顺序执行是指按照地址内容的顺序执行指令</p><p>条件分支是指根据条件执行任意地址的指令</p><p>循环是指重复执行同一地址的指令</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-04-28-061755.png"></p><p>该案例是将存储在 0x0106地址的数值的绝对值显示打印到屏幕上的脚本;</p><ul><li>  程序运行的起始地址为0x0100</li><li>  当程序运行到 0x0102 时, 如果此时累加器的值是正数, 则执行跳转指令, jump 到 0x0140 地址; 如果不是, 则顺序执行 0x103 的指令;</li><li>  此时累加寄存器中的值为 123, 大于 0, 满足跳转的条件; ,跳转指令间接执行了将程序的 pc 计数器设定为 0x104 地址的操作</li></ul><h3 id="标志位寄存器"><a href="#标志位寄存器" class="headerlink" title="标志位寄存器"></a>标志位寄存器</h3><p>在上一个案例中, 我们提到了根据寄存器中的值是否大于 0 进行判断接下来的指令是否需要跳转; 无论当前累加寄存器的运算结构是负数, 零还是正数, 标志寄存器都会将其保存, 同时标志寄存器也负责存放溢出和奇偶校验的结果;</p><p>cpu 在进行运算时, 标志寄存器的数值会根据运算结果自动设定, 条件分支在跳转指令前会进行比较运算, 至于是否执行跳转指令, 则由 cpu 在参考标志寄存器的数值后进行判断; 运算结果的正负零三种状态由标志寄存器的三个位表示; 示例为 32 位 cpu (寄存器长度为 32 位)的标志寄存器; 标志寄存器的第一个字节位,第二个字节位,第三个字节位为 1 的时候, 表示运算结果分别为正数, 零和负数;</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-04-28-063534.png"></p><h3 id="函数的调用机制"><a href="#函数的调用机制" class="headerlink" title="函数的调用机制"></a>函数的调用机制</h3><p>函数的调用是通过把程序的计数器的值设定为函数的存储地址来实现的; 函数的调用需要完成函数内部的处理后, 处理流程再返回到函数调用点的下一个地址, 所以如果只是修改 pc 指向函数起始的入口地址是不够的, 还需要考虑函数处理之后返回的问题;</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-04-28-063823.png" alt="image-20210428143823237"></p><p>机器语言中使用 call 和 return 来解决函数调用的问题, 函数调用使用的是 call 指令, 而不是跳转指令, 在将函数的入口设定到程序计数器之前, call 指令会把调用函数后要执行的指令地址存储在栈中, 函数处理完毕后, 再通过函数的出口来执行 return 命令, return 命令的功能是把保存在栈中的地址设定到程序计数器中;</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-04-28-064123.png"></p><h3 id="通过地址和索引实现数组"><a href="#通过地址和索引实现数组" class="headerlink" title="通过地址和索引实现数组"></a>通过地址和索引实现数组</h3><p>基址寄存器和变址寄存器, 通过这两个寄存器, 我们对内存上特定的区域进行划分, 从而实现类似于数组的操作;</p><p>如果用十六进制将计算机内存上 00000000-FFFFFFFF 的地址划分出来, 那么凡是该范围的内存区域, 只要有一个 32 位的寄存器, 就可以查看到全部的内存地址; 但如果想要像数组一样分割特定内存区域以达到连续查看的目的, 使用两个寄存器会更方便一些; 例如: 查看 10000000-1000FFFF 地址时, 可以将 10000000 作为基础地址存入基址寄存器, 并使变址寄存器在 00000000-0000FFFF 变化;</p><p>cpu 会将基址寄存器 + 变址寄存器的值解释为实际查看的内存地址;</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-04-28-064727.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 程序是怎么跑起来的 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>携程机票</title>
      <link href="xiecheng/"/>
      <url>xiecheng/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inputStr = <span class="string">&quot;@BEIJING|北京(BJS)|1|BJS||@SHANGHAI|上海(SHA)|2|SHA||@TIANJIN|天津(TSN)|3|TSN||@CHONGQING|重庆(CKG)|4|CKG||@HAERBIN|哈尔滨(HRB)|5|HRB||@DALIAN|大连(DLC)|6|DLC||@QINGDAO|青岛(TAO)|7|TAO||@XIAN|西安(SIA)|10|SIA||@DUNHUANG|敦煌(DNH)|11|DNH||@NANJING|南京(NKG)|12|NKG||@WUXI|无锡(WUX)|13|WUX||@YANGZHOU|扬州(YTY)|15|YTY||@HANGZHOU|杭州(HGH)|17|HGH||@ZHOUSHAN|舟山(HSN)|19|HSN||@HUANGSHAN|黄山(TXN)|23|TXN||@JIUJIANG|九江(JIU)|24|JIU||@XIAMEN|厦门(XMN)|25|XMN||@WUYISHAN|武夷山(WUS)|26|WUS||@ZHANGJIAJIE|张家界(DYG)|27|DYG||@CHENGDU|成都(CTU)|28|CTU||@SHENZHEN|深圳(SZX)|30|SZX||@ZHUHAI|珠海(ZUH)|31|ZUH||@GUANGZHOU|广州(CAN)|32|CAN||@GUILIN|桂林(KWL)|33|KWL||@KUNMING|昆明(KMG)|34|KMG||@XISHUANGBANNA|西双版纳(JHG)|35|JHG||@DALI|大理市(DLU)|36|DLU||@LIJIANG|丽江(LJG)|37|LJG||@GUIYANG|贵阳(KWE)|38|KWE||@WULUMUQI|乌鲁木齐(URC)|39|URC||@LASA|拉萨(LXA)|41|LXA||@HAIKOU|海口(HAK)|42|HAK||@SANYA|三亚(SYX)|43|SYX||@NANTONG|南通(NTG)|82|NTG||@JIUZHAIGOU|九寨沟(JZH)|91|JZH||@RIKAZE|日喀则(RKZ)|92|RKZ||@DIQING|迪庆(DIG)|93|DIG||@ALI|阿里(NGQ)|97|NGQ||@YINCHUAN|银川(INC)|99|INC||@LANZHOU|兰州(LHW)|100|LHW||@HUHEHAOTE|呼和浩特(HET)|103|HET||@TAIYUAN|太原(TYN)|105|TYN||@LINZHI|林芝(LZY)|108|LZY||@KASHI|喀什市(KHG)|109|KHG||@YANAN|延安(ENY)|110|ENY||@XINING|西宁(XNN)|124|XNN||@HANZHONG|汉中(HZG)|129|HZG||@GEERMU|格尔木(GOQ)|132|GOQ||@DATONG|大同(DAT)|136|DAT||@CHANGZHI|长治(CIH)|137|CIH||@YUNCHENG|运城(YCU)|140|YCU||@BAOTOU|包头(BAV)|141|BAV||@HAILAER|海拉尔(HLD)|142|HLD||@JINAN|济南(TNA)|144|TNA||@QINHUANGDAO|秦皇岛(BPE)|147|BPE||@QIQIHAER|齐齐哈尔(NDG)|149|NDG||@MUDANJIANG|牡丹江(MDG)|150|MDG||@MOHE|漠河(OHE)|155|OHE||@JIXI|鸡西(JXA)|157|JXA||@CHANGCHUN|长春(CGQ)|158|CGQ||@JILIN|吉林(JIL)|159|JIL||@KELAMAYI|克拉玛依(KRY)|166|KRY||@ANKANG|安康(AKA)|171|AKA||@AKESU|阿克苏(AKU)|173|AKU||@ALETAI|阿勒泰(AAT)|175|AAT||@ANQING|安庆(AQG)|177|AQG||@ANSHAN|鞍山(AOG)|178|AOG||@ANSHUN|安顺(AVA)|179|AVA||@BEIHAI|北海(BHY)|189|BHY||@BAOSHAN|保山(BSD)|197|BSD||@CHANGBAISHAN|长白山(NBS)|199|NBS||@CHANGDE|常德(CGD)|201|CGD||@CHIFENG|赤峰(CIF)|202|CIF||@CHANGSHA|长沙(CSX)|206|CSX||@CHAOYANG|朝阳(CHG)|211|CHG||@CHANGZHOU|常州(CZX)|213|CZX||@DANDONG|丹东(DDG)|221|DDG||@DAQING|大庆(DQA)|231|DQA||@DAXIAN|达县(DAX)|234|DAX||@DONGYING|东营(DOY)|236|DOY||@ENSHI|恩施(ENH)|245|ENH||@FOSHAN|佛山(FUO)|251|FUO||@FUYANG|阜阳(FUG)|257|FUG||@FUZHOU|福州(FOC)|258|FOC||@GUANGYUAN|广元(GYS)|267|GYS||@GANZHOU|赣州(KOW)|268|KOW||@HANDAN|邯郸(HDG)|275|HDG||@HEFEI|合肥(HFE)|278|HFE||@HEIHE|黑河(HEK)|281|HEK||@HUAIHUA|怀化(HJJ)|282|HJJ||@HAMI|哈密市(HMI)|285|HMI||@HETIAN|和田市(HTN)|294|HTN||@HENGYANG|衡阳(HNY)|297|HNY||@HUIZHOU|惠州(HUZ)|299|HUZ||@JINGDEZHEN|景德镇(JDZ)|305|JDZ||@JINGGANGSHAN|井冈山(JGS)|307|JGS||@JIAMUSI|佳木斯(JMU)|317|JMU||@JINING|济宁(JNG)|318|JNG||@GUYUAN|固原(GYU)|321|GYU||@JIAYUGUAN|嘉峪关(JGN)|326|JGN||@JINZHOU|锦州(JNZ)|327|JNZ||@JINGZHOU|荆州(SHS)|328|SHS||@KUCHE|库车(KCA)|329|KCA||@KUERLE|库尔勒(KRL)|330|KRL||@LONGYAN|龙岩(LCX)|348|LCX||@LUOYANG|洛阳(LYA)|350|LYA||@LIANYUNGANG|连云港(LYG)|353|LYG||@LIUZHOU|柳州(LZH)|354|LZH||@LUZHOU|泸州(LZO)|355|LZO||@DEHONG|德宏(LUM)|365|LUM||@MIANYANG|绵阳(MIG)|370|MIG||@NINGBO|宁波(NGB)|375|NGB||@NANCHANG|南昌(KHN)|376|KHN||@NANCHONG|南充(NAO)|377|NAO||@NANNING|南宁(NNG)|380|NNG||@NANYANG|南阳(NNY)|385|NNY||@QIEMO|且末(IQM)|399|IQM||@QINGYANG|庆阳(IQN)|404|IQN||@QUZHOU|衢州(JUZ)|407|JUZ||@LIANGPING|梁平(LIA)|427|LIA||@SHIJIAZHUANG|石家庄(SJW)|428|SJW||@SHENYANG|沈阳(SHE)|451|SHE||@TACHENG|塔城(TCG)|455|TCG||@TONGLIAO|通辽(TGO)|458|TGO||@TIANSHUI|天水(THQ)|464|THQ||@TANGSHAN|唐山(TVS)|468|TVS||@WEIFANG|潍坊(WEF)|475|WEF||@WUHAN|武汉(WUH)|477|WUH||@WEIHAI|威海(WEH)|479|WEH||@WULANHAOTE|乌兰浩特(HLH)|484|HLH||@WANZHOU|万州(WXN)|487|WXN||@WENZHOU|温州(WNZ)|491|WNZ||@WUZHOU|梧州(WUZ)|492|WUZ||@XICHANG|西昌(XIC)|494|XIC||@XIANGYANG|襄阳(中国)(XFN)|496|XFN||@XILINHAOTE|锡林浩特(XIL)|500|XIL||@XUZHOU|徐州(XUZ)|512|XUZ||@YIBIN|宜宾(YBP)|514|YBP||@YICHANG|宜昌(YIH)|515|YIH||@YICHUN|伊春(LDS)|517|LDS||@YANJI|延吉(YNJ)|523|YNJ||@YULIN|榆林(UYN)|527|UYN||@YINING|伊宁市(YIN)|529|YIN||@YANTAI|烟台(YNT)|533|YNT||@YIWU|义乌(YIW)|536|YIW||@ZHANJIANG|湛江(ZHA)|547|ZHA||@ZHONGSHAN|中山(ZGN)|553|ZGN||@ZHAOTONG|昭通(ZAT)|555|ZAT||@ZHONGWEI|中卫(ZHY)|556|ZHY||@ZUNYI|遵义(ZYI)|558|ZYI||@ZHENGZHOU|郑州(CGO)|559|CGO||@LINYI|临沂(LYI)|569|LYI||@CHANGDU|昌都(BPX)|575|BPX||@HUAIAN|淮安(HIA)|577|HIA||@TAIZHOU|台州(HYN)|578|HYN||@LIUPANSHUI|六盘水(LPF)|605|LPF||@ZHANGYE|张掖(YZY)|663|YZY||@LINXI|林西(LXI)|744|LXI||@GUANGHUA|光化(LHK)|746|LHK||@GUANGHAN|广汉(GHN)|750|GHN||@JIEYANG|揭阳(SWA)|956|SWA||@JIEYANG|汕头(SWA)|956|SWA||@YONGZHOU|永州(LLF)|970|LLF||@MANZHOULI|满洲里(NZH)|1083|NZH||@PANZHIHUA|攀枝花(PZI)|1097|PZI||@WUHAI|乌海(WUA)|1133|WUA||@XINGYI|兴义(ACX)|1139|ACX||@BAISE|百色(AEB)|1140|AEB||@JIAGEDAQI|加格达奇(JGD)|1143|JGD||@JINCHANG|金昌(JIC)|1158|JIC||@YANCHENG|盐城(YNZ)|1200|YNZ||@TONGREN|铜仁市(TEN)|1227|TEN||@LINCANG|临沧(LNJ)|1236|LNJ||@WENSHAN|文山县(WNH)|1342|WNH||@AERSHAN|阿尔山(YIE)|1658|YIE||@LIBO|荔波(LLB)|1708|LLB||@JINJIANG|晋江(JJN)|1803|JJN||@JINJIANG|泉州(JJN)|1803|JJN||@JINJIANG|石狮(JJN)|1803|JJN||@TENGCHONG|腾冲(TCZ)|1819|TCZ||@BOLE|博乐(BPL)|2548|BPL||@MEIZHOU|梅州(MXZ)|3053|MXZ||@KANASI|喀纳斯(KJI)|3326|KJI||@NALATI|那拉提(NLT)|3360|NLT||@LIPING|黎平(HZH)|3852|HZH||@BAYANNAOER|巴彦淖尔(RLK)|3887|RLK||@EERDUOSI|鄂尔多斯(DSN)|3976|DSN||@PUER|普洱(SYM)|3996|SYM||@KANGDING|康定(KGT)|4130|KGT||@YUSHU|玉树县(YUS)|7582|YUS||@ELIANHAOTE|二连浩特(ERL)|7626|ERL||@QIANJIANG|黔江(JIQ)|7708|JIQ||@TULUFAN|吐鲁番(TLQ)|21811|TLQ||@MANGSHI|芒市(LUM)|3997|LUM||@&quot;</span></span><br><span class="line"></span><br><span class="line">cityList = re.findall(<span class="string">r&#x27;@.*?\|\|&#x27;</span>, inputStr)</span><br><span class="line">cityResult = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> cityList:</span><br><span class="line">    cityCode = each.split(<span class="string">&quot;|&quot;</span>)[-<span class="number">3</span>]</span><br><span class="line">    city = re.search(<span class="string">r&#x27;\|(.*?)\(&#x27;</span>,each).group(<span class="number">1</span>)</span><br><span class="line">    cityResult[cityCode] = city</span><br><span class="line"></span><br><span class="line">print(cityResult)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFlight</span>(<span class="params">transactionID</span>):</span></span><br><span class="line">    departureCityCode = <span class="string">&quot;NGB&quot;</span></span><br><span class="line">    arrivalCityCode = <span class="string">&quot;DLC&quot;</span></span><br><span class="line">    departureDate = <span class="string">&quot;2021-04-02&quot;</span></span><br><span class="line">    md = hashlib.md5()</span><br><span class="line">    md.update((transactionID + departureCityCode + arrivalCityCode + departureDate).encode())</span><br><span class="line">    sign = md.hexdigest()</span><br><span class="line">    print(<span class="string">&quot;sign&quot;</span>, sign)</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;authority&#x27;</span>: <span class="string">&#x27;flights.ctrip.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pragma&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;cache-control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot;Google Chrome&quot;;v=&quot;89&quot;, &quot;Chromium&quot;;v=&quot;89&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sign&#x27;</span>: sign,  <span class="comment"># md5（transactionID  +起始地三字码+降落的三字码+出发时间）</span></span><br><span class="line">        <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 11_2_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json;charset=UTF-8&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;scope&#x27;</span>: <span class="string">&#x27;d&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;transactionid&#x27;</span>: transactionID,</span><br><span class="line">        <span class="string">&#x27;origin&#x27;</span>: <span class="string">&#x27;https://flights.ctrip.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-fetch-site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-fetch-mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-fetch-dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://flights.ctrip.com/international/search/oneway-ngb-dlc?depdate=2021-03-17&amp;cabin=Y_S_C_F&amp;containstax=1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;accept-language&#x27;</span>: <span class="string">&#x27;zh,zh-CN;q=0.9&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    params = (</span><br><span class="line">        (<span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;0.7611761915255784&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;flightWayEnum&quot;</span>: <span class="string">&quot;OW&quot;</span>,</span><br><span class="line">        <span class="string">&quot;arrivalProvinceId&quot;</span>: <span class="number">7</span>,</span><br><span class="line">        <span class="string">&quot;extGlobalSwitches&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;useAllRecommendSwitch&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">            <span class="string">&quot;unfoldPriceListSwitch&quot;</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;arrivalCountryName&quot;</span>: <span class="string">&quot;中国&quot;</span>,</span><br><span class="line">        <span class="string">&quot;infantCount&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;cabin&quot;</span>: <span class="string">&quot;Y_S_C_F&quot;</span>,</span><br><span class="line">        <span class="string">&quot;cabinEnum&quot;</span>: <span class="string">&quot;Y_S_C_F&quot;</span>,</span><br><span class="line">        <span class="string">&quot;departCountryName&quot;</span>: <span class="string">&quot;中国&quot;</span>,</span><br><span class="line">        <span class="string">&quot;flightSegments&quot;</span>: [&#123;</span><br><span class="line">            <span class="string">&quot;departureDate&quot;</span>: departureDate,</span><br><span class="line">            <span class="string">&quot;arrivalProvinceId&quot;</span>: <span class="number">7</span>,</span><br><span class="line">            <span class="string">&quot;arrivalCountryName&quot;</span>: <span class="string">&quot;中国&quot;</span>,</span><br><span class="line">            <span class="string">&quot;arrivalCountryCode&quot;</span>: <span class="string">&quot;CN&quot;</span>,</span><br><span class="line">            <span class="string">&quot;departureCityName&quot;</span>: <span class="string">&quot;宁波&quot;</span>,</span><br><span class="line">            <span class="string">&quot;departureCityCode&quot;</span>: departureCityCode,</span><br><span class="line">            <span class="string">&quot;departureCountryName&quot;</span>: <span class="string">&quot;中国&quot;</span>,</span><br><span class="line">            <span class="string">&quot;departureCountryCode&quot;</span>: <span class="string">&quot;CN&quot;</span>,</span><br><span class="line">            <span class="string">&quot;arrivalCityName&quot;</span>: <span class="string">&quot;大连&quot;</span>,</span><br><span class="line">            <span class="string">&quot;arrivalCityCode&quot;</span>: arrivalCityCode,</span><br><span class="line">            <span class="string">&quot;departureCityTimeZone&quot;</span>: <span class="number">480</span>,</span><br><span class="line">            <span class="string">&quot;arrivalCountryId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;timeZone&quot;</span>: <span class="number">480</span>,</span><br><span class="line">            <span class="string">&quot;departureCityId&quot;</span>: <span class="number">375</span>,</span><br><span class="line">            <span class="string">&quot;departureCountryId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;arrivalCityTimeZone&quot;</span>: <span class="number">480</span>,</span><br><span class="line">            <span class="string">&quot;departureProvinceId&quot;</span>: <span class="number">16</span>,</span><br><span class="line">            <span class="string">&quot;arrivalCityId&quot;</span>: <span class="number">6</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="string">&quot;childCount&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;segmentNo&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;scope&quot;</span>: <span class="string">&quot;d&quot;</span>,</span><br><span class="line">        <span class="string">&quot;adultCount&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;extensionAttributes&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;LoggingSampling&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">            <span class="string">&quot;isFlightIntlNewUser&quot;</span>: <span class="string">&quot;false&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;transactionID&quot;</span>: transactionID,</span><br><span class="line">        <span class="string">&quot;directFlight&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">        <span class="string">&quot;departureCityId&quot;</span>: <span class="number">375</span>,</span><br><span class="line">        <span class="string">&quot;isMultiplePassengerType&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;noRecommend&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">        <span class="string">&quot;army&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;flightWay&quot;</span>: <span class="string">&quot;S&quot;</span>,</span><br><span class="line">        <span class="string">&quot;arrivalCityId&quot;</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="string">&quot;departProvinceId&quot;</span>: <span class="number">16</span></span><br><span class="line">    &#125;</span><br><span class="line">    data = json.dumps(data)</span><br><span class="line"></span><br><span class="line">    response = requests.post(<span class="string">&#x27;https://flights.ctrip.com/international/search/api/search/batchSearch&#x27;</span>, headers=headers,</span><br><span class="line">                             params=params, data=data)</span><br><span class="line">    print(response.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getTransctionID</span>():</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;authority&#x27;</span>: <span class="string">&#x27;flights.ctrip.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pragma&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;cache-control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;upgrade-insecure-requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 11_2_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-fetch-site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-fetch-mode&#x27;</span>: <span class="string">&#x27;navigate&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-fetch-user&#x27;</span>: <span class="string">&#x27;?1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-fetch-dest&#x27;</span>: <span class="string">&#x27;document&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot;Google Chrome&quot;;v=&quot;89&quot;, &quot;Chromium&quot;;v=&quot;89&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://flights.ctrip.com/international/search/domestic?allianceid=4899&amp;sid=155997&amp;utm_medium=google&amp;utm_campaign=pp&amp;utm_source=googleppc&amp;gclid=Cj0KCQjw0caCBhCIARIsAGAfuMyq6upHCSOwQk_8QuJYNH03rdjpRFmASxulJApDlLImIriKQf3kO3IaArHCEALw_wcB&amp;gclsrc=aw.ds&amp;keywordid=2642337343-70570537617&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;accept-language&#x27;</span>: <span class="string">&#x27;zh,zh-CN;q=0.9&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    params = (</span><br><span class="line">        (<span class="string">&#x27;depdate&#x27;</span>, <span class="string">&#x27;2021-03-18&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;cabin&#x27;</span>, <span class="string">&#x27;Y_S_C_F&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    response = requests.get(<span class="string">&#x27;https://flights.ctrip.com/international/search/oneway-ngb-bjs&#x27;</span>, headers=headers,</span><br><span class="line">                            params=params)</span><br><span class="line">    transactionID = re.search(<span class="string">r&#x27;&quot;transactionID&quot;:&quot;(.*?)&quot;&#x27;</span>,response.text).group(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> transactionID</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    transactionID = getTransctionID()</span><br><span class="line">    getFlight(transactionID)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微店</title>
      <link href="weidian/"/>
      <url>weidian/</url>
      
        <content type="html"><![CDATA[<ul><li>  微店搜索接口</li><li>  微店店铺所有商品</li><li>  微店商品详情页</li><li>  微店店铺信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> Padding</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params"><span class="built_in">input</span></span>):</span></span><br><span class="line">    key = <span class="string">&quot;6cec4a8b268b8749dfa0bd409effcd08&quot;</span></span><br><span class="line">    data = gzip.compress(<span class="built_in">input</span>.encode())</span><br><span class="line">    data = Padding.pad(data, AES.block_size, <span class="string">&#x27;pkcs7&#x27;</span>)</span><br><span class="line">    aes = AES.new(<span class="built_in">bytes</span>.fromhex(key), AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">return</span> b64encode(aes.encrypt(data)).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>(<span class="params">content</span>):</span></span><br><span class="line">    key = <span class="string">&quot;6cec4a8b268b8749dfa0bd409effcd08&quot;</span></span><br><span class="line">    aes = AES.new(<span class="built_in">bytes</span>.fromhex(key), AES.MODE_ECB)</span><br><span class="line">    data = Padding.unpad(aes.decrypt(content), AES.block_size, <span class="string">&#x27;pkcs7&#x27;</span>)</span><br><span class="line">    print(data.decode())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSign</span>(<span class="params">data</span>):</span></span><br><span class="line">    salt = <span class="string">&quot;2a7d5d1d3c0a4df08bfbacd58fb0748d&quot;</span></span><br><span class="line">    ori = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">sorted</span>(data):</span><br><span class="line">        ori += i + <span class="string">&quot;=&quot;</span> + data[i] + <span class="string">&quot;&amp;&quot;</span></span><br><span class="line">    ori += salt</span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    md5.update(ori.encode())</span><br><span class="line">    sign_ = md5.hexdigest().upper()</span><br><span class="line"></span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    md5.update((sign_ + salt).encode())</span><br><span class="line">    sign = md5.hexdigest().upper()</span><br><span class="line">    <span class="keyword">return</span> sign</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键词搜索</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSkuList</span>(<span class="params">city, keyword, page</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param city: 地区筛选</span></span><br><span class="line"><span class="string">    :param keyword: 关键词</span></span><br><span class="line"><span class="string">    :param page: 翻页</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;thor.weidian.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;x-schema&#x27;</span>: <span class="string">&#x27;https&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;referrer&#x27;</span>: <span class="string">&#x27;https://android.weidian.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;origin&#x27;</span>: <span class="string">&#x27;android.weidian.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;x-origin&#x27;</span>: <span class="string">&#x27;thor&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;x-encrypt&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Android/8.1.0 WDAPP(WDBuyer/5.7.0) Thor/2.1.3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded; charset=utf-8&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    params = <span class="string">&quot;&#123;\&quot;area\&quot;:\&quot;\&quot;,\&quot;brands\&quot;:[],\&quot;chosePoints\&quot;:\&quot;\&quot;,\&quot;chosePrices\&quot;:\&quot;\&quot;,\&quot;city\&quot;:\&quot;&quot;</span> + city + <span class="string">&quot;\&quot;,\&quot;coreWord\&quot;:\&quot;\&quot;,\&quot;footprintId\&quot;:\&quot;5c30df6b68a1e62a097a6b793dd9cd27_1617017322405\&quot;,\&quot;id\&quot;:\&quot;&quot;</span> + keyword + <span class="string">&quot;\&quot;,\&quot;increServices\&quot;:[],\&quot;keyword\&quot;:\&quot;&quot;</span> + keyword + <span class="string">&quot;\&quot;,\&quot;limit\&quot;:16,\&quot;page\&quot;:&quot;</span> + page + <span class="string">&quot;,\&quot;source\&quot;:\&quot;1\&quot;,\&quot;tab\&quot;:\&quot;all\&quot;,\&quot;tags\&quot;:[],\&quot;wdServices\&quot;:[]&#125;&quot;</span></span><br><span class="line">    params_encode = encode(params)</span><br><span class="line">    context = <span class="string">&quot;&#123;\&quot;alt\&quot;:\&quot;0.0\&quot;,\&quot;android_id\&quot;:\&quot;2b2081ba28d67929\&quot;,\&quot;app_status\&quot;:\&quot;active\&quot;,\&quot;appid\&quot;:\&quot;com.koudai.weidian.buyer\&quot;,\&quot;appv\&quot;:\&quot;5.7.0\&quot;,\&quot;brand\&quot;:\&quot;google\&quot;,\&quot;build\&quot;:\&quot;20190821162153\&quot;,\&quot;channel\&quot;:\&quot;1013n\&quot;,\&quot;cuid\&quot;:\&quot;5c30df6b68a1e62a097a6b793dd9cd21\&quot;,\&quot;disk_capacity\&quot;:\&quot;19.40GB/25.01GB\&quot;,\&quot;feature\&quot;:\&quot;E|F,H|F,P|F,R|T\&quot;,\&quot;h\&quot;:\&quot;2392\&quot;,\&quot;iccid\&quot;:\&quot;89860320045744719592\&quot;,\&quot;imei\&quot;:\&quot;86798102045247\&quot;,\&quot;imsi\&quot;:\&quot;460115169646890\&quot;,\&quot;is_login\&quot;:\&quot;0\&quot;,\&quot;lat\&quot;:\&quot;29.887301\&quot;,\&quot;lon\&quot;:\&quot;121.63812\&quot;,\&quot;mac\&quot;:\&quot;AC:CF:85:B7:39:B9\&quot;,\&quot;machine_model\&quot;:\&quot;armv8l\&quot;,\&quot;memory\&quot;:\&quot;1095M/2799M\&quot;,\&quot;mid\&quot;:\&quot;Nexus_6P\&quot;,\&quot;mobile_station\&quot;:\&quot;0\&quot;,\&quot;net_subtype\&quot;:\&quot;0_\&quot;,\&quot;network\&quot;:\&quot;WIFI\&quot;,\&quot;os\&quot;:\&quot;27\&quot;,\&quot;platform\&quot;:\&quot;android\&quot;,\&quot;serial_num\&quot;:\&quot;ENU7N15A19011383\&quot;,\&quot;suid\&quot;:\&quot;5c30df6b68a1e62a097a6b793dd9cd29\&quot;,\&quot;w\&quot;:\&quot;1440\&quot;,\&quot;wmac\&quot;:\&quot;80:ea:07:96:22:e2\&quot;,\&quot;wssid\&quot;:\&quot;\\\&quot;阿里巴巴\\\&quot;\&quot;&#125;&quot;</span></span><br><span class="line">    context_encode = encode(context)</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;param&quot;</span>: params_encode,</span><br><span class="line">        <span class="string">&quot;v&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;context&quot;</span>: context_encode,</span><br><span class="line">        <span class="string">&quot;appkey&quot;</span>: <span class="string">&quot;06475281&quot;</span>,</span><br><span class="line">        <span class="string">&quot;timestamp&quot;</span>: <span class="built_in">str</span>(<span class="built_in">int</span>(time.time() * <span class="number">1000</span>)),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sign = getSign(data)</span><br><span class="line">    data[<span class="string">&#x27;sign&#x27;</span>] = sign</span><br><span class="line"></span><br><span class="line">    response = requests.post(<span class="string">&#x27;https://thor.weidian.com/faith/search.item/1.7&#x27;</span>, headers=headers, data=data)</span><br><span class="line">    decode(response.content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 商品详情</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDetail</span>(<span class="params">itemid</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param itemid: 商品 id</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    url = <span class="string">&quot;https://thor.weidian.com/detailmjb/getItemInfo/1.1&quot;</span></span><br><span class="line">    params = &#123;<span class="string">&quot;adsk&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;itemId&quot;</span>: <span class="string">&quot;%s&quot;</span> % itemid&#125;</span><br><span class="line">    params = json.dumps(params, ensure_ascii=<span class="literal">False</span>).replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    params_encode = encode(params)</span><br><span class="line">    context = &#123;<span class="string">&quot;alt&quot;</span>: <span class="string">&quot;0.0&quot;</span>, <span class="string">&quot;android_id&quot;</span>: <span class="string">&quot;2b2085ba28d67921&quot;</span>, <span class="string">&quot;app_status&quot;</span>: <span class="string">&quot;active&quot;</span>,</span><br><span class="line">               <span class="string">&quot;appid&quot;</span>: <span class="string">&quot;com.koudai.weidian.buyer&quot;</span>, <span class="string">&quot;appv&quot;</span>: <span class="string">&quot;5.7.0&quot;</span>, <span class="string">&quot;brand&quot;</span>: <span class="string">&quot;google&quot;</span>, <span class="string">&quot;build&quot;</span>: <span class="string">&quot;20190821162151&quot;</span>,</span><br><span class="line">               <span class="string">&quot;channel&quot;</span>: <span class="string">&quot;1013n&quot;</span>, <span class="string">&quot;cuid&quot;</span>: <span class="string">&quot;5c30df6b68a1e62a097a6b793dd9cd21&quot;</span>, <span class="string">&quot;disk_capacity&quot;</span>: <span class="string">&quot;19.35GB/25.01GB&quot;</span>,</span><br><span class="line">               <span class="string">&quot;feature&quot;</span>: <span class="string">&quot;E|F,H|F,P|F,R|T&quot;</span>, <span class="string">&quot;h&quot;</span>: <span class="string">&quot;2392&quot;</span>, <span class="string">&quot;iccid&quot;</span>: <span class="string">&quot;89860320045744719511&quot;</span>, <span class="string">&quot;imei&quot;</span>: <span class="string">&quot;86798102045241&quot;</span>,</span><br><span class="line">               <span class="string">&quot;imsi&quot;</span>: <span class="string">&quot;460115169646891&quot;</span>, <span class="string">&quot;is_login&quot;</span>: <span class="string">&quot;0&quot;</span>, <span class="string">&quot;lat&quot;</span>: <span class="string">&quot;29.887301&quot;</span>, <span class="string">&quot;lon&quot;</span>: <span class="string">&quot;121.63812&quot;</span>,</span><br><span class="line">               <span class="string">&quot;mac&quot;</span>: <span class="string">&quot;AC:CF:85:B7:39:B2&quot;</span>, <span class="string">&quot;machine_model&quot;</span>: <span class="string">&quot;armv8l&quot;</span>, <span class="string">&quot;memory&quot;</span>: <span class="string">&quot;940M/2799M&quot;</span>, <span class="string">&quot;mid&quot;</span>: <span class="string">&quot;Nexus_6P&quot;</span>,</span><br><span class="line">               <span class="string">&quot;mobile_station&quot;</span>: <span class="string">&quot;0&quot;</span>, <span class="string">&quot;net_subtype&quot;</span>: <span class="string">&quot;0_&quot;</span>, <span class="string">&quot;network&quot;</span>: <span class="string">&quot;WIFI&quot;</span>, <span class="string">&quot;os&quot;</span>: <span class="string">&quot;27&quot;</span>, <span class="string">&quot;platform&quot;</span>: <span class="string">&quot;android&quot;</span>,</span><br><span class="line">               <span class="string">&quot;serial_num&quot;</span>: <span class="string">&quot;ENU7N15A19011383&quot;</span>, <span class="string">&quot;suid&quot;</span>: <span class="string">&quot;5c30df6b68a1e62a097a6b793dd9cd21&quot;</span>, <span class="string">&quot;w&quot;</span>: <span class="string">&quot;1440&quot;</span>,</span><br><span class="line">               <span class="string">&quot;wmac&quot;</span>: <span class="string">&quot;80:ea:07:96:21:ea&quot;</span>, <span class="string">&quot;wssid&quot;</span>: <span class="string">&quot;\&quot;阿里巴巴\&quot;&quot;</span>&#125;</span><br><span class="line">    context = json.dumps(context, ensure_ascii=<span class="literal">False</span>).replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    context_encode = encode(context)</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;param&quot;</span>: params_encode,</span><br><span class="line">        <span class="string">&quot;v&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;context&quot;</span>: context_encode,</span><br><span class="line">        <span class="string">&quot;appkey&quot;</span>: <span class="string">&quot;06475281&quot;</span>,</span><br><span class="line">        <span class="string">&quot;timestamp&quot;</span>: <span class="built_in">str</span>(<span class="built_in">int</span>(time.time() * <span class="number">1000</span>)),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sign = getSign(data)</span><br><span class="line">    data[<span class="string">&#x27;sign&#x27;</span>] = sign</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="comment"># &quot;content-length&quot;: &quot;931&quot;,</span></span><br><span class="line">        <span class="string">&quot;x-schema&quot;</span>: <span class="string">&quot;https&quot;</span>,</span><br><span class="line">        <span class="string">&quot;referrer&quot;</span>: <span class="string">&quot;https://android.weidian.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;android.weidian.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;x-origin&quot;</span>: <span class="string">&quot;thor&quot;</span>,</span><br><span class="line">        <span class="string">&quot;x-encrypt&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="comment"># &quot;accept-encoding&quot;: &quot;GLZip&quot;,</span></span><br><span class="line">        <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Android/8.1.0 WDAPP(WDBuyer/5.7.0) Thor/2.1.3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded; charset=utf-8&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = requests.post(url=url,headers=headers,data=data)</span><br><span class="line">    decode(response.content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 店铺信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getShopInfo</span>(<span class="params">userid</span>):</span></span><br><span class="line">    cookies = &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;weidian.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pragma&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;cache-control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;upgrade-insecure-requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Linux; Android 8.1.0; Nexus 6P Build/OPM7.181205.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/77.0.3865.120 TBS/045520 Mobile Safari/537.36 WDAPP(WDBuyer/5.7.0) appid/com.koudai.weidian.buyer KDJSBridge2/1.1.0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-fetch-mode&#x27;</span>: <span class="string">&#x27;navigate&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-fetch-user&#x27;</span>: <span class="string">&#x27;?1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;x-referer&#x27;</span>: <span class="string">&#x27;https://android.weidian.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;x-requested-with&#x27;</span>: <span class="string">&#x27;com.koudai.weidian.buyer&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-fetch-site&#x27;</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;accept-language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    params = (</span><br><span class="line">        (<span class="string">&#x27;userid&#x27;</span>, userid),</span><br><span class="line">        (<span class="string">&#x27;hidTop&#x27;</span>, <span class="string">&#x27;1&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;disableHeaderRefresh&#x27;</span>, <span class="string">&#x27;1&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;wfr&#x27;</span>, <span class="string">&#x27;item&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    response = requests.get(<span class="string">&#x27;https://weidian.com/certDetails.html&#x27;</span>, headers=headers, params=params, cookies=cookies)</span><br><span class="line">    response.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">    print(response.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 店铺所有商品</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getShopSku</span>(<span class="params">shopId,page</span>):</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;authority&#x27;</span>: <span class="string">&#x27;thor.weidian.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pragma&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;cache-control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot;Google Chrome&quot;;v=&quot;89&quot;, &quot;Chromium&quot;;v=&quot;89&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;accept&#x27;</span>: <span class="string">&#x27;application/json, text/plain, */*&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 11_2_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;origin&#x27;</span>: <span class="string">&#x27;https://shop843683.v.weidian.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-fetch-site&#x27;</span>: <span class="string">&#x27;same-site&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-fetch-mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-fetch-dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://shop843683.v.weidian.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;accept-language&#x27;</span>: <span class="string">&#x27;zh,zh-CN;q=0.9&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    params = (</span><br><span class="line">        (<span class="string">&#x27;param&#x27;</span>, <span class="string">&#x27;&#123;&quot;shopId&quot;:&quot;%s&quot;,&quot;page&quot;:%s,&quot;limit&quot;:20,&quot;tabId&quot;:0,&quot;sortOrder&quot;:&quot;desc&quot;,&quot;isFromH5&quot;:true&#125;&#x27;</span> % (shopId, page)),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    response = requests.get(<span class="string">&#x27;https://thor.weidian.com/ares/shop.getItemsInShop/1.0&#x27;</span>, headers=headers, params=params)</span><br><span class="line">    print(response.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    getSkuList(<span class="string">&quot;丽水&quot;</span>,<span class="string">&quot;杨梅&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    <span class="comment"># getDetail(3962774427)</span></span><br><span class="line">    <span class="comment"># getShopInfo(843683)</span></span><br><span class="line">    <span class="comment"># getShopSku(843683,5)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机基础</title>
      <link href="computer/"/>
      <url>computer/</url>
      
        <content type="html"><![CDATA[<h1 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h1><p>我们平时使用的数字都是由 0~9 共十个数字组成的，例如 1、9、10、297、952 等，一个数字最多能表示九，如果要表示十、十一、二十九、一百等，就需要多个数字组合起来。</p><p>例如表示 5+8 的结果，一个数字不够，只能”进位 “，用 13 来表示；这时” 进一位 “相当于十，” 进两位“相当于二十。</p><p>因为逢十进一（满十进一），也因为只有 0~9 共十个数字，所以叫做十进制（Decimalism）。十进制是在人类社会发展过程中自然形成的，它符合人们的思维习惯，例如人类有十根手指，也有十根脚趾。</p><p>进制也就是进位制。进行加法运算时逢 X 进一（满 X 进一），进行减法运算时借一当 X，这就是 X 进制，这种进制也就包含 X 个数字，基数为 X。十进制有 0~9 共 10 个数字，基数为 10，在加减法运算中，逢十进一，借一当十。</p><h2 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h2><p>我们不妨将思维拓展一下，既然可以用 0~9 共十个数字来表示数值，那么也可以用 0、1 两个数字来表示数值，这就是二进制（Binary）。例如，数字 0、1、10、111、100、1000001 都是有效的二进制。</p><p>在计算机内部，数据都是以二进制的形式存储的，二进制是学习编程必须掌握的基础。本节我们先讲解二进制的概念，下节讲解数据在内存中的存储，让大家学以致用。</p><p>二进制加减法和十进制加减法的思想是类似的：</p><ul><li>  对于十进制，进行加法运算时逢十进一，进行减法运算时借一当十；</li><li>  对于二进制，进行加法运算时逢二进一，进行减法运算时借一当二。</li></ul><p>下面两张示意图详细演示了二进制加减法的运算过程。</p><ol><li>二进制加法：1+0=1、1+1=10、11+10=101、111+111=1110</li></ol><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-04-08-015930.png">  </p><ol start="2"><li>二进制减法：1-0=1、10-1=1、101-11=10、1100-111=101</li></ol><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-04-08-020024.png">  </p><h2 id="八进制"><a href="#八进制" class="headerlink" title="八进制"></a>八进制</h2><p>除了二进制，C 语言还会使用到八进制。</p><p>八进制有 0~7 共 8 个数字，基数为 8，加法运算时逢八进一，减法运算时借一当八。例如，数字 0、1、5、7、14、733、67001、25430 都是有效的八进制。</p><p>下面两张图详细演示了八进制加减法的运算过程。</p><ol><li>八进制加法：3+4=7、5+6=13、75+42=137、2427+567=3216</li></ol><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-04-08-020031.png">  </p><ol start="2"><li>八进制减法：6-4=2、52-27=23、307-141=146、7430-1451=5757</li></ol><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-04-08-020042.png">  </p><h2 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h2><p>除了二进制和八进制，十六进制也经常使用，甚至比八进制还要频繁。</p><p>十六进制中，用 A 来表示 10，B 表示 11，C 表示 12，D 表示 13，E 表示 14，F 表示 15，因此有 0~F 共 16 个数字，基数为 16，加法运算时逢 16 进 1，减法运算时借 1 当 16。例如，数字 0、1、6、9、A、D、F、419、EA32、80A3、BC00 都是有效的十六进制。</p><blockquote><p>注意，十六进制中的字母不区分大小写，ABCDEF 也可以写作 abcdef。</p></blockquote><p>下面两张图详细演示了十六进制加减法的运算过程。</p><ol><li>十六进制加法：6+7=D、18+BA=D2、595+792=D27、2F87+F8A=3F11</li></ol><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-04-08-020047.png">  </p><ol start="2"><li>十六进制减法：D-3=A、52-2F=23、E07-141=CC6、7CA0-1CB1=5FEF</li></ol><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-04-08-020054.png">  </p><h1 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h1><h2 id="将二进制、八进制、十六进制转换为十进制"><a href="#将二进制、八进制、十六进制转换为十进制" class="headerlink" title="将二进制、八进制、十六进制转换为十进制"></a>将二进制、八进制、十六进制转换为十进制</h2><p>二进制、八进制和十六进制向十进制转换都非常容易，就是 “按权相加”。所谓 “权”，也即 “位权”。</p><p>假设当前数字是 N 进制，那么：</p><ul><li>  对于整数部分，从右往左看，第 i 位的位权等于 Ni-1</li><li>  对于小数部分，恰好相反，要从左往右看，第 j 位的位权为 N-j。</li></ul><p>更加通俗的理解是，假设一个多位数（由多个数字组成的数）某位上的数字是 1，那么它所表示的数值大小就是该位的位权。</p><h4 id="1-整数部分"><a href="#1-整数部分" class="headerlink" title="1) 整数部分"></a>1) 整数部分</h4><p>例如，将八进制数字 53627 转换成十进制：</p><p>53627 = 5×84 + 3×83 + 6×82 + 2×81 + 7×80 = 22423（十进制）</p><p>从右往左看，第 1 位的位权为 80=1，第 2 位的位权为 81=8，第 3 位的位权为 82=64，第 4 位的位权为 83=512，第 5 位的位权为 84=4096 …… 第 n 位的位权就为 8n-1。将各个位的数字乘以位权，然后再相加，就得到了十进制形式。</p><blockquote><p>注意，这里我们需要以十进制形式来表示位权。</p></blockquote><p>再如，将十六进制数字 9FA8C 转换成十进制：</p><p>9FA8C = 9×164 + 15×163 + 10×162 + 8×161 + 12×160 = 653964（十进制）</p><p>从右往左看，第 1 位的位权为 160=1，第 2 位的位权为 161=16，第 3 位的位权为 162=256，第 4 位的位权为 163=4096，第 5 位的位权为 164=65536 …… 第 n 位的位权就为 16n-1。将各个位的数字乘以位权，然后再相加，就得到了十进制形式。</p><p>将二进制数字转换成十进制也是类似的道理：</p><p>11010 = 1×24 + 1×23 + 0×22 + 1×21 + 0×20 = 26（十进制）</p><p>从右往左看，第 1 位的位权为 20=1，第 2 位的位权为 21=2，第 3 位的位权为 22=4，第 4 位的位权为 23=8，第 5 位的位权为 24=16 …… 第 n 位的位权就为 2n-1。将各个位的数字乘以位权，然后再相加，就得到了十进制形式。</p><h4 id="2-小数部分"><a href="#2-小数部分" class="headerlink" title="2) 小数部分"></a>2) 小数部分</h4><p>例如，将八进制数字 423.5176 转换成十进制：</p><p>423.5176 = 4×82 + 2×81 + 3×80 + 5×8-1 + 1×8-2 + 7×8-3 + 6×8-4 = 275.65576171875（十进制）</p><p>小数部分和整数部分相反，要从左往右看，第 1 位的位权为 8-1=1/8，第 2 位的位权为 8-2=1/64，第 3 位的位权为 8-3=1/512，第 4 位的位权为 8-4=1/4096 …… 第 m 位的位权就为 8-m。</p><p>再如，将二进制数字 1010.1101 转换成十进制：</p><p>1010.1101 = 1×23 + 0×22 + 1×21 + 0×20 + 1×2-1 + 1×2-2 + 0×2-3 + 1×2-4 = 10.8125（十进制）</p><p>小数部分和整数部分相反，要从左往右看，第 1 位的位权为 2-1=1/2，第 2 位的位权为 2-2=1/4，第 3 位的位权为 2-3=1/8，第 4 位的位权为 2-4=1/16 …… 第 m 位的位权就为 2-m。</p><p>更多转换成十进制的例子：</p><ul><li>  二进制：1001 = 1×23 + 0×22 + 0×21 + 1×20 = 8 + 0 + 0 + 1 = 9（十进制）</li><li>  二进制：101.1001 = 1×22 + 0×21 + 1×20 + 1×2-1 + 0×2-2 + 0×2-3 + 1×2-4 = 4 + 0 + 1 + 0.5 + 0 + 0 + 0.0625 = 5.5625（十进制）</li><li>  八进制：302 = 3×82 + 0×81 + 2×80 = 192 + 0 + 2 = 194（十进制）</li><li>  八进制：302.46 = 3×82 + 0×81 + 2×80 + 4×8-1 + 6×8-2 = 192 + 0 + 2 + 0.5 + 0.09375= 194.59375（十进制）</li><li>  十六进制：EA7 = 14×162 + 10×161 + 7×160 = 3751（十进制）</li></ul><h2 id="将十进制转换为二进制、八进制、十六进制"><a href="#将十进制转换为二进制、八进制、十六进制" class="headerlink" title="将十进制转换为二进制、八进制、十六进制"></a>将十进制转换为二进制、八进制、十六进制</h2><p>将十进制转换为其它进制时比较复杂，整数部分和小数部分的算法不一样，下面我们分别讲解。</p><h4 id="1-整数部分-1"><a href="#1-整数部分-1" class="headerlink" title="1) 整数部分"></a>1) 整数部分</h4><p>十进制整数转换为 N 进制整数采用 “除 N 取余，逆序排列” 法。具体做法是：</p><ul><li>  将 N 作为除数，用十进制整数除以 N，可以得到一个商和余数；</li><li>  保留余数，用商继续除以 N，又得到一个新的商和余数；</li><li>  仍然保留余数，用商继续除以 N，还会得到一个新的商和余数；</li><li>  ……</li><li>  如此反复进行，每次都保留余数，用商接着除以 N，直到商为 0 时为止。</li></ul><p>把先得到的余数作为 N 进制数的低位数字，后得到的余数作为 N 进制数的高位数字，依次排列起来，就得到了 N 进制数字。</p><p>下图演示了将十进制数字 36926 转换成八进制的过程：</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-04-08-020514.png"></p><p>从图中得知，十进制数字 36926 转换成八进制的结果为 110076。</p><p>下图演示了将十进制数字 42 转换成二进制的过程：</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-04-08-020534.png"></p><p>从图中得知，十进制数字 42 转换成二进制的结果为 101010。</p><h4 id="2-小数部分-1"><a href="#2-小数部分-1" class="headerlink" title="2) 小数部分"></a>2) 小数部分</h4><p>十进制小数转换成 N 进制小数采用 “乘 N 取整，顺序排列” 法。具体做法是：</p><ul><li>  用 N 乘以十进制小数，可以得到一个积，这个积包含了整数部分和小数部分；</li><li>  将积的整数部分取出，再用 N 乘以余下的小数部分，又得到一个新的积；</li><li>  再将积的整数部分取出，继续用 N 乘以余下的小数部分；</li><li>  ……</li><li>  如此反复进行，每次都取出整数部分，用 N 接着乘以小数部分，直到积中的小数部分为 0，或者达到所要求的精度为止。</li></ul><p>把取出的整数部分按顺序排列起来，先取出的整数作为 N 进制小数的高位数字，后取出的整数作为低位数字，这样就得到了 N 进制小数。</p><p>下图演示了将十进制小数 0.930908203125 转换成八进制小数的过程：</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-04-08-020658.png"></p><p>从图中得知，十进制小数 0.930908203125 转换成八进制小数的结果为 0.7345。</p><p>下图演示了将十进制小数 0.6875 转换成二进制小数的过程：</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-04-08-020713.png"></p><p>从图中得知，十进制小数 0.6875 转换成二进制小数的结果为 0.1011。</p><p>如果一个数字既包含了整数部分又包含了小数部分，那么将整数部分和小数部分开，分别按照上面的方法完成转换，然后再合并在一起即可。例如：</p><ul><li>  十进制数字 36926.930908203125 转换成八进制的结果为 110076.7345；</li><li>  十进制数字 42.6875 转换成二进制的结果为 101010.1011。</li></ul><p>下表列出了前 17 个十进制整数与二进制、八进制、十六进制的对应关系：</p><table><tbody><tr><th>十进制</th><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td><td>15</td><td>16</td></tr><tr><th>二进制</th><td>0</td><td>1</td><td>10</td><td>11</td><td>100</td><td>101</td><td>110</td><td>111</td><td>1000</td><td>1001</td><td>1010</td><td>1011</td><td>1100</td><td>1101</td><td>1110</td><td>1111</td><td>10000</td></tr><tr><th>八进制</th><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td><td>15</td><td>16</td><td>17</td><td>20</td></tr><tr><th>十六进制</th><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>A</td><td>B</td><td>C</td><td>D</td><td>E</td><td>F</td><td>10</td></tr></tbody></table><p>注意，十进制小数转换成其他进制小数时，结果有可能是一个无限位的小数。请看下面的例子：</p><ul><li>  十进制 0.51 对应的二进制为 0.100000101000111101011100001010001111010111…，是一个循环小数；</li><li>  十进制 0.72 对应的二进制为 0.1011100001010001111010111000010100011110…，是一个循环小数；</li><li>  十进制 0.625 对应的二进制为 0.101，是一个有限小数。</li></ul><h2 id="二进制和八进制、十六进制的转换"><a href="#二进制和八进制、十六进制的转换" class="headerlink" title="二进制和八进制、十六进制的转换"></a>二进制和八进制、十六进制的转换</h2><p>其实，任何进制之间的转换都可以使用上面讲到的方法，只不过有时比较麻烦，所以一般针对不同的进制采取不同的方法。将二进制转换为八进制和十六进制时就有非常简洁的方法，反之亦然。</p><h4 id="1-二进制整数和八进制整数之间的转换"><a href="#1-二进制整数和八进制整数之间的转换" class="headerlink" title="1) 二进制整数和八进制整数之间的转换"></a>1) 二进制整数和八进制整数之间的转换</h4><p>二进制整数转换为八进制整数时，每三位二进制数字转换为一位八进制数字，运算的顺序是从低位向高位依次进行，高位不足三位用零补齐。下图演示了如何将二进制整数 1110111100 转换为八进制：</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-04-08-020757.png"></p><p>从图中可以看出，二进制整数 1110111100 转换为八进制的结果为 1674。</p><p>八进制整数转换为二进制整数时，思路是相反的，每一位八进制数字转换为三位二进制数字，运算的顺序也是从低位向高位依次进行。下图演示了如何将八进制整数 2743 转换为二进制：</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-04-08-020801.png"></p><p>从图中可以看出，八进制整数 2743 转换为二进制的结果为 10111100011。</p><h4 id="2-二进制整数和十六进制整数之间的转换"><a href="#2-二进制整数和十六进制整数之间的转换" class="headerlink" title="2) 二进制整数和十六进制整数之间的转换"></a>2) 二进制整数和十六进制整数之间的转换</h4><p>二进制整数转换为十六进制整数时，每四位二进制数字转换为一位十六进制数字，运算的顺序是从低位向高位依次进行，高位不足四位用零补齐。下图演示了如何将二进制整数 10 1101 0101 1100 转换为十六进制：</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-04-08-020845.jpg"></p><p>从图中可以看出，二进制整数 10 1101 0101 1100 转换为十六进制的结果为 2D5C。</p><p>十六进制整数转换为二进制整数时，思路是相反的，每一位十六进制数字转换为四位二进制数字，运算的顺序也是从低位向高位依次进行。下图演示了如何将十六进制整数 A5D6 转换为二进制：</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-04-08-020907.png"></p><p>从图中可以看出，十六进制整数 A5D6 转换为二进制的结果为 1010 0101 1101 0110。</p><p>在 C 语言编程中，二进制、八进制、十六进制之间几乎不会涉及小数的转换，所以这里我们只讲整数的转换，大家学以致用足以。另外，八进制和十六进制之间也极少直接转换，这里我们也不再讲解了。</p><h1 id="二进制数据存储"><a href="#二进制数据存储" class="headerlink" title="二进制数据存储"></a>二进制数据存储</h1><p>计算机要处理的信息是多种多样的，如数字、文字、符号、图形、音频、视频等，这些信息在人们的眼里是不同的。但对于计算机来说，它们在内存中都是一样的，都是以二进制的形式来表示。</p><p>要想学习编程，就必须了解二进制，它是计算机处理数据的基础。</p><p>内存条是一个非常精密的部件，包含了上亿个电子元器件，它们很小，达到了纳米级别。这些元器件，实际上就是电路；电路的电压会变化，要么是 0V，要么是 5V，只有这两种电压。5V 是通电，用 1 来表示，0V 是断电，用 0 来表示。所以，一个元器件有 2 种状态，0 或者 1。</p><p>我们通过电路来控制这些元器件的通断电，会得到很多 0、1 的组合。例如，8 个元器件有 28=256 种不同的组合，16 个元器件有 216=65536 种不同的组合。虽然一个元器件只能表示 2 个数值，但是多个结合起来就可以表示很多数值了。</p><p>我们可以给每一种组合赋予特定的含义，例如，可以分别用 1101000、00011100、11111111、00000000、01010101、10101010 来表示 C、语、言、中、文、网 这几个字，那么结合起来 1101000 00011100 11111111 00000000 01010101 10101010 就表示”C 语言中文网 “。</p><p>一般情况下我们不一个一个的使用元器件，而是将 <strong>8 个元器件看做一个单位</strong>，即使表示很小的数，例如 1，也需要 8 个，也就是 00000001。</p><p>1 个元器件称为 1 比特（Bit）或 1 位，8 个元器件称为 1 字节（Byte），那么 16 个元器件就是 2Byte，32 个就是 4Byte，以此类推：</p><ul><li>  8×1024 个元器件就是 1024Byte，简写为 1KB；</li><li>  8×1024×1024 个元器件就是 1024KB，简写为 1MB；</li><li>  8×1024×1024×1024 个元器件就是 1024MB，简写为 1GB。</li></ul><p>现在，你知道 1GB 的内存有多少个元器件了吧。我们通常所说的文件大小是多少 KB、多少 MB，就是这个意思。</p><p>单位换算：</p><ul><li>  1Byte = 8 Bit</li><li>  1KB = 1024Byte = 210Byte</li><li>  1MB = 1024KB = 220Byte</li><li>  1GB = 1024MB = 230Byte</li><li>  1TB = 1024GB = 240Byte</li><li>  1PB = 1024TB = 250Byte</li><li>  1EB = 1024PB = 260Byte</li></ul><p>我们平时使用计算机时，通常只会设计到 KB、MB、GB、TB 这几个单位，PB 和 EB 这两个高级单位一般在<a href="http://c.biancheng.net/big_data/">大数据</a>处理过程中才会用到。</p><p>你看，在内存中没有 abc 这样的字符，也没有 gif、jpg 这样的图片，只有 0 和 1 两个数字，计算机也只认识 0 和 1。所以，计算机使用二进制，而不是我们熟悉的十进制，写入内存中的数据，都会被转换成 0 和 1 的组合。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali 环境搭建</title>
      <link href="kali/"/>
      <url>kali/</url>
      
        <content type="html"><![CDATA[<h1 id="kali-环境搭建"><a href="#kali-环境搭建" class="headerlink" title="kali 环境搭建"></a>kali 环境搭建</h1><h2 id="kali-root"><a href="#kali-root" class="headerlink" title="kali root"></a>kali root</h2><p>开机后用kali/kali进去入系统，运行sudo passwd root，给root设个密码toor，重复retype一次。然后重启以root/toor进入系统即可。</p><h2 id="kali-设置时区"><a href="#kali-设置时区" class="headerlink" title="kali 设置时区"></a>kali 设置时区</h2><p>kali里面时间老是不对，其实只是时区不对而已，一个命令就搞定：<br><code>dpkg-reconfigure tzdata</code><br>然后选择Asia→Shanghai，然后重启即可。</p><h2 id="kali-常用软件"><a href="#kali-常用软件" class="headerlink" title="kali 常用软件"></a>kali 常用软件</h2><h3 id="安装-jnetop-htop-tree"><a href="#安装-jnetop-htop-tree" class="headerlink" title="安装 jnetop htop tree"></a>安装 jnetop htop tree</h3><p>apt update<br>apt install jnettop htp tree</p><h2 id="kali-换源"><a href="#kali-换源" class="headerlink" title="kali 换源"></a>kali 换源</h2><p>1.更新软件源<br><code>sudo vim /etc/apt/sources.list</code><br>2.选择比较合适的源(选择一个即可）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#中科大</span></span><br><span class="line">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line"><span class="comment">#阿里云</span></span><br><span class="line">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line"></span><br><span class="line"><span class="comment">#清华大学</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line"></span><br><span class="line"><span class="comment">#163</span></span><br><span class="line">deb http://mirrors.163.com/debian wheezy main non-free contrib</span><br><span class="line">deb-src http://mirrors.163.com/debian wheezy main non-free contrib</span><br><span class="line">deb http://mirrors.163.com/debian wheezy-proposed-updates main non-free contrib</span><br><span class="line">deb-src http://mirrors.163.com/debian wheezy-proposed-updates main non-free contrib</span><br><span class="line">deb-src http://mirrors.163.com/debian-security wheezy/updates main non-free contrib</span><br><span class="line"></span><br><span class="line"><span class="comment">#东软大学</span></span><br><span class="line">deb http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</span><br><span class="line">deb-src http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</span><br><span class="line"></span><br><span class="line"><span class="comment">#官方源</span></span><br><span class="line">deb http://http.kali.org/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://http.kali.org/kali kali-rolling main non-free contrib</span><br><span class="line"></span><br><span class="line"><span class="comment">#jessie 需要手动调整 复制过来有问题</span></span><br><span class="line">deb http://ftp.de.debian.org/debian jessie main</span><br></pre></td></tr></table></figure><h2 id="kali-非-root-用户使用-adb"><a href="#kali-非-root-用户使用-adb" class="headerlink" title="kali 非 root 用户使用 adb"></a>kali 非 root 用户使用 adb</h2><p>非 root 用户使用 adb 命令时可能会出现以下错误<br><code>adb: insufficient permissions for device: missing udev rules?</code></p><p>解决方式:<br><code>vim /etc/udev/rules.d/51-android.rules</code></p><p>然后添加:<br><code>SUBSYSTEM==&quot;usb&quot;, ENV&#123;DEVTYPE&#125;==&quot;usb_device&quot;, MODE=&quot;0666&quot;</code><br>再次拔插设备即可</p><h2 id="kali-安装-android-studio"><a href="#kali-安装-android-studio" class="headerlink" title="kali 安装 android studio"></a>kali 安装 android studio</h2><p>浏览器设置代理</p><p>搜索proxy socks5 本机 ip: 代理端口</p><p>打开网址: <a href="https://developer.android.com/studio">https://developer.android.com/studio</a></p><p>复制 download 地址, 使用 wget 命令下载</p><p>下载完成后解压缩并添加权限 <code>chmod -R 755 Android-Studio</code> </p><p>进入 bin 目录启动 <code>./studio.sh</code> </p><p>安装完成后新建一个 native 项目等待同步即可</p><h2 id="kali-使用-adb"><a href="#kali-使用-adb" class="headerlink" title="kali 使用 adb"></a>kali 使用 adb</h2><p>安装好 android-studio 之后</p><p>进入 <code>/root/Android/Sdk/platform-tools</code>可以看到 adb 工具</p><p>将路径加入到 zshrc 中 <code>vim ~/.zshrc</code> 加入: <code>export PATH=&quot;/root/Android/Sdk/platform-tools:$PATH&quot;</code> </p><h2 id="kali-安装-pyenv"><a href="#kali-安装-pyenv" class="headerlink" title="kali 安装 pyenv"></a>kali 安装 pyenv</h2><ol><li><p><a href="https://github.com/pyenv/pyenv/wiki#suggested-build-environment">安装需要的依赖 </a> <code>sudo apt-get update; sudo apt-get install --no-install-recommends make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev</code></p></li><li><p><code>git clone https://github.com/pyenv/pyenv.git ~/.pyenv</code> </p></li><li><p>kali 2020 使用的是 zsh , 需要将 pyenv 添加到路径中 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure></li><li><p><code>echo -e &#39;if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\n  eval &quot;$(pyenv init -)&quot;\nfi&#39; &gt;&gt; ~/.zshrc</code></p></li><li><p><code>exec &quot;$SHELL&quot;</code></p></li><li><p>安装指定版本 python <code>pyenv install 3.8.0</code> </p></li><li><p>切换指定版本 python <code>pyenv local 3.8.0</code> </p></li></ol><h2 id="kali-安装-nodejs-和-gum"><a href="#kali-安装-nodejs-和-gum" class="headerlink" title="kali 安装 nodejs 和 gum"></a>kali 安装 nodejs 和 gum</h2><p><a href="https://github.com/nodesource/distributions/blob/master/README.md">https://github.com/nodesource/distributions/blob/master/README.md</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Using Debian, as root</span></span><br><span class="line">curl -fsSL https://deb.nodesource.com/setup_15.x | bash -</span><br><span class="line">apt-get install -y nodejs</span><br></pre></td></tr></table></figure><p>安装 gum 进行代码提示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save @types/frida-gum</span><br></pre></td></tr></table></figure><h2 id="kali-安装-vscode"><a href="#kali-安装-vscode" class="headerlink" title="kali 安装 vscode"></a>kali 安装 vscode</h2><p>下载地址: <a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p><p><code>dpkg -i 文件名</code></p><h2 id="kali-设置固定-ip"><a href="#kali-设置固定-ip" class="headerlink" title="kali 设置固定 ip"></a>kali 设置固定 ip</h2><ol><li><p> <code>vim /etc/network/interface</code></p></li><li><p>在 interface 文件中追加以下内容:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auto eth0</span><br><span class="line">iface eth0 inet static</span><br><span class="line">address 192.168.1.53</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">gateway 192.168.1.1</span><br></pre></td></tr></table></figure></li><li><p> 配置 dns <code>vim /etc/resolv.conf</code>  –&gt;  <code>nameserver 8.8.8.8</code>  –&gt;  <code>nameserver 114.114.114.114</code></p></li><li><p> <code>systemctl restart networking</code> </p></li></ol><h2 id="kali-配置-sshd-服务"><a href="#kali-配置-sshd-服务" class="headerlink" title="kali 配置 sshd 服务"></a>kali 配置 sshd 服务</h2><ol><li> 修改 sshd 配置文件, 允许 root 登录</li><li> <code>vim /etc/ssh/sshd_config</code>  –&gt;  <code>: set nu</code></li><li> 修改 PermitRootLogin 32 行附近, 打开注释, 设置为 <code>PermitRootLogin yes</code></li><li> <code>/etc/init.d/ssh resatrt</code> 重启 ssh 服务</li><li> <code>update-rc.d ssh enable</code> 设置为开机启动</li></ol><h1 id="kali-信息收集-DNS"><a href="#kali-信息收集-DNS" class="headerlink" title="kali 信息收集 - DNS"></a>kali 信息收集 - DNS</h1><h2 id="dns-域名解析原理"><a href="#dns-域名解析原理" class="headerlink" title="dns 域名解析原理"></a>dns 域名解析原理</h2><h3 id="dns-服务器概述"><a href="#dns-服务器概述" class="headerlink" title="dns 服务器概述"></a>dns 服务器概述</h3><p>运行 dns 服务器程序的计算机, 存储 dns 数据库信息; dns 服务器分为根域 dns 服务器, 顶级域名 dns 服务器; 根域 dns 服务器有 13 个, 都存储了全部的顶级域名服务器的所在地址, 顶级域名服务器存储了每位客户所注册的主机地址, 对应到例如 163.com 这个级别;</p><h3 id="域名记录"><a href="#域名记录" class="headerlink" title="域名记录"></a>域名记录</h3><ol><li> A 记录 正向解析, 将域名和 ip 地址关联起来;</li><li> Cname 别名记录, 允许客户将多个名字映射到到同一台计算机;</li><li> NS 域名服务器记录, 用于指定该域名由哪个 dns 服务器来解析;</li><li> MX 邮箱记录, 邮件交换记录, 它指向一个邮件服务器;</li><li> PTR 反向解析; ip 对应的域名, 这些记录保存在 <code>in-addr.arpa</code>域中</li></ol><h3 id="ping-获取域名对应的-ip"><a href="#ping-获取域名对应的-ip" class="headerlink" title="ping 获取域名对应的 ip"></a>ping 获取域名对应的 ip</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─<span class="comment"># ping xuegod.cn</span></span><br><span class="line">PING xuegod.cn (47.243.25.180) 56(84) bytes of data.</span><br><span class="line">64 bytes from 47.243.25.180 (47.243.25.180): icmp_seq=1 ttl=44 time=78.4 ms</span><br><span class="line">64 bytes from 47.243.25.180 (47.243.25.180): icmp_seq=2 ttl=44 time=75.5 ms</span><br><span class="line">64 bytes from 47.243.25.180 (47.243.25.180): icmp_seq=3 ttl=44 time=75.4 ms</span><br><span class="line">^C</span><br><span class="line">--- xuegod.cn ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 2003ms</span><br><span class="line">rtt min/avg/max/mdev = 75.396/76.406/78.355/1.378 ms</span><br></pre></td></tr></table></figure><p>47.243.25.180 为域名对应的 ip 地址</p><h3 id="nslookup-查看域名信息"><a href="#nslookup-查看域名信息" class="headerlink" title="nslookup 查看域名信息"></a>nslookup 查看域名信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─<span class="comment"># nslookup xuegod.cn</span></span><br><span class="line">Server:8.8.8.8  <span class="comment"># dns 服务器</span></span><br><span class="line">Address:8.8.8.8<span class="comment">#53# dns 服务器地址</span></span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:xuegod.cn<span class="comment"># 我们要解析的域名</span></span><br><span class="line">Address: 47.243.25.180<span class="comment"># 解析得到的 ip 地址</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─<span class="comment"># nslookup www.baidu.com</span></span><br><span class="line">Server:8.8.8.8</span><br><span class="line">Address:8.8.8.8<span class="comment">#53</span></span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">www.baidu.comcanonical name = www.a.shifen.com.    </span><br><span class="line">www.a.shifen.comcanonical name = www.wshifen.com. <span class="comment"># www.baidu.com 和 www.wshifen.com 是彼此的域名别名</span></span><br><span class="line">Name:www.wshifen.com</span><br><span class="line">Address: 103.235.46.39</span><br></pre></td></tr></table></figure><h3 id="dig-查看域名信息"><a href="#dig-查看域名信息" class="headerlink" title="dig 查看域名信息"></a>dig 查看域名信息</h3><p>语法: dig (选项) 需要查询的域名</p><ol><li> dig @&lt;dns 服务器地址&gt; 域名  –&gt;  指定进行解析的域名服务器</li><li> dig (选项) 域名 any  –&gt;  显示所有类型的域名记录, 如果不加 any 则默认只显示 A 记录</li><li> dig -x ip地址  –&gt;  使用 ip 反查域名</li><li> dig txt chaos VERSION.BIND @域名服务器  –&gt;  查看域名服务器 bind 的软件版本信息, 可以通过版本信息来查找相关版本漏洞的利用方式 </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─<span class="comment"># dig xuegod.cn</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.16.11-Debian &lt;&lt;&gt;&gt; xuegod.cn</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- <span class="string">opcode: QUERY, status: NOERROR, id: 29684</span></span><br><span class="line"><span class="string">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; OPT PSEUDOSECTION:</span></span><br><span class="line"><span class="string">; EDNS: version: 0, flags:; udp: 512</span></span><br><span class="line"><span class="string">;; QUESTION SECTION:</span></span><br><span class="line"><span class="string">;xuegod.cn.INA</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ANSWER SECTION:</span></span><br><span class="line"><span class="string">xuegod.cn.599INA47.243.25.180  # 域名对应的 A 记录</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; Query time: 79 msec</span></span><br><span class="line"><span class="string">;; SERVER: 8.8.8.8#53(8.8.8.8)</span></span><br><span class="line"><span class="string">;; WHEN: 三 6月 16 22:54:32 EDT 2021</span></span><br><span class="line"><span class="string">;; MSG SIZE  rcvd: 54</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─<span class="comment"># dig @114.114.114.114 xuegod.cn</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.16.11-Debian &lt;&lt;&gt;&gt; @114.114.114.114 xuegod.cn</span><br><span class="line">; (1 server found)</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- <span class="string">opcode: QUERY, status: NOERROR, id: 29481</span></span><br><span class="line"><span class="string">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; QUESTION SECTION:</span></span><br><span class="line"><span class="string">;xuegod.cn.INA</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ANSWER SECTION:</span></span><br><span class="line"><span class="string">xuegod.cn.600INA47.243.25.180</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; Query time: 55 msec</span></span><br><span class="line"><span class="string">;; SERVER: 114.114.114.114#53(114.114.114.114)</span></span><br><span class="line"><span class="string">;; WHEN: 三 6月 16 23:34:22 EDT 2021</span></span><br><span class="line"><span class="string">;; MSG SIZE  rcvd: 43</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─<span class="comment"># dig @114.114.114.114 xuegod.cn any</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.16.11-Debian &lt;&lt;&gt;&gt; @114.114.114.114 xuegod.cn any</span><br><span class="line">; (1 server found)</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- <span class="string">opcode: QUERY, status: NOERROR, id: 21625</span></span><br><span class="line"><span class="string">;; flags: qr rd ra; QUERY: 1, ANSWER: 5, AUTHORITY: 0, ADDITIONAL: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; OPT PSEUDOSECTION:</span></span><br><span class="line"><span class="string">; EDNS: version: 0, flags:; udp: 512</span></span><br><span class="line"><span class="string">;; QUESTION SECTION:</span></span><br><span class="line"><span class="string">;xuegod.cn.INANY</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ANSWER SECTION:</span></span><br><span class="line"><span class="string">xuegod.cn.600INMX10 mxbiz2.qq.com.</span></span><br><span class="line"><span class="string">xuegod.cn.600INMX5 mxbiz1.qq.com.</span></span><br><span class="line"><span class="string">xuegod.cn.487INA47.243.25.180</span></span><br><span class="line"><span class="string">xuegod.cn.2034INNSdns7.hichina.com.</span></span><br><span class="line"><span class="string">xuegod.cn.2034INNSdns8.hichina.com.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; Query time: 271 msec</span></span><br><span class="line"><span class="string">;; SERVER: 114.114.114.114#53(114.114.114.114)</span></span><br><span class="line"><span class="string">;; WHEN: 三 6月 16 23:36:16 EDT 2021</span></span><br><span class="line"><span class="string">;; MSG SIZE  rcvd: 152</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─<span class="comment"># dig -x 114.114.114.114</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.16.11-Debian &lt;&lt;&gt;&gt; -x 114.114.114.114</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- <span class="string">opcode: QUERY, status: NOERROR, id: 48624</span></span><br><span class="line"><span class="string">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; OPT PSEUDOSECTION:</span></span><br><span class="line"><span class="string">; EDNS: version: 0, flags:; udp: 512</span></span><br><span class="line"><span class="string">;; QUESTION SECTION:</span></span><br><span class="line"><span class="string">;114.114.114.114.in-addr.arpa.INPTR</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ANSWER SECTION:</span></span><br><span class="line"><span class="string">114.114.114.114.in-addr.arpa. 335 INPTRpublic1.114dns.com.   # PTR ip 对应的域名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; Query time: 279 msec</span></span><br><span class="line"><span class="string">;; SERVER: 8.8.8.8#53(8.8.8.8)</span></span><br><span class="line"><span class="string">;; WHEN: 三 6月 16 23:37:35 EDT 2021</span></span><br><span class="line"><span class="string">;; MSG SIZE  rcvd: 89</span></span><br></pre></td></tr></table></figure><h3 id="whois-查询域名信息"><a href="#whois-查询域名信息" class="headerlink" title="whois 查询域名信息"></a>whois 查询域名信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─<span class="comment"># whois xuegod.cn</span></span><br><span class="line">Domain Name: xuegod.cn</span><br><span class="line">ROID: 20140908s10001s72166376-cn</span><br><span class="line">Domain Status: ok</span><br><span class="line">Registrant: 北京学神科技有限公司</span><br><span class="line">Registrant Contact Email: jianmingbasic@163.com</span><br><span class="line">Sponsoring Registrar: 阿里云计算有限公司（万网）</span><br><span class="line">Name Server: dns7.hichina.com</span><br><span class="line">Name Server: dns8.hichina.com</span><br><span class="line">Registration Time: 2014-09-08 10:52:31</span><br><span class="line">Expiration Time: 2021-09-08 10:52:31</span><br><span class="line">DNSSEC: unsigned</span><br></pre></td></tr></table></figure><h3 id="Maltego-收集子域名"><a href="#Maltego-收集子域名" class="headerlink" title="Maltego 收集子域名"></a>Maltego 收集子域名</h3><p>子域名是某个主域的二级域名或者多级域名, 在防御措施严密情况下无法直接拿下主域, 那么就可以采用迂回战术拿下子域名, 然后无限靠近主域;</p>]]></content>
      
      
      <categories>
          
          <category> env </category>
          
      </categories>
      
      
        <tags>
            
            <tag> env </tag>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>adb 常用命令</title>
      <link href="adb/"/>
      <url>adb/</url>
      
        <content type="html"><![CDATA[<ul><li><p>adb 启动和停止</p><ul><li><code>adb start-server</code></li><li><code>adb kill-server</code></li></ul></li><li><p>adb 查看最顶端应用的包名和 activity 名</p><ul><li><code>adb shell dumpsys window | grep mCurrentFocus</code> </li></ul></li><li><p>adb 输入字符串</p><ul><li><code>adb shell input text &quot;&lt;String&gt;&quot;</code> </li></ul></li><li><p>adb 模拟按键</p><ul><li><code>adb shell input keyevent &lt;Int&gt;</code> <a href="https://www.huaweicloud.com/articles/aaab7697baca07f9d37854a69631a11d.html">按键参考</a></li></ul></li><li><p>adb 安装 apk 指定 32 位和 64 位</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb install --abi armeabi-v7a &lt;apk path&gt;  <span class="comment"># 32位下运行</span></span><br><span class="line">adb install --abi arm64-v8a &lt;apk path&gt;    <span class="comment"># 64位下运行</span></span><br></pre></td></tr></table></figure></li><li><p>adb 查看连接设备</p><ul><li><code>adb devices</code></li></ul></li><li><p>adb 指定连接设备</p><ul><li><code>adb -s cf12345f shell</code></li></ul></li><li><p>adb 安装应用</p><ul><li><code>adb install -r demo.apk</code></li></ul></li><li><p>adb 卸载应用</p><ul><li><code>adb uninstall &lt;包名&gt;</code></li></ul></li><li><p>adb 列出手机安装的所有 app 的包名</p><ul><li><code>adb shell pm list packages</code></li></ul></li><li><p>adb 列出除了系统应用之外的第三方应用</p><ul><li><code>adb shell pm list package -3</code> </li></ul></li><li><p>adb 清除应用数据和缓存</p><ul><li><code>adb shell pm clear &lt;包名&gt;</code></li></ul></li><li><p>adb 强制停止应用</p><ul><li><code>adb shell am force-stop com.tencent.mm</code></li></ul></li><li><p>adb 启动 activity</p><ul><li><code>adb shell am start com.tencent.mm/com.tencent.mm.ui.LauncherUI</code> 配合adb 查看最顶端应用的包名和 activity 名使用</li></ul></li><li><p>adb 取出安装的 apk</p><ol><li><code>adb shell pm list package</code></li><li><code>adb shell pm path com.tence01.mm</code> 获取apk的位置</li><li><code>adb pull /data/app/com.tence01.mm-1.apk ~/apks</code> 拉取到本地</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>arm</title>
      <link href="arm/"/>
      <url>arm/</url>
      
        <content type="html"><![CDATA[<h1 id="arm"><a href="#arm" class="headerlink" title="arm"></a>arm</h1><h2 id="arm-可执行程序生成过程"><a href="#arm-可执行程序生成过程" class="headerlink" title="arm 可执行程序生成过程"></a>arm 可执行程序生成过程</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>编写hello.c 文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello arm!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mac 自带的 clang 编译, 如果使用默认的 clang 进行编译<br><code>clang _01helloworld.c -o hello_mac</code></p><p>使用 <code>file</code> 查看, 编译的结果为<br><code>Mach-O 64-bit executable x86_6</code></p><p>需要使用 <code>ndk</code> 中的 <code>clang</code> 进行编译; 可以直接使用 <code>android studio</code> 自带的 <code>ndk</code> 中的 <code>clang</code> 命令进行编译;</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2020-12-03-065237.png" alt="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2020-12-03-065237.png"></p><p>将 <code>clang</code> 添加到环境变量, 方便使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alias arm&#x3D;&#39;export PATH&#x3D;&quot;&#x2F;Users&#x2F;zhangyang&#x2F;Library&#x2F;Android&#x2F;sdk&#x2F;ndk&#x2F;21.0.6113669&#x2F;toolchains&#x2F;llvm&#x2F;prebuilt&#x2F;darwin-x86_64&#x2F;bin:$PATH&quot;&#39;</span><br><span class="line">arm # 切换环境变量</span><br><span class="line">clang -target aarch64-linux-android21 _01helloworld.c -o hello # 编译 64 位</span><br><span class="line">clang -target armv7-linux-android21 _01helloworld.c -o hello     # 编译 32 位</span><br></pre></td></tr></table></figure><p>使用 <code>file</code> 查看, 结果为: <code>hello: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /system/bin/linker64, not stripped</code></p><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>获取预编译的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -target arm-linux-android21 -E _01helloworld.c *-o arm*hello.i</span><br></pre></td></tr></table></figure><p>使用 <code>clang</code> 命令, 增加 <code>-E</code> 参数, 生成一个 <code>.i</code> 尾缀的文件</p><ul><li>hello.i</li></ul><p>预处理过程将源文件中导入的头文件和宏展开; 预处理输出结果还是一个源程序文件, 以 <code>.i</code> 为扩展名</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -target arm-linux-android21 -S arm_hello.i -o arm_hello.s</span><br></pre></td></tr></table></figure><p>使用 <code>clang</code> 命令, 增加 <code>-S</code> 参数, 将 <code>.i</code> 文件生成为一个尾缀 <code>.s</code> 文件</p><ul><li>arm_hello.s</li></ul><h3 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -target arm-linux-android21 -c arm_hello.s -o arm_hello.o</span><br></pre></td></tr></table></figure><p>此时生成的 <code>arm_hello.o</code> , 生成一个可重定位目标文件, 以 <code>.o</code> 为扩展名;</p><p>它是一个二进制文件, 其中的代码已经是机器指令了;</p><p>数据以及其他信息也都用二进制表示, 所以它不可读, 打开显示为乱码;</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>将多个 <code>.o</code> 文件通过命令链接成一个可执行文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -taregt arm-linux-adnroid21 arm_hello.o -o arm_hello</span><br></pre></td></tr></table></figure><p>在 <code>android</code> 中运行</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2020-12-03-073133.png" alt="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2020-12-03-073133.png"></p>]]></content>
      
      
      <categories>
          
          <category> so </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arm </tag>
            
            <tag> so </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>101辅导</title>
      <link href="101fudao/"/>
      <url>101fudao/</url>
      
        <content type="html"><![CDATA[<h1 id="INFO"><a href="#INFO" class="headerlink" title="INFO"></a>INFO</h1><p>app: 101辅导<br>包名: com.chinaedu.blessonstu<br>版本: 1.8.5</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>直接搜索 “signature” 定位到关键代码<code>com.chinaedu.http.interceptor.SHA1EncryptInterceptor</code>;<br><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-03-15-083222.png" alt="img"></p><p>该类是一个<code>interceptor</code> , 通过 <code>addInterceptor</code>方法添加到 <code>OkHttpClient</code> 中;<br><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-03-15-083132.png" alt="img"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///&lt;reference path=&#x27;./index.d.ts&#x27;/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;执行 -&gt; &quot;</span>,<span class="string">&quot;hook&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> Sha1Clazz = Java.use(<span class="string">&quot;com.chinaedu.blessonstu.utils.SHA1Utils&quot;</span>);</span><br><span class="line">        Java.openClassFile(<span class="string">&quot;/data/local/tmp/r0gson.dex&quot;</span>).load();</span><br><span class="line">        <span class="keyword">var</span> gson = Java.use(<span class="string">&quot;com.r0ysue.gson.Gson&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Sha1Clazz.makeSignature.implementation = <span class="function"><span class="keyword">function</span> (<span class="params">map, str</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;makeSignature map:&quot;</span>,gson.$new().toJson(map));</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;makeSignature str:&quot;</span>, str);</span><br><span class="line">            <span class="keyword">var</span> result = <span class="built_in">this</span>.makeSignature(map, str);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;makeSignature result:&quot;</span>, result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Sha1Clazz.SHA1.implementation = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;SHA1 str&quot;</span>, str);</span><br><span class="line">            <span class="keyword">var</span> result = <span class="built_in">this</span>.SHA1(str);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;SHA1 result&quot;</span>, result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    hook();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-03-15-084738.png" alt="img"></p><ol><li>对请求参数进行排序</li><li>排序之后拼接字符串 key=value</li><li>添加&amp;符进行分割</li><li>末位添加 salt: 00302c79-3a50-47ae-89f3-242f51b3e817</li><li>对字符串进行标准的 sha1 摘要</li></ol><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-03-15-085117.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>铁甲</title>
      <link href="tiejia/"/>
      <url>tiejia/</url>
      
        <content type="html"><![CDATA[<h1 id="INFO"><a href="#INFO" class="headerlink" title="INFO"></a>INFO</h1><p>app: 铁甲<br>包名: com.cehome.cehomebbs<br>版本: 3.9.9.0</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>使用关键词搜索 “token” 可以直接定位到关键代码 <code>cehome.sdk.utils.AesUtil.getSystemHeader</code><br><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-03-15-080348.png" alt="img"><br>定位到关键代码, 使用了 Aes 进行加密; 进入该方法可以看到使用的标准的加密:<br><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-03-15-080428.png" alt="img"></p><ol><li>加密内容: “cehomeapp@” + uuid</li><li>key: j33$E@GctUXJtVfO</li><li>ECB/PKCS5Padding</li></ol><h1 id="python-实现"><a href="#python-实现" class="headerlink" title="python 实现"></a>python 实现</h1><p><a href="https://github.com/kevinspider/snip/blob/main/AesEcb.py">AesEcb</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Mapping</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> Padding</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode, b64decode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aes_ecb_pkcs7_b64_encrypt</span>(<span class="params">data, key</span>):</span></span><br><span class="line">    data = Padding.pad(data.encode(<span class="string">&#x27;utf-8&#x27;</span>), AES.block_size, <span class="string">&#x27;pkcs7&#x27;</span>)</span><br><span class="line">    aes = AES.new(key.encode(<span class="string">&#x27;utf-8&#x27;</span>), AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">return</span> b64encode(aes.encrypt(data)).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aes_ecb_pkcs7_b64_decrypt</span>(<span class="params">data, key</span>):</span></span><br><span class="line">    data = b64decode(data.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    aes = AES.new(key.encode(<span class="string">&#x27;utf-8&#x27;</span>), AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">return</span> Padding.unpad(aes.decrypt(data), AES.block_size, <span class="string">&#x27;pkcs7&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    result = aes_ecb_pkcs7_b64_encrypt(<span class="string">&quot;cehomeapp@f6b72cfb-e94d-4eba-9aa3-6c41f33118e8&quot;</span>,<span class="string">&quot;j33$E@GctUXJtVfO&quot;</span>)</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝宝树孕育</title>
      <link href="baobaoshu/"/>
      <url>baobaoshu/</url>
      
        <content type="html"><![CDATA[<h1 id="INFO"><a href="#INFO" class="headerlink" title="INFO"></a>INFO</h1><p>app: com.babytree.apps.pregnancy<br>name: 宝宝树孕育<br>version: 8.31.0</p><h1 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h1><p>测试过程中发现, 使用 objection 进行 dexdump 比使用 python 中 dexdump 更加稳定;<br><code>objection -g com.babytree.apps.pregnancy explore</code><br><code>plugin load /Users/zhangyang/.objection/plugins/dexdump</code><br><code>plugin dexdump dump</code></p><h1 id="合并-dex"><a href="#合并-dex" class="headerlink" title="合并 dex"></a>合并 dex</h1><p>脱壳 dump 下来的 dex 文件存放在 ~/packageName 下, <a href="https://kevinspider.github.io/post/dex2apk/">dex2apk</a>进行合并 dex 文件;<br><code>mkdir source</code><br><code>mv *.dex ./source</code><br><code>python dex2apk.py -a ./baobaoshu.apk -i source</code><br><code>jadx-gui repacked.apk</code></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>直接搜索 “signature” 可以快速定位到加密位置:<br><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-03-15-052527.png" alt="img"><br>或者通过观察加密字段的特征, 使用 md5 反向定位 <a href="https://github.com/kevinspider/snip/blob/main/hookMD5.js">hookmd5</a><br>定位到关键加密位置: com.meitun.mama.util.bt<br>查看该类的 a 方法, 加密逻辑为:</p><ol><li>对请求的 url 进行首字母排序</li><li>遍历排序结果, 进行 key=value 的拼接</li><li>末位添加 salt : iambabytreekey!@#$%^&amp;*()</li><li>对结果进行 md5</li></ol>]]></content>
      
      
      <categories>
          
          <category> demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="git/"/>
      <url>git/</url>
      
        <content type="html"><![CDATA[<p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-03-15-032156.jpg" alt="img"></p><ul><li>workspace: 工作区</li><li>index/stage: 暂存区</li><li>repository: 仓库区(本地仓库)</li><li>remote: 远程仓库</li></ul><h1 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>Git 的配置文件为 .gitconfig, 可以在用户主目录下(全局配置), 也可以在项目目录下(项目配置);</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git config [--global] user.name <span class="string">&quot;[name]&quot;</span></span><br><span class="line">$ git config [--global] user.email <span class="string">&quot;[email address]&quot;</span></span><br></pre></td></tr></table></figure><h1 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h1 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h1 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h1 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">$ git <span class="built_in">log</span> -S [keyword]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span><br><span class="line">$ git diff --shortstat <span class="string">&quot;@&#123;0 day ago&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h1 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line">$ git archive</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置换行符为LF</span></span><br><span class="line">git config --global core.autocrlf <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#拒绝提交包含混合换行符的文件</span></span><br><span class="line">git config --global core.safecrlf <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dex2apk</title>
      <link href="dex2apk/"/>
      <url>dex2apk/</url>
      
        <content type="html"><![CDATA[<p>使用脱壳工具脱下来的 dex 合并成 apk; 直接拖入 jadx-gui 中查看<br>针对之前出现的某些 dex 格式错误, 导致重新打包之后会出现 jadx-gui 无法打开的问题;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rename_class</span>(<span class="params">path</span>):</span></span><br><span class="line">   files = os.listdir(path)</span><br><span class="line">   dex_index = <span class="number">0</span></span><br><span class="line">   <span class="keyword">if</span> path.endswith(<span class="string">&#x27;/&#x27;</span>):</span><br><span class="line">       path = path[:-<span class="number">1</span>]</span><br><span class="line">       print(path)</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(files)):</span><br><span class="line">       <span class="keyword">if</span> files[i].endswith(<span class="string">&#x27;.dex&#x27;</span>):</span><br><span class="line">           old_name = path + <span class="string">&#x27;/&#x27;</span> + files[i]</span><br><span class="line">           <span class="keyword">if</span> dex_index == <span class="number">0</span>:</span><br><span class="line">               new_name = path + <span class="string">&#x27;/&#x27;</span> + <span class="string">&#x27;classes.dex&#x27;</span></span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               new_name = path + <span class="string">&#x27;/&#x27;</span> + <span class="string">&#x27;classes%d.dex&#x27;</span> % dex_index</span><br><span class="line">           dex_index += <span class="number">1</span></span><br><span class="line">           <span class="keyword">if</span> os.path.exists(new_name):</span><br><span class="line">               <span class="keyword">continue</span></span><br><span class="line">           os.rename(old_name, new_name)</span><br><span class="line">   print(<span class="string">&#x27;[*] 重命名完毕&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_dex</span>(<span class="params">path</span>):</span></span><br><span class="line">   files = os.listdir(path)</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(files)):</span><br><span class="line">       <span class="keyword">if</span> files[i].endswith(<span class="string">&quot;.dex&quot;</span>):</span><br><span class="line">           flag = os.popen(<span class="string">&quot;jadx -s &quot;</span> + path + <span class="string">&quot;/&quot;</span> + files[i]).read()</span><br><span class="line">           print(<span class="string">&quot;flag&quot;</span>, flag)</span><br><span class="line">           <span class="keyword">if</span> <span class="string">&quot;INFO  - done&quot;</span> <span class="keyword">in</span> flag:</span><br><span class="line">               print(<span class="string">&quot;校验成功&quot;</span>)</span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               print(<span class="string">&quot;校验失败, 删除文件&quot;</span> + path + <span class="string">&quot;/&quot;</span> + files[i])</span><br><span class="line">               os.remove(path + <span class="string">&quot;/&quot;</span> + files[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_META_INF_from_apk</span>(<span class="params">apk_path, target_path</span>):</span></span><br><span class="line">   r = zipfile.is_zipfile(apk_path)</span><br><span class="line">   <span class="keyword">if</span> r:</span><br><span class="line">       fz = zipfile.ZipFile(apk_path, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">       <span class="keyword">for</span> file <span class="keyword">in</span> fz.namelist():</span><br><span class="line">           <span class="keyword">if</span> file.startswith(<span class="string">&#x27;META-INF&#x27;</span>):</span><br><span class="line">               fz.extract(file, target_path)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       print(<span class="string">&#x27;[-] %s 不是一个APK文件&#x27;</span> % apk_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zip_dir</span>(<span class="params">dirname, zipfilename</span>):</span></span><br><span class="line">   filelist = []</span><br><span class="line">   <span class="keyword">if</span> os.path.isfile(dirname):</span><br><span class="line">       <span class="keyword">if</span> dirname.endswith(<span class="string">&#x27;.dex&#x27;</span>):</span><br><span class="line">           filelist.append(dirname)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(dirname):</span><br><span class="line">           <span class="keyword">for</span> <span class="built_in">dir</span> <span class="keyword">in</span> dirs:</span><br><span class="line">               <span class="comment"># if dir == &#x27;META-INF&#x27;:</span></span><br><span class="line">               <span class="comment"># print(&#x27;dir:&#x27;, os.path.join(root, dir))</span></span><br><span class="line">               filelist.append(os.path.join(root, <span class="built_in">dir</span>))</span><br><span class="line">           <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">               <span class="comment"># print(&#x27;file:&#x27;, os.path.join(root, name))</span></span><br><span class="line"></span><br><span class="line">               filelist.append(os.path.join(root, name))</span><br><span class="line"></span><br><span class="line">   z = zipfile.ZipFile(zipfilename, <span class="string">&#x27;w&#x27;</span>, zipfile.ZIP_DEFLATED)</span><br><span class="line">   <span class="keyword">for</span> tar <span class="keyword">in</span> filelist:</span><br><span class="line">       arcname = tar[<span class="built_in">len</span>(dirname):]</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (<span class="string">&#x27;META-INF&#x27;</span> <span class="keyword">in</span> arcname <span class="keyword">or</span> arcname.endswith(<span class="string">&#x27;.dex&#x27;</span>)) <span class="keyword">and</span> <span class="string">&#x27;.DS_Store&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> arcname:</span><br><span class="line">           z.write(tar, arcname)</span><br><span class="line">   print(<span class="string">&#x27;[*] APK打包成功，你可以拖入APK进行分析啦！&#x27;</span>  )</span><br><span class="line">   z.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_args</span>():</span></span><br><span class="line">   parser = argparse.ArgumentParser(description=<span class="string">&#x27;repackage dumped dex to apk for jeb/jadx analysis.&#x27;</span>)</span><br><span class="line">   parser.add_argument(<span class="string">&#x27;-a&#x27;</span>, <span class="string">&#x27;--apk_path&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">                       <span class="built_in">help</span>=<span class="string">&#x27;apk for extracting META-INF&#x27;</span>)</span><br><span class="line">   parser.add_argument(<span class="string">&#x27;-i&#x27;</span>, <span class="string">&#x27;--dex_path&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">                       <span class="built_in">help</span>=<span class="string">&#x27;path of dumped dex&#x27;</span>)</span><br><span class="line">   parser.add_argument(<span class="string">&#x27;-o&#x27;</span>, <span class="string">&#x27;--output&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&quot;repacked.apk&quot;</span>,</span><br><span class="line">                       <span class="built_in">help</span>=<span class="string">&#x27;apk path after zip&#x27;</span>)</span><br><span class="line">   args = parser.parse_args()</span><br><span class="line">   <span class="comment">#print(args.apk_path)</span></span><br><span class="line">   <span class="keyword">return</span> args</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   args = parse_args()</span><br><span class="line">   rename_class(args.dex_path)</span><br><span class="line">   check_dex(args.dex_path)</span><br><span class="line">   extract_META_INF_from_apk(args.apk_path, args.dex_path)</span><br><span class="line">   <span class="comment"># zip_file(args.dex_path)</span></span><br><span class="line">   zip_dir(args.dex_path, args.output)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment"># usage</span></span><br><span class="line">   <span class="comment"># jadx 需要加入环境变量</span></span><br><span class="line">   <span class="comment"># python dex2apk.py -a ./baobaoshu.apk -i com.babytree.apps.pregnancy</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本来生活</title>
      <link href="benlaishenghuo/"/>
      <url>benlaishenghuo/</url>
      
        <content type="html"><![CDATA[<h1 id="INFO"><a href="#INFO" class="headerlink" title="INFO"></a>INFO</h1><p>app: com.android.benlailife.activity<br>name: 本来生活<br>version: 5.7.1</p><h1 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h1><p><code>frida-dexdump dump</code><br><code>grep -grep -rnli &quot;mainactivity&quot; ./</code><br>找到目标 <code>dex</code> 文件, 使用 <code>jadx-gui</code> 打开</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="sign-参数"><a href="#sign-参数" class="headerlink" title="sign 参数"></a>sign 参数</h2><p>直接全局搜索 “sign” 很容易定位到 <code>com.android.benlai.request.basic.c</code> 中的 <code>createSign</code>方法;<br><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-03-11-120100.png" alt="img"></p><ol><li>对输入的 map 根据键进行排序</li><li>遍历排序结果拼接成字符串</li><li>字符串末位添加 salt : <code>benlai</code></li><li>调用 <code>u.a</code>方法, 进入之后看到就是一个标准的 md5, 然后将 md5 的结果转成大写</li></ol><h2 id="Authorization"><a href="#Authorization" class="headerlink" title="Authorization"></a>Authorization</h2><p>清空 app 的缓存, 抓包发现在启动的较早时机会发出一个 <code>https://api.benlai.com/v5/token</code> 的请求; 此时的 <code>Authorization</code> 是一个定值; 写死或者通过 hook 获取都可以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CredentialsClazz = Java.use(<span class="string">&quot;okhttp3.Credentials&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> result = CredentialsClazz.basic(<span class="string">&quot;ffa50d1669fe48e3a512fe68d7f5d10e&quot;</span>,<span class="string">&quot;3e4b5ac89c5746ab8a1d72df8242b126&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;request_token_au&quot;</span>, result);</span><br></pre></td></tr></table></figure><p>通过 hook 的方式也可以手动获取和清空该值, 每次清空该值之后再请求都会触发 <code>https://api.benlai.com/v5/token</code> 请求;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 authorization</span></span><br><span class="line"><span class="keyword">var</span> mmkvClazz = Java.use(<span class="string">&quot;com.tencent.mmkv.MMKV&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> mmkv_token = mmkvClazz.mmkvWithID(<span class="string">&quot;MMKV_TOKEN&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;mmkv_token&quot;</span>, mmkv_token);</span><br><span class="line"><span class="keyword">var</span> result = mmkv_token.decodeString(<span class="string">&quot;GLOBAL_TOKEN&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;result&quot;</span>, result);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空</span></span><br><span class="line">mmkv_token.encode(<span class="string">&quot;GLOBAL_TOKEN&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;重制 global_token&quot;</span>);</span><br></pre></td></tr></table></figure><p>拿到的响应内容为:<br><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-03-11-120622.png" alt="img"><br>access_token 就是之后请求数据要使用的 <code>Authorization</code>;</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">__author__ = <span class="string">&quot;Kevin&quot;</span></span><br><span class="line">__time__ = <span class="string">&quot;2021/3/11&quot;</span></span><br><span class="line">__blog__ = <span class="string">&quot;https://kevinspider.github.io/&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">deviceId = <span class="string">&#x27;010214c4-9b56-4130-a4d9-3124c82462f0&#x27;</span></span><br><span class="line">android_id = <span class="string">&#x27;37cea1958c8c5c1e&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encodeMethod</span>(<span class="params">params</span>):</span></span><br><span class="line">    dict_2 = <span class="built_in">dict</span>(<span class="built_in">sorted</span>(params.items(), key=<span class="keyword">lambda</span> i: i[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">input</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> dict_2:</span><br><span class="line">        <span class="built_in">input</span> += key + dict_2[key]</span><br><span class="line"></span><br><span class="line">    print(<span class="built_in">input</span>)</span><br><span class="line">    <span class="built_in">input</span> += <span class="string">&quot;benlai&quot;</span></span><br><span class="line"></span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    md5.update(<span class="built_in">input</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    md5_result = md5.hexdigest().upper()</span><br><span class="line">    <span class="keyword">return</span> md5_result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAccessToken</span>():</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;Basic ZmZhNTBkMTY2OWZlNDhlM2E1MTJmZTY4ZDdmNWQxMGU6M2U0YjVhYzg5YzU3NDZhYjhhMWQ3MmRmODI0MmIxMjY=&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Dalvik/2.1.0(Linux;U;Android8.1.0;Nexus6PBuild/OPM7.181205.001)&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;api.benlai.com&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;systemVersion&quot;</span>: <span class="string">&quot;8.1.0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;phoneModel&quot;</span>: <span class="string">&quot;Nexus_6P&quot;</span>,</span><br><span class="line">        <span class="string">&quot;localcity&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pageid&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;source&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;nativeVersion&quot;</span>: <span class="string">&quot;5.7.1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;t&quot;</span>: <span class="built_in">str</span>(<span class="built_in">int</span>(time.time() * <span class="number">1000</span>)),</span><br><span class="line">        <span class="string">&quot;imei&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="comment"># &quot;sign&quot;: &quot;48B07E12DB11CECBE2A00B86AFD851A8&quot;,</span></span><br><span class="line">        <span class="string">&quot;webId&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;version&quot;</span>: <span class="string">&quot;5.7.1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;android_id&quot;</span>: android_id,</span><br><span class="line">        <span class="string">&quot;channel&quot;</span>: <span class="string">&quot;yyb&quot;</span>,</span><br><span class="line">        <span class="string">&quot;deviceId&quot;</span>: deviceId,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">      <span class="string">&#x27;grant_Type&#x27;</span>: <span class="string">&#x27;Client_Credentials&#x27;</span>,</span><br><span class="line">      <span class="comment"># &#x27;sign&#x27;: &#x27;48B07E12DB11CECBE2A00B86AFD851A8&#x27;,</span></span><br><span class="line">      <span class="string">&#x27;channel&#x27;</span>: <span class="string">&#x27;yyb&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;pageid&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;systemVersion&#x27;</span>: <span class="string">&#x27;8.1.0&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;deviceId&#x27;</span>: deviceId,</span><br><span class="line">      <span class="string">&#x27;phoneModel&#x27;</span>: <span class="string">&#x27;Nexus_6P&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;localcity&#x27;</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;nativeVersion&#x27;</span>: <span class="string">&#x27;5.7.1&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;version&#x27;</span>: <span class="string">&#x27;5.7.1&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;webId&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;t&#x27;</span>: <span class="built_in">str</span>(<span class="built_in">int</span>(time.time() * <span class="number">1000</span>)),</span><br><span class="line">      <span class="string">&#x27;imei&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;android_id&#x27;</span>: android_id</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    md5_result = encodeMethod(params)</span><br><span class="line"></span><br><span class="line">    data[<span class="string">&#x27;sign&#x27;</span>] = md5_result</span><br><span class="line">    params[<span class="string">&#x27;sign&#x27;</span>] = md5_result</span><br><span class="line"></span><br><span class="line">    response = requests.post(<span class="string">&#x27;https://api.benlai.com/v5/token&#x27;</span>, headers=headers, params=params, data=data)</span><br><span class="line">    data = response.json()</span><br><span class="line"></span><br><span class="line">    access_token = data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;access_token&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> access_token</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getList</span>(<span class="params">accessToken</span>):</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&quot;Bearer &quot;</span> + accessToken,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Dalvik/2.1.0(Linux;U;Android8.1.0;Nexus6PBuild/OPM7.181205.001)&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;api.benlai.com&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;channel&#x27;</span>: <span class="string">&#x27;yyb&#x27;</span>,</span><br><span class="line">        <span class="comment"># &#x27;sign&#x27;: &#x27;615AECBF4D611D71934E999D0164A693&#x27;,</span></span><br><span class="line">        <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pageid&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;systemVersion&#x27;</span>: <span class="string">&#x27;8.1.0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;deviceId&#x27;</span>: deviceId,</span><br><span class="line">        <span class="string">&#x27;phoneModel&#x27;</span>: <span class="string">&#x27;Nexus_6P&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;limit&#x27;</span>: <span class="string">&#x27;10&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;categorySysNo&#x27;</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;offset&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;localcity&#x27;</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;version&#x27;</span>: <span class="string">&#x27;5.7.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;nativeVersion&#x27;</span>: <span class="string">&#x27;5.7.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;webId&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;t&#x27;</span>: <span class="built_in">str</span>(<span class="built_in">int</span>(time.time() * <span class="number">1000</span>)),</span><br><span class="line">        <span class="string">&#x27;imei&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;android_id&#x27;</span>: android_id,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    md5_result = encodeMethod(params)</span><br><span class="line">    params[<span class="string">&#x27;sign&#x27;</span>] = md5_result</span><br><span class="line"></span><br><span class="line">    response = requests.get(<span class="string">&#x27;https://api.benlai.com/v5/IHome/GetHomePageTagInfo&#x27;</span>, headers=headers, params=params)</span><br><span class="line">    print(response.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    accessToken = getAccessToken()</span><br><span class="line">    print(accessToken)</span><br><span class="line">    getList(accessToken)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frida 抓包</title>
      <link href="zhuabao/"/>
      <url>zhuabao/</url>
      
        <content type="html"><![CDATA[<h1 id="Http-和-Https"><a href="#Http-和-Https" class="headerlink" title="Http 和 Https"></a>Http 和 Https</h1><h2 id="Http-的弊端"><a href="#Http-的弊端" class="headerlink" title="Http 的弊端"></a>Http 的弊端</h2><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-04-09-031554.jpg"></p><p>Http 在传输数据的过程中, 所有的数据都是明文传输的, 没有安全性可言; 想要让 Http 更加安全, 只能使用加密算法对信息进行加密之后再传输, 只要确保密钥不被第三方获取, 那么就能确保数据传输的安全性;</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-04-09-031841.jpg"></p><p>在 Http 的基础上, 对原有的 Http 进行 TLS 或 SSL 的加密, 提高安全性; Https = Http + SSL/TLS</p><h2 id="Https-工作原理"><a href="#Https-工作原理" class="headerlink" title="Https 工作原理"></a>Https 工作原理</h2><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-04-09-032601.jpg" alt="未命名图片"></p><ul><li><p>证书验证</p><ul><li>  ① 客户端发起请求, 连接到服务端的443端口(Https 默认端口)</li><li>  ②采用 Http 协议的服务器必须要有一套数字 CA 证书, 颁发证书的同时会产生一个私钥和一个公钥, 私钥由服务端自己保存, 公钥则是附带在证书信息中, 可以公开; 证书本身也附带一个证书电子签名, 这个签名用来验证证书的完整性和真实性, 防止证书被篡改;</li><li>  ③服务器响应客户端请求, 将证书传递给客户端, 证书包含公钥和其他信息, 如: 证书颁发机构, 公司信息, 和证书有效期等;</li><li>④客户端解析证书并对其进行验证<ul><li>  如果证书不是可信机构颁布的, 或者证书中的域名和实际域名不一致, 或者证书已经过期, 就会向访问者显示一个警告, 告知风险; </li><li>  如果证书可信任, 进入接下来的数据传输中的非对称加密流程</li></ul></li></ul></li><li><p>数据传输</p><ul><li><p>非对称加密</p><p>  <img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-04-09-034704.png" alt="img"></p><ul><li>  客户端判断证书可信任, 客户端会从服务器证书中取出服务器的公钥, 并生成一个随机码 Key, 再使用服务器的公钥对 Key 进行加密;</li><li>  ⑤客户端将使用服务器公钥加密之后的 Key 的结果发送给服务器</li><li>  ⑥服务器使用自己的私钥对客户端发送过来的加密之后的 Key 进行解密, 获取到之后对称加密服务器和客户端通信的密钥 Key;</li></ul></li><li><p>对称加密</p><p>  <img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-04-09-034800.png" alt="img"></p><ul><li>  ⑦使用从客户端获取到的 Key 对信息进行加密, 发送给客户端</li><li>  ⑧之后客户端和服务器都通过这个 Key 对数据进行加解密, 传输所有的内容</li></ul></li></ul></li></ul><h1 id="Http-TCP-Socket"><a href="#Http-TCP-Socket" class="headerlink" title="Http/TCP/Socket"></a>Http/TCP/Socket</h1><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-05-07-030157.jpg"></p><p>HTTP是应用层的协议，也是开发中最常用的一个网络协议；TCP是传输层的协议，大学学过计算机网络的都知道，该层还有一个UDP协议; Socket 本质是(API)，对TCP/IP的封装，可供程序员做网络通讯开发是所调用, Socket 本质是从传输层抽象出来的, 采用 IP 地址和端口号的形式进行标识, 并不是传统意义上的网络协议;</p><h2 id="TCP-和-Http"><a href="#TCP-和-Http" class="headerlink" title="TCP 和 Http"></a>TCP 和 Http</h2><p>在网络分层中, Http 协议是基于 TCP 协议的, 客户端向服务器发送一个 Http 请求时, 需要先和服务端建立 TCP 连接, 也就是经典的三次握手, 握手成功后才会进行数据交互; 总结: Http 基于 TCP</p><h2 id="TCP-和-Socket"><a href="#TCP-和-Socket" class="headerlink" title="TCP 和 Socket"></a>TCP 和 Socket</h2><p>Socket是应用层与传输层之间的同一个抽象层，它是一套接口，所以Socket连接可以基于TCP连接，也有可能基于UDP。我们知道，TCP协议是可靠的，UDP协议是不可靠的，那么基于TCP协议的Socket连接同样是可靠的；基于UDP协议的Socket连接是不可靠的，大多数的即时通讯工具都是基于后者实现的。</p><h2 id="Http-和-Socket"><a href="#Http-和-Socket" class="headerlink" title="Http 和 Socket"></a>Http 和 Socket</h2><p>HTTP连接中，只有客户端发起请求后服务端才会响应，服务端是无法主动向客户端发消息的。而Socket连接中，通信双方发送消息并没有先后的限制，通信双方中的任何一方可以随时向另一方发送消息。</p><h1 id="SSl-和-TLS"><a href="#SSl-和-TLS" class="headerlink" title="SSl 和 TLS"></a>SSl 和 TLS</h1><h2 id="SSL-和-TLS-概念"><a href="#SSL-和-TLS-概念" class="headerlink" title="SSL 和 TLS 概念"></a>SSL 和 TLS 概念</h2><p>SSL 和 TLS 协议可以为通信双方提供识别和认证通道，从而保证通信的机密性和数据完整性。TLS 协议是从 Netscape SSL 3.0 协议演变而来的，不过这两种协议并不兼容，SSL 已经逐渐被 TLS 取代，所以下文就以 TLS 指代安全层;</p><h2 id="SSL-TLS-握手"><a href="#SSL-TLS-握手" class="headerlink" title="SSL/TLS 握手"></a>SSL/TLS 握手</h2><p>TLS 握手是启动 HTTPS 通信的过程，类似于 TCP 建立连接时的三次握手。 在 TLS 握手的过程中，通信双方交换消息以相互验证，相互确认，并确立它们所要使用的加密算法以及会话密钥 (用于对称加密的密钥)。可以说，TLS 握手是 HTTPS 通信的基础部分。</p><p>TLS 握手过程, 总共做了四件事:</p><ol><li> 商定双方通信所使用的 TLS 版本, 例如: TLS1.0, 1.2, 1.3等</li><li> 确定双方所要使用的密码组合;</li><li> 客户端通过服务器的公钥和数字证书上的数字签名验证服务端的身份;</li><li> 生成会话密钥, 并将密钥用于握手结束后的对称加密;</li></ol><p>详细过程:</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-04-09-051254.jpg" alt="未命名图片 (1)"></p><ol><li>“client hello” 消息: 客户端通过发送 “client hello” 消息向服务器发起握手请求, 该消息包含了:<ol><li> 客户端所支持的 TLS 版本和密码组合, 以供服务器进行选择</li><li> client random 随机字符串</li></ol></li><li>“server hello” 消息: 服务器发送 “server hello” 消息对客户端进行回应, 该消息包含了:<ol><li> 数字证书, 服务器选择的密码组合 </li><li> server random 随机字符串</li></ol></li><li>验证: 客户端对服务器发来的证书进行验证, 确保对方身份的合法性; 验证步骤为:<ol><li> 检查数字签名</li><li> 验证证书链</li><li> 检查证书的有效期</li><li> 检查证书撤回状态</li></ol></li><li> “premaster secret” 字符串: 客户端向服务器发送另一个随机字符串 “premaster secret” (预主密码), 这个字符串是经过服务器的公钥加密过的, 只有对应的私钥才能解密</li><li> 服务器使用私钥解密客户端发过来的加密的 “premaster secret”</li><li> 生成共享密钥: 经过上述步骤之后, 客户端和服务器都拥有了相同的 <strong>client random</strong>, <strong>server random</strong> 和 <strong>premaster secret</strong>, 并通过相同的算法生成相同的共享密钥 Key;</li><li> 客户端就绪: 客户端发送经过共享密钥 Key 加密后的 Finished 信号</li><li> 服务器就绪: 服务器发送经过共享密钥 Key 加密后的 Finished 信号</li><li> 达成安全通信: 握手完成, 双方使用对称加密进行安全通信</li></ol><h1 id="Https-中间人抓包"><a href="#Https-中间人抓包" class="headerlink" title="Https 中间人抓包"></a>Https 中间人抓包</h1><h2 id="高版本安卓系统如何导入证书"><a href="#高版本安卓系统如何导入证书" class="headerlink" title="高版本安卓系统如何导入证书"></a>高版本安卓系统如何导入证书</h2><ol><li><p><a href="https://github.com/Magisk-Modules-Repo/movecert">magisk - Move Certificates 模块</a></p></li><li><p>Aosp 直接将证书编译到系统中 <a href="https://www.52pojie.cn/thread-1382688-1-1.html">参考链接</a></p></li><li><p><a href="http://zhaoxincheng.com/index.php/2020/07/16/%E5%AE%89%E5%8D%937-0%E5%8F%8A%E4%BB%A5%E4%B8%8A%E6%8A%93%E5%8C%85%E8%AF%81%E4%B9%A6%E5%B0%8F%E6%8A%80%E5%B7%A7/">re 管理器</a></p></li><li><p>命令行</p><p>charles导出.cer证书，选择.cer类型 保存在pc上</p><ol><li>修改证书名称<br>系统证书目录：/system/etc/security/cacerts/<br>其中的每个证书的命名规则如下：<br><Certificate_Hash>.<br>文件名是一个Hash值，而后缀是一个数字。<br>文件名可以用下面的命令计算出来：<br>openssl x509 -subject_hash_old -in <Certificate_File><br>后缀名的数字是为了防止文件名冲突的，比如如果两个证书算出的Hash值是一样的话，那么一个证书的后缀名数字可以设置成0，而另一个证书的后缀名数字可以设置成1</li><li>复制证书到设备上<br>adb push xxxxxxx.0 /sdcard/</li><li>复制到系统目录并修改权限（安卓8.1.0 Magisk Root）<br>mount -o rw,remount /system 【不修改 没法写入】<br>mount -o rw,remount /<br>mv /sdcard/xxxxxxx.0 /etc/security/cacerts/ 移动文件到系统<br>chown root:root /etc/security/cacerts/fc365f9d.0 修改用户组<br>chmod 644 /system/etc/security/cacerts/xxxxxxx.0 修改权限</li></ol></li></ol><h2 id="抓包失败常见问题"><a href="#抓包失败常见问题" class="headerlink" title="抓包失败常见问题"></a>抓包失败常见问题</h2><ol><li>单向证书校验中 (C 校验 S), 没有将抓包工具证书放在手机中 <code>400 Bad Request</code></li><li>双向证书检验中 (S 校验 C), 没有向抓包工具配置 App 证书 <code>No required SSL certificate was sent</code></li><li>SSL PINNING 配置好了证书依然无法抓包</li></ol><h2 id="证书验证"><a href="#证书验证" class="headerlink" title="证书验证"></a>证书验证</h2><h3 id="什么是单向证书验证"><a href="#什么是单向证书验证" class="headerlink" title="什么是单向证书验证"></a>什么是单向证书验证</h3><p>单向认证流程中, 服务器端保存着公钥证书和私钥两个文件, 流程如下:<br><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-03-03-050703.jpg" alt="img"></p><ol><li>客户端发起建立 Https 连接请求, 将 SSL 协议版本的信息发送给服务器端;</li><li>服务器端将本机的公钥证书发送给客户端;</li><li>客户端读取公钥证书, 取出服务端公钥;</li><li>客户端生成一个随机数(秘钥 R), 用刚才得到的服务器公钥去加密这个随机数形成密文, 发送给服务端;</li><li>服务端用自己的私钥去解密密文, 得到秘钥 R;</li><li>服务端和客户端在之后的通讯中就使用秘钥 R 进行通信;</li></ol><h3 id="什么是双向证书验证"><a href="#什么是双向证书验证" class="headerlink" title="什么是双向证书验证"></a>什么是双向证书验证</h3><p>双向认证, 客户端和服务器端都需要验证对方的身份, 在建立 Https 连接的过程中, 握手的流程比单向认证多了几步; 单向认证过程, 客户端从服务器端下载服务器端公钥证书进行验证, 然后建立安全通信通道; 双向验证中, 客服端除了需要从服务器端下载服务器的公钥证书进行验证之外, 还需要把客户端的公钥证书上传到服务器端给服务器端进行验证, 等双方都认证通过了, 才开始建立安全通信通道进行数据传输;</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-03-03-051308.jpg" alt="img"></p><ol><li>客户端发起建立 Https 连接请求, 将 SSL 协议版本的信息发送到服务器端;</li><li>服务器端将本机的公钥证书发送给客户端;</li><li>客户端读取公钥证书, 取出服务器公钥;</li><li>客户端将客户端的公钥证书发送给服务器端;</li><li>服务器端使用根证书解密客户端公钥证书, 拿到客户端公钥;</li><li>客户端发送自己支持的加密方案给服务器端;</li><li>服务器端根据自己和客户端支持的方法, 选择一个双方都能接收的加密方案, 使用客户端的公钥加密后发送给客户端;</li><li>客户端使用自己的私钥去解密密文, 得到秘钥 R;</li><li>服务器和客户端在后续通讯中使用秘钥 R 进行通信;</li></ol><h3 id="双向证书获取客户端证书和密码"><a href="#双向证书获取客户端证书和密码" class="headerlink" title="双向证书获取客户端证书和密码"></a>双向证书获取客户端证书和密码</h3><p>关键点:</p><ol><li>证书密码</li><li>cer 或者 p12 证书</li></ol><p>通杀方案:<br>通过 <code>r0ysue</code> 的 <a href="https://github.com/r0ysue/r0capture">r0capture</a> 进行 hook , 获取到证书;<br><code>python r0capture.py -U -f cn.soulapp.android -v &gt;&gt; soul3.txt</code><br><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-03-03-062429.jpg" alt="img"><br>导出后的证书位于/sdcard/Download/包名xxx.p12路径，导出多次，每一份均可用，密码默认为：r0ysue，推荐使用keystore-explorer打开查看证书</p><p>手动方案:<br>例如 <code>soul</code> apk, 采用了双向证书验证;<br>对 apk 进行解包, tree 找到 client.cer 和 client.p12;<br>在 jadx 中进行反编译, 直接搜索 <code>client.p12</code> 定位到对应的 <code>load</code> 方法<br><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-03-03-065415.jpg" alt="img"><br><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-03-03-065455.jpg" alt="img"><br>直接 hook 该方法就可以获取到证书的秘钥</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///&lt;reference path=&#x27;./index.d.ts&#x27;/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_password</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> KeyStore =  Java.use(<span class="string">&quot;java.security.KeyStore&quot;</span>);</span><br><span class="line">        KeyStore.load.overload(<span class="string">&#x27;java.io.InputStream&#x27;</span>, <span class="string">&#x27;[C&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">inputStream, password</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;password is&quot;</span>, <span class="built_in">JSON</span>.stringify(password));</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.load(inputStream, password);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(hook_password)</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#125;%2R+\OSsjpP!w%X</span></span><br></pre></td></tr></table></figure><h3 id="如何将客户端证书配置到抓包工具"><a href="#如何将客户端证书配置到抓包工具" class="headerlink" title="如何将客户端证书配置到抓包工具"></a>如何将客户端证书配置到抓包工具</h3><p>charles -&gt; Proxy -&gt; SSL Proxying Settings -&gt; Server Certificates -&gt; Import P12 or PEM -&gt; 输入密码<br><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-03-03-065807.jpg" alt="img"></p><h3 id="requests-指定证书请求"><a href="#requests-指定证书请求" class="headerlink" title="requests 指定证书请求"></a>requests 指定证书请求</h3><p>安装 : <code>pip install requests_pkcs12</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests_pkcs12 <span class="keyword">import</span> get</span><br><span class="line"></span><br><span class="line">r = get(<span class="string">&#x27;https://example.com/test&#x27;</span>, pkcs12_filename=<span class="string">&#x27;clientcert.p12&#x27;</span>, pkcs12_password=<span class="string">&#x27;correcthorsebatterystaple&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="代理检测"><a href="#代理检测" class="headerlink" title="代理检测"></a>代理检测</h2><h3 id="代理检测原理"><a href="#代理检测原理" class="headerlink" title="代理检测原理"></a>代理检测原理</h3><p>检测用户是否使用了代理进行请求, 如果使用了代理, 那么很可能是中间人攻击, 强制中断请求;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 判断设备 是否使用代理上网</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isWifiProxy</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> IS_ICS_OR_LATER = Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.ICE_CREAM_SANDWICH;</span><br><span class="line">        String proxyAddress; </span><br><span class="line">        <span class="keyword">int</span> proxyPort; </span><br><span class="line">        <span class="keyword">if</span> (IS_ICS_OR_LATER) &#123; </span><br><span class="line">            proxyAddress = System.getProperty(<span class="string">&quot;http.proxyHost&quot;</span>); </span><br><span class="line">            String portStr = System.getProperty(<span class="string">&quot;http.proxyPort&quot;</span>); </span><br><span class="line">            proxyPort = Integer.parseInt((portStr != <span class="keyword">null</span> ? portStr : <span class="string">&quot;-1&quot;</span>)); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            proxyAddress = android.net.Proxy.getHost(context); </span><br><span class="line">            proxyPort = android.net.Proxy.getPort(context); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> (!TextUtils.isEmpty(proxyAddress)) &amp;&amp; (proxyPort != -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="VPN-抓包"><a href="#VPN-抓包" class="headerlink" title="VPN 抓包"></a>VPN 抓包</h2><p>常用的抓包软件都是通过 <code>wifi</code> 设置 <code>http</code> 代理的方式进行抓包, 只是在应用层进行抓包, 很容易被检测和绕过;</p><p>使用以下 <code>api</code> 可以快速检测是否使用了 <code>http</code> 代理, 导致抓包失效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.getProperty(&quot;http.proxyHost&quot;)&#96;</span><br><span class="line">&#96;System.getProperty(&quot;http.proxyPort&quot;)</span><br></pre></td></tr></table></figure><p><code>VPN</code> 抓包属于网络层, 开启 <code>VPN</code> 之后会在手机上新增一个虚拟网卡, 所有的流量都会从这个网卡上经过, 而且可以逃过上述两个 <code>api</code> 的检测;</p><h3 id="VPN-检测和绕过"><a href="#VPN-检测和绕过" class="headerlink" title="VPN 检测和绕过"></a>VPN 检测和绕过</h3><ol><li><code>java.net.NetworkInterface.getName()</code><br>该方法通过检测返回结果是否为 <code>tun0</code> 或 <code>ppp0</code> 来判断是否使用了 <code>vpn</code> ; <code>bypass</code> 的方法也比较简单, <code>hook</code> 这个方法, 然后返回 <code>&quot;rmnet_data1&quot;</code> 即可;</li><li><code>android.net.ConnectivityManager.getNetworkCapabilities()</code><br>该方法的返回值为 <code>null</code> 即可不被检测</li></ol><h2 id="SSL-Pinning"><a href="#SSL-Pinning" class="headerlink" title="SSL Pinning"></a>SSL Pinning</h2><h3 id="什么是-SSL-Pinning"><a href="#什么是-SSL-Pinning" class="headerlink" title="什么是 SSL Pinning"></a>什么是 SSL Pinning</h3><ul><li>SSL Pinning 是一种防止中间人攻击的技术, 主要机制是: 客户端发起请求 -&gt; 收到服务器发来的证书进行校验 -&gt; 如果收到的证书不被客户端信任, 那么就直接断开请求;</li><li>客户端预置了一份服务端的证书, 防止中间人攻击时被中间人伪造的服务端证书欺骗;</li><li>使用了 SSL pinning 技术的 App, 只信任指定的证书, 就算将自签名证书按照到系统目录中, App 也不会信任; 以此来对抗中间人攻击;</li></ul><ol><li>证书固定: 开发者将 SSL 证书的某些字节码硬编码在应用程序中; 当应用程序与服务器通信时, 它将检查证书中是否存在相同的字节码; 如果存在, 则应用程序将请求发送到服务器; 如果字节码不匹配, 它将抛出 SSL 证书错误; 这样可以防止攻击者使用自己的自签名证书;</li><li>公钥固定: 在客户端访问网站进行公钥固定中, 服务器将其公钥固定在客户端中, 当客户端重新访问同一个网站时, 服务器将标识其公共秘钥以检测连接的完整性;</li></ol><h3 id="双向验证和-SSL-Pinning-的区别"><a href="#双向验证和-SSL-Pinning-的区别" class="headerlink" title="双向验证和 SSL Pinning 的区别"></a>双向验证和 SSL Pinning 的区别</h3><ul><li>SSL Pinning 是客户端锁定服务器的证书, 在要与服务器进行交互的时候, 服务器端会将证书发送给客户端, 客户端调用函数对服务器端发来的证书进行校验, 与本地存放的的证书(一般存放在/asset 或/res/raw)进行对比;</li><li>双向证书认证是添加了客户端向服务器发送证书, 服务器对客户端的证书进行校验的部分;</li></ul><h3 id="如何定位-绕过已知通信框架的证书绑定"><a href="#如何定位-绕过已知通信框架的证书绑定" class="headerlink" title="如何定位/绕过已知通信框架的证书绑定"></a>如何定位/绕过已知通信框架的证书绑定</h3><ol><li>常见的 http 框架, 可以使用 <a href="https://github.com/sensepost/objection/blob/90044d7323ba6a302030cb9e02d90468036ae4b4/agent/src/android/pinning.ts">objection</a> 进行 hook : <code>android sslpinning disable</code><ul><li>Traditional HttpsURLConnection</li><li>OkHTTP</li><li>Retrofit (Wraps OkHTTP)</li><li>Volley (Uses a TrustManager)</li><li>Picasso (Uses a TrustManager)</li></ul></li><li><code>objection</code> 未覆盖的可以使用 <a href="https://github.com/WooyunDota/DroidSSLUnpinning/blob/master/ObjectionUnpinningPlus/hooks.js">ObjectionUnpinningPlus</a> 进行<ul><li>SSLcontext(ART only)</li><li>okhttp</li><li>webview</li><li>XUtils(ART only)</li><li>httpclientandroidlib</li><li>JSSE</li><li>network_security_config (android 7.0+)</li><li>Apache Http client (support partly)</li><li>OpenSSLSocketImpl</li><li>TrustKit</li><li>Cronet</li></ul></li><li><a href="https://github.com/r0ysue/r0capture">r0capture</a> 应用层抓包通杀<ul><li>spawn 模式: <code>python3 r0capture.py -U -f com.qiyi.video -v</code></li><li>attach 模式: <code>python3 r0capture.py -U com.qiyi.video -v</code></li><li><code>-p fileName.pcap</code> : 抓包并保存为 pcap 文件, 后续使用 Wireshark 进行分析</li><li><code>&gt;&gt; fileName.txt</code>: 将抓包内容重定向到指定文本中, 方便过滤</li><li>客户端证书导出功能, 默认开启, 需要用 spawn 模式运行, 需要手动给 app 添加存储卡读取权限;导出后的证书位于/sdcard/Download/包名xxx.p12路径, 密码默认<code>r0ysue</code>;</li><li><code>-H</code>，用于Frida-server监听在非标准端口时的连接</li></ul></li></ol><h3 id="如何定位-绕过未知框架的证书绑定"><a href="#如何定位-绕过未知框架的证书绑定" class="headerlink" title="如何定位/绕过未知框架的证书绑定"></a>如何定位/绕过未知框架的证书绑定</h3><ol><li>Hook Java 的 File 类构造函数, 证书肯定要被读取到内存中, 找到证书路径;</li><li>检测客户端证书的读取</li><li>打印调用栈, 定位到证书绑定代码</li></ol><h1 id="大众点评通用抓包"><a href="#大众点评通用抓包" class="headerlink" title="大众点评通用抓包"></a>大众点评通用抓包</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cls = Java.use(<span class="string">&quot;com.dianping.nvnetwork.tunnel2.a&quot;</span>);</span><br><span class="line">    cls.isSocketConnected.overload().implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="淘系抓包"><a href="#淘系抓包" class="headerlink" title="淘系抓包"></a>淘系抓包</h1><p>使用Charles、Fiddle等抓包工具对淘系App进行抓包时，你会发现总是抓不到包，出现请求不走Charles代理的情况。这是因为淘系app底层网络通信的协议并不是普通的http协议，而是自己实现的一套私有协议Spdy。</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2020-12-22-062221.jpg" alt="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2020-12-22-062221.jpg"></p><p>所以我们只要通过hook将是否使用spdy返回false既可;</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> SwitchConfig = Java.use(<span class="string">&#x27;mtopsdk.mtop.global.SwitchConfig&#x27;</span>);</span><br><span class="line">    SwitchConfig.nQ.overload().implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="美团外卖抓包"><a href="#美团外卖抓包" class="headerlink" title="美团外卖抓包"></a>美团外卖抓包</h1><p><a href="https://zckun.github.io/2019/09/13/python-mtwm-capture/">https://zckun.github.io/2019/09/13/python-mtwm-capture/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptable -A INPUT -s ***.**.***.181 -j DROP #屏蔽&#96;</span><br><span class="line">&#96;iptable -D INPUT -s ***.**.***.181 -j DROP #解除屏蔽&#96;</span><br><span class="line">&#96;service iptables save</span><br></pre></td></tr></table></figure><h1 id="r0capture-抓包分析"><a href="#r0capture-抓包分析" class="headerlink" title="r0capture 抓包分析"></a>r0capture 抓包分析</h1><h2 id="Hook-抓取-Http-包"><a href="#Hook-抓取-Http-包" class="headerlink" title="Hook 抓取 Http 包"></a>Hook 抓取 Http 包</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h3 id="hook-点"><a href="#hook-点" class="headerlink" title="hook 点"></a>hook 点</h3><h3 id="frida-参考-r0capture"><a href="#frida-参考-r0capture" class="headerlink" title="frida (参考 r0capture)"></a>frida (参考 r0capture)</h3><h2 id="Hook-抓取-Https-包"><a href="#Hook-抓取-Https-包" class="headerlink" title="Hook 抓取 Https 包"></a>Hook 抓取 Https 包</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><h3 id="Hook-点-如何确定-SSL-库的关键-API"><a href="#Hook-点-如何确定-SSL-库的关键-API" class="headerlink" title="Hook 点 (如何确定 SSL 库的关键 API)"></a>Hook 点 (如何确定 SSL 库的关键 API)</h3><h3 id="协议使用了系统中的-SSL-类库"><a href="#协议使用了系统中的-SSL-类库" class="headerlink" title="协议使用了系统中的 SSL 类库"></a>协议使用了系统中的 SSL 类库</h3><h4 id="java"><a href="#java" class="headerlink" title="java"></a>java</h4><h4 id="native"><a href="#native" class="headerlink" title="native"></a>native</h4><h3 id="协议使用了自我集成的-SSL-类库"><a href="#协议使用了自我集成的-SSL-类库" class="headerlink" title="协议使用了自我集成的 SSL 类库"></a>协议使用了自我集成的 SSL 类库</h3><h4 id="java-1"><a href="#java-1" class="headerlink" title="java"></a>java</h4>]]></content>
      
      
      <categories>
          
          <category> frida </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
            <tag> 抓包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frida hook so</title>
      <link href="fridahookso/"/>
      <url>fridahookso/</url>
      
        <content type="html"><![CDATA[<h1 id="frida-env"><a href="#frida-env" class="headerlink" title="frida env"></a>frida env</h1><p><a href="https://github.com/frida/frida-java-bridge/blob/master/lib/env.js">https://github.com/frida/frida-java-bridge/blob/master/lib/env.js</a></p><h1 id="IDA-判断-Thumb-指令集和-Arm-指令集"><a href="#IDA-判断-Thumb-指令集和-Arm-指令集" class="headerlink" title="IDA 判断 Thumb 指令集和 Arm 指令集"></a>IDA 判断 Thumb 指令集和 Arm 指令集</h1><ul><li>IDA - Options - General - number of opcode bytes - 设置为 4</li><li>此时查看 IDA VIew 中 opcode 的长度, 如果出现 2 个字节和 4 个字节的, 说明为 thumb 指令集</li><li>如果都是 4 个字节的, 说明是 arm 指令集;</li><li>在 Thumb 指令集下, inline hook 的偏移地址需要进行 +1 操作;</li></ul><h1 id="枚举内存中的-so-文件"><a href="#枚举内存中的-so-文件" class="headerlink" title="枚举内存中的 so 文件"></a>枚举内存中的 so 文件</h1><p>用于查看目标 module 是否被正常加载, 使用 <code>Process.enumerateModules()</code> 将当前加载的所有 so 文件打印出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_native</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> modules = Process.enumerateModules();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> modules)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">module</span> = modules[i];</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">module</span>.name);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">module</span>.name.indexOf(<span class="string">&quot;target.so&quot;</span>) &gt; -<span class="number">1</span> )&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">module</span>.base);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取指定-so-文件的基地址"><a href="#获取指定-so-文件的基地址" class="headerlink" title="获取指定 so 文件的基地址"></a>获取指定 so 文件的基地址</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_module</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> baseAddr = Module.findBaseAddress(<span class="string">&quot;libnative-lib.so&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;baseAddr&quot;</span>, baseAddr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取指定-so-文件的函数"><a href="#获取指定-so-文件的函数" class="headerlink" title="获取指定 so 文件的函数"></a>获取指定 so 文件的函数</h1><h2 id="通过导出函数名定位-native-方法"><a href="#通过导出函数名定位-native-方法" class="headerlink" title="通过导出函数名定位 native 方法"></a>通过导出函数名定位 native 方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_func_from_exports</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> add_c_addr = Module.findExportByName(<span class="string">&quot;libnative-lib.so&quot;</span>, <span class="string">&quot;add_c&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;add_c_addr is :&quot;</span>,add_c_addr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过-symbols-符号定位-native-方法"><a href="#通过-symbols-符号定位-native-方法" class="headerlink" title="通过 symbols 符号定位 native 方法"></a>通过 symbols 符号定位 native 方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find_func_from_symbols</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> NewStringUTF_addr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> symbols = Process.findModuleByName(<span class="string">&quot;libart.so&quot;</span>).enumerateSymbols();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> symbols) &#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[i];</span><br><span class="line">        <span class="keyword">if</span> (symbol.name.indexOf(<span class="string">&quot;art&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">            symbol.name.indexOf(<span class="string">&quot;JNI&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">            symbol.name.indexOf(<span class="string">&quot;CheckJNI&quot;</span>) &lt; <span class="number">0</span></span><br><span class="line">        )&#123;</span><br><span class="line">            <span class="keyword">if</span> (symbol.name.indexOf(<span class="string">&quot;NewStringUTF&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;find target symbols&quot;</span>, symbol.name, <span class="string">&quot;address is &quot;</span>, symbol.address);</span><br><span class="line">                NewStringUTF_addr = symbol.address;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;NewStringUTF_addr is &quot;</span>, NewStringUTF_addr);</span><br><span class="line"></span><br><span class="line">    Interceptor.attach(NewStringUTF_addr, &#123;</span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;args0&quot;</span>,args[<span class="number">0</span>])</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;args0&quot;</span>, args[<span class="number">0</span>], hexdump(args[<span class="number">0</span>]));</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;args1&quot;</span>, args[<span class="number">1</span>], hexdump(args[<span class="number">1</span>]));</span><br><span class="line">            <span class="keyword">var</span> env = Java.vm.tryGetEnv();</span><br><span class="line">            <span class="keyword">if</span> (env != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 直接读取 c 里面的 char</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;Memory readCstring is :&quot;</span>, Memory.readCString(args[<span class="number">1</span>]));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;get env error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span> (<span class="params">returnResult</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;result: &quot;</span>, Java.cast(returnResult, Java.use(<span class="string">&quot;java.lang.String&quot;</span>)));</span><br><span class="line">            <span class="keyword">var</span> env = Java.vm.tryGetEnv();</span><br><span class="line">            <span class="keyword">if</span> (env != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> jstring = env.newStringUtf(<span class="string">&quot;修改返回值&quot;</span>);</span><br><span class="line">                returnResult.replace(ptr(jstring));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过地址偏移-inline-hook-任意函数"><a href="#通过地址偏移-inline-hook-任意函数" class="headerlink" title="通过地址偏移 inline-hook 任意函数"></a>通过地址偏移 inline-hook 任意函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// get base address of target so;</span></span><br><span class="line">    <span class="keyword">var</span> libnative_lib_addr = Module.findBaseAddress(<span class="string">&quot;libnative-lib.so&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;base module addr -&gt;&quot;</span>, libnative_lib_addr);</span><br><span class="line">    <span class="keyword">if</span> (libnative_lib_addr)&#123;</span><br><span class="line">        <span class="keyword">var</span> add_addr1 = Module.findExportByName(<span class="string">&quot;libnative-lib.so&quot;</span>, <span class="string">&quot;_Z5r0addii&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> add_addr2 = libnative_lib_addr.add(<span class="number">0x94B2</span> + <span class="number">1</span>); <span class="comment">// 32位需要加1</span></span><br><span class="line">        <span class="built_in">console</span>.log(add_addr1);</span><br><span class="line">        <span class="built_in">console</span>.log(add_addr2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主动调用</span></span><br><span class="line">    <span class="keyword">var</span> add1 = <span class="keyword">new</span> NativeFunction(add_addr1, <span class="string">&quot;int&quot;</span>, [<span class="string">&quot;int&quot;</span>, <span class="string">&quot;int&quot;</span>]);</span><br><span class="line">    <span class="keyword">var</span> add2 = <span class="keyword">new</span> NativeFunction(add_addr2, <span class="string">&quot;int&quot;</span>, [<span class="string">&quot;int&quot;</span>, <span class="string">&quot;int&quot;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;add1 result is -&gt;&quot;</span> + add1(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;add2 result is -&gt;&quot;</span> + add2(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">base module addr -&gt; 0xd430b000</span></span><br><span class="line"><span class="comment">0xd43144b3</span></span><br><span class="line"><span class="comment">0xd43144b3</span></span><br><span class="line"><span class="comment">add1 result is -&gt;30</span></span><br><span class="line"><span class="comment">add2 result is -&gt;30</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="通过-Intercept-拦截器打印-native-方法参数和返回值-并修改返回值"><a href="#通过-Intercept-拦截器打印-native-方法参数和返回值-并修改返回值" class="headerlink" title="通过 Intercept 拦截器打印 native 方法参数和返回值, 并修改返回值"></a>通过 Intercept 拦截器打印 native 方法参数和返回值, 并修改返回值</h1><ul><li><code>onEnter</code>: 函数(args) : 回调函数, 给定一个参数 args, 用于读取或者写入参数作为 <code>NativePointer</code> 对象的指针;</li><li><code>onLeave</code>: 函数(retval) : 回调函数给定一个参数 retval, 该参数是包含原始返回值的 NativePointer 派生对象; 可以调用 <code>retval.replace(1234)</code> 以整数 1234 替换返回值, 或者调用<code>retval.replace(ptr(&quot;0x1234&quot;))</code> 以替换为指针;</li><li>注意: <code>retval</code> 对象会在 <code>onLeave</code> 调用中回收, 因此不要将其存储在回调之外使用, 如果需要存储包含的值, 需要制作深拷贝, 如 <code>ptr(retval.toString())</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find_func_from_exports</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> add_c_addr = Module.findExportByName(<span class="string">&quot;libnative-lib.so&quot;</span>, <span class="string">&quot;add_c&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;add_c_addr is :&quot;</span>,add_c_addr);</span><br><span class="line">    <span class="comment">// 添加拦截器</span></span><br><span class="line">    Interceptor.attach(add_c_addr,&#123;</span><br><span class="line">        <span class="comment">// 打印入参</span></span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;add_c called&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;arg1:&quot;</span>,args[<span class="number">0</span>].toInt32());</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;arg2&quot;</span>, args[<span class="number">1</span>].toInt32());</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 打印返回值</span></span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span> (<span class="params">returnValue</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;add_c result is :&quot;</span>, returnValue.toInt32());</span><br><span class="line">            <span class="comment">// 修改返回值</span></span><br><span class="line">            returnValue.replace(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="通过-Intercept-拦截器替换原方法"><a href="#通过-Intercept-拦截器替换原方法" class="headerlink" title="通过 Intercept 拦截器替换原方法"></a>通过 Intercept 拦截器替换原方法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">frida_Interceptor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="comment">//这个c_getSum方法有两个int参数、返回结果为两个参数相加</span></span><br><span class="line">       <span class="comment">//这里用NativeFunction函数自己定义了一个c_getSum函数</span></span><br><span class="line">       <span class="keyword">var</span> add_method = <span class="keyword">new</span> NativeFunction(Module.findExportByName(<span class="string">&#x27;libhello.so&#x27;</span>, <span class="string">&#x27;c_getSum&#x27;</span>), </span><br><span class="line">       <span class="string">&#x27;int&#x27;</span>,[<span class="string">&#x27;int&#x27;</span>,<span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line">       <span class="comment">//输出结果 那结果肯定就是 3</span></span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&quot;result:&quot;</span>,add_method(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">       <span class="comment">//这里对原函数的功能进行替换实现</span></span><br><span class="line">       Interceptor.replace(add_method, <span class="keyword">new</span> NativeCallback(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">           <span class="comment">//h不论是什么参数都返回123</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">       &#125;, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]));</span><br><span class="line">       <span class="comment">//再次调用 则返回123</span></span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&quot;result:&quot;</span>,add_method(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="so-层方法注册到-js-中-主动调用"><a href="#so-层方法注册到-js-中-主动调用" class="headerlink" title="so 层方法注册到 js 中, 主动调用"></a>so 层方法注册到 js 中, 主动调用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new NativeFunction(address, returnType, argTypes[, options])</span><br></pre></td></tr></table></figure><ul><li><code>address</code> : 函数地址</li><li><code>returnType</code> : 指定返回类型</li><li><code>argTypes</code> : 数组指定参数类型</li><li>类型可选: void, pointer, int, uint, long, ulong, char, uchar, float, double, int8, uint8, int16, int32, uint32, int64, uint64; 参照函数所需的 type 来定义即可;</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invoke_native_func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> baseAddr = Module.findBaseAddress(<span class="string">&quot;libnative-lib.so&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;baseAddr&quot;</span>, baseAddr);</span><br><span class="line">    <span class="keyword">var</span> offset = <span class="number">0x0000A28C</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> add_c_addr = baseAddr.add(offset);</span><br><span class="line">    <span class="keyword">var</span> add_c_func = <span class="keyword">new</span> NativeFunction(add_c_addr, <span class="string">&quot;int&quot;</span>, [<span class="string">&quot;int&quot;</span>,<span class="string">&quot;int&quot;</span>]);</span><br><span class="line">    <span class="keyword">var</span> result = add_c_func(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取 so 文件基地址</span></span><br><span class="line">    <span class="keyword">var</span> base = Module.findBaseAddress(<span class="string">&quot;libnative-lib.so&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取目标函数偏移</span></span><br><span class="line">    <span class="keyword">var</span> sub_834_addr = base.add(<span class="number">0x835</span>) <span class="comment">// thumb 需要 +1</span></span><br><span class="line">    <span class="comment">// 使用 new NativeFunction 将函数注册到 js</span></span><br><span class="line">    <span class="keyword">var</span> sub_834 = <span class="keyword">new</span> NativeFunction(sub_834_addr, <span class="string">&#x27;pointer&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>]);</span><br><span class="line">    <span class="comment">// 开辟内存, 创建入参</span></span><br><span class="line">    <span class="keyword">var</span> arg0 = Memory.alloc(<span class="number">10</span>);</span><br><span class="line">    ptr(arg0).writeUtf8String(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> result = sub_834(arg0);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;result is :&quot;</span>, hexdump(result));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="hook-libart-中的-jni-方法"><a href="#hook-libart-中的-jni-方法" class="headerlink" title="hook libart 中的 jni 方法"></a>hook libart 中的 jni 方法</h1><p><code>jni</code> 全部定在在 <code>/system/lib(64)/libart.so</code> 文件中, 通过枚举 <code>symbols</code> 筛选出指定的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_libart</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> GetStringUTFChars_addr = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// jni 系统函数都在 libart.so 中</span></span><br><span class="line">    <span class="keyword">var</span> module_libart = Process.findModuleByName(<span class="string">&quot;libart.so&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> symbols = module_libart.enumerateSymbols();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; symbols.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> name = symbols[i].name;</span><br><span class="line">        <span class="keyword">if</span> ((name.indexOf(<span class="string">&quot;JNI&quot;</span>) &gt;= <span class="number">0</span>) </span><br><span class="line">&amp;&amp; (name.indexOf(<span class="string">&quot;CheckJNI&quot;</span>) == -<span class="number">1</span>) </span><br><span class="line">&amp;&amp; (name.indexOf(<span class="string">&quot;art&quot;</span>) &gt;= <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (name.indexOf(<span class="string">&quot;GetStringUTFChars&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(name);</span><br><span class="line">                <span class="comment">// 获取到指定 jni 方法地址</span></span><br><span class="line">                GetStringUTFChars_addr = symbols[i].address;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Interceptor.attach(GetStringUTFChars_addr, &#123;</span><br><span class="line">            onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line">                <span class="comment">// console.log(&quot;args[0] is : &quot;, args[0]);</span></span><br><span class="line">                <span class="comment">// console.log(&quot;args[1] is : &quot;, args[1]);</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;native args[1] is :&quot;</span>,Java.vm.getEnv().getStringUtfChars(args[<span class="number">1</span>],<span class="literal">null</span>).readCString());</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;GetStringUTFChars onEnter called from:\n&#x27;</span> +</span><br><span class="line">                    Thread.backtrace(<span class="built_in">this</span>.context, Backtracer.FUZZY)</span><br><span class="line">                    .map(DebugSymbol.fromAddress).join(<span class="string">&#x27;\n&#x27;</span>) + <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">                <span class="comment">// console.log(&quot;native args[1] is :&quot;, Java.cast(args[1], Java.use(&quot;java.lang.String&quot;)));</span></span><br><span class="line">                <span class="comment">// console.log(&quot;native args[1] is :&quot;, Memory.readCString(Java.vm.getEnv().getStringUtfChars(args[1],null)));</span></span><br><span class="line">            &#125;, <span class="attr">onLeave</span>: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>)</span>&#123;</span><br><span class="line">                <span class="comment">// retval const char*</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;GetStringUTFChars onLeave : &quot;</span>, ptr(retval).readCString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="hook-libc-中的系统方法"><a href="#hook-libc-中的系统方法" class="headerlink" title="hook libc 中的系统方法"></a>hook libc 中的系统方法</h1><p><code>/system/lib(64)/libc.so</code> 导出的符号没有进行 <code>namemanline</code> , 直接过滤筛选即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hook libc.so</span></span><br><span class="line"><span class="keyword">var</span> pthread_create_addr = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(JSON.stringify(Process.enumerateModules())); </span></span><br><span class="line"><span class="comment">// Process.enumerateModules() 枚举加载的so文件</span></span><br><span class="line"><span class="keyword">var</span> symbols = Process.findModuleByName(<span class="string">&quot;libc.so&quot;</span>).enumerateSymbols();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; symbols.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (symbols[i].name === <span class="string">&quot;pthread_create&quot;</span>)&#123;</span><br><span class="line">        <span class="comment">// console.log(&quot;symbols name is -&gt; &quot; + symbols[i].name);</span></span><br><span class="line">        <span class="comment">// console.log(&quot;symbols address is -&gt; &quot; + symbols[i].address);</span></span><br><span class="line">        pthread_create_addr = symbols[i].address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Interceptor.attach(pthread_create_addr,&#123;</span><br><span class="line">    onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;args is -&gt;&quot;</span> + args[<span class="number">0</span>], args[<span class="number">1</span>], args[<span class="number">2</span>],args[<span class="number">3</span>]);</span><br><span class="line">    &#125;,</span><br><span class="line">    onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(retval);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>libc.so</code> 中方法替换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hook 检测frida 的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// var exports = Process.findModuleByName(&quot;libnative-lib.so&quot;).enumerateExports(); 导出</span></span><br><span class="line">    <span class="comment">// var imports = Process.findModuleByName(&quot;libnative-lib.so&quot;).enumerateImports(); 导入</span></span><br><span class="line">    <span class="comment">// var symbols = Process.findModuleByName(&quot;libnative-lib.so&quot;).enumerateSymbols(); 符号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> pthread_create_addr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> symbols = Process.getModuleByName(<span class="string">&quot;libc.so&quot;</span>).enumerateSymbols();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; symbols.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[i];</span><br><span class="line">        <span class="keyword">if</span> (symbol.name === <span class="string">&quot;pthread_create&quot;</span>) &#123;</span><br><span class="line">            pthread_create_addr = symbol.address;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;pthread_create name is -&gt;&quot;</span>, symbol.name);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;pthread_create address is -&gt;&quot;</span>, pthread_create_addr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 定义方法 之后主动调用的时候使用</span></span><br><span class="line">        <span class="keyword">var</span> pthread_create = <span class="keyword">new</span> NativeFunction(pthread_create_addr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>,<span class="string">&#x27;pointer&#x27;</span>,<span class="string">&#x27;pointer&#x27;</span>])</span><br><span class="line">        Interceptor.replace(pthread_create_addr,<span class="keyword">new</span> NativeCallback(<span class="function"><span class="keyword">function</span> (<span class="params">a0, a1, a2, a3</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">var</span> detect_frida_loop = Module.findExportByName(<span class="string">&quot;libnative-lib.so&quot;</span>, <span class="string">&quot;_Z17detect_frida_loopPv&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;a0,a1,a2,a3 -&gt;&quot;</span>,a0,a1,a2,a3);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">String</span>(a2) === <span class="built_in">String</span>(detect_frida_loop)) &#123;</span><br><span class="line">                result = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;阻止frida反调试启动&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result = pthread_create(a0,a1,a2,a3);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;正常启动&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>,<span class="string">&#x27;pointer&#x27;</span>,<span class="string">&#x27;pointer&#x27;</span>]));</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="hook-native-调用栈"><a href="#hook-native-调用栈" class="headerlink" title="hook native 调用栈"></a>hook native 调用栈</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Interceptor.attach(f, &#123;</span><br><span class="line">  onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;RegisterNatives called from:\n&#x27;</span> +</span><br><span class="line">        Thread.backtrace(<span class="built_in">this</span>.context, Backtracer.ACCURATE)</span><br><span class="line">        .map(DebugSymbol.fromAddress).join(<span class="string">&#x27;\n&#x27;</span>) + <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="jnitrace"><a href="#jnitrace" class="headerlink" title="jnitrace"></a>jnitrace</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>jnitrace</code>: <a href="https://github.com/chame1eon/jnitrace">https://github.com/chame1eon/jnitrace</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python&#96; : &#96;pip install jnitrace</span><br></pre></td></tr></table></figure><h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><p><code>ndk</code> 开发是没有办法脱离 <code>[libc.so](http://libc.so)</code> 和 <code>[libart.so](http://libart.so)</code> 进行开发, 所以只要降维打击, 通过 <code>trace</code> 的方式就可以监控到 <code>so</code> 层</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2020-09-07-032605.jpg" alt="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2020-09-07-032605.jpg"></p><h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jnitrace [options] -l libname packagename</span><br></pre></td></tr></table></figure><p>例如: <code>jnitrace -l [libnative-lib.so](http://libnative-lib.so) com.example.myapplication</code></p><h3 id="必要参数"><a href="#必要参数" class="headerlink" title="必要参数"></a><strong>必要参数</strong></h3><ul><li><code>-l libname</code> : 指定要<code>trace</code>的<code>.so</code>文件, 可以同时<code>trace</code>多个<code>.so</code>文件, 直接使用 <code>*</code>来<code>trace</code>所有的<code>.so</code>文件; 如: <code>-l libnative-lib.so -l libanother-lib.so</code> or <code>-l *</code></li><li><code>packagename</code> : 指定要<code>trace</code>的<code>package name</code></li></ul><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a><strong>可选参数</strong></h3><ul><li><code>-m</code>: 指定是<code>spawn</code>还是<code>attach</code></li><li><code>-b</code>: 指定是<code>fuzzy</code>还是<code>accurate</code></li><li><code>-i &lt;regex&gt;</code>: 指定一个正则表达式来过滤出方法名, 例如: <code>-i Get -i RegisterNatives</code> 就只会打印出名字里包含<code>Get</code>或者<code>RegisterNatives</code>的<code>JNI methods</code></li><li><code>-e &lt;regex&gt;</code>和<code>i</code>相反，同样通过正则表达式来过滤，但这次会将指定的内容忽略掉</li><li><code>-I &lt;string&gt;</code>trace导出的方法，jnitrace认为导出的函数应该是从Java端能够直接调用的函数，所以可以包括使用RegisterNatives来注册的函数，例如<code>I stringFromJNI -I nativeMethod([B)V</code>，就包括导出名里有stringFromJNI，以及使用RegisterNames来注册，并带有nativeMethod([B)V签名的函数。</li><li><code>-o path/output.json</code>，导出输出到文件里。</li><li><code>-p path/to/script.js</code>，用于在加载jnitrace脚本之前将指定路径的Frida脚本加载到目标进程中，这可以用于在jnitrace启动之前对抗反调试。</li><li><code>-a path/to/script.js</code>，用于在加载jnitrace脚本之后将指定路径的Frida脚本加载到目标进程中</li><li><code>-ignore-env</code>，不打印所有的JNIEnv函数</li><li><code>-ignore-vm</code>，不打印所有的JavaVM函数</li></ul><h3 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h3><p>默认使用 <code>spawn</code> 启动, 可以通过 <code>-m attach</code> 设置通过 <code>attach</code> 启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jnitrace -m attach -l[libnative-lib.so](http:&#x2F;&#x2F;libnative-lib.so) com.kevin.demoso1</span><br></pre></td></tr></table></figure><h3 id="设置回溯器"><a href="#设置回溯器" class="headerlink" title="设置回溯器"></a>设置回溯器</h3><p>默认情况下使用 <code>accurate</code>的精确模式来进行回溯, 可以通过 <code>-b fuzzy</code> 修改为模糊模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jnitrace -l [libnative-lib.so](http:&#x2F;&#x2F;libnative-lib.so) -b fuzzy com.kevin.demoso1</span><br></pre></td></tr></table></figure><h3 id="监控指定规则的方法"><a href="#监控指定规则的方法" class="headerlink" title="监控指定规则的方法"></a>监控指定规则的方法</h3><p>用于指定应该跟踪的方法名, 该选项可以多次提供;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jnitrace -l libnative-lib.so -i RegisterNatives com.kevin.demoso1</span><br></pre></td></tr></table></figure><p>只过滤出<code>RegisterNatives</code>相关的内容</p><h3 id="忽略指定规则的方法"><a href="#忽略指定规则的方法" class="headerlink" title="忽略指定规则的方法"></a><strong>忽略指定规则的方法</strong></h3><p>用于指定在跟踪中应被忽略的方法名, 这个选项可以被多次提供;</p><p>忽略以<code>Find</code>开头的所有方法;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jnitrace -l libnative-lib.so -e ^Find com.kevin.demoso</span><br></pre></td></tr></table></figure><h2 id="jnitace-计算偏移地址"><a href="#jnitace-计算偏移地址" class="headerlink" title="jnitace 计算偏移地址"></a>jnitace 计算偏移地址</h2><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2020-09-07-062032.png" alt="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2020-09-07-062032.png"></p><p><code>0x8e4f3b1</code> 是方法 <code>initSN</code> 方法的绝对地址</p><p><code>0xd8e4e000</code> 是 <code>[libmyjni.so](http://libmyjni.so)</code> 基地址</p><p>使用使用 <code>initSN()V</code>的绝对地址 <code>0xd8e4f3b1</code> 减去 <code>[libmyjni.so](http://libmyjni.so)</code> 的基地址 <code>0xd8e4e000</code> , 得到偏移 <code>0x13B1</code></p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2020-09-07-070337.png" alt="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2020-09-07-070337.png"></p><p><code>g</code> 进行跳转到 <code>0x13B1</code> 即可进入方法</p><h1 id="frida-trace"><a href="#frida-trace" class="headerlink" title="frida trace"></a>frida trace</h1><p>文档地址: <a href="https://frida.re/docs/frida-trace/">https://frida.re/docs/frida-trace/</a></p><h2 id="options"><a href="#options" class="headerlink" title="options"></a>options</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Usage: frida-trace [options] target</span><br><span class="line"></span><br><span class="line"> Options:</span><br><span class="line">   --version             show program<span class="string">&#x27;s version number and exit</span></span><br><span class="line"><span class="string">   -h, --help            show this help message and exit</span></span><br><span class="line"><span class="string">   -D ID, --device=ID    connect to device with the given ID</span></span><br><span class="line"><span class="string">   -U, --usb             connect to USB device</span></span><br><span class="line"><span class="string">   -R, --remote          connect to remote frida-server</span></span><br><span class="line"><span class="string">   -H HOST, --host=HOST  connect to remote frida-server on HOST</span></span><br><span class="line"><span class="string">   -f FILE, --file=FILE  spawn FILE</span></span><br><span class="line"><span class="string">   -F, --attach-frontmost     attach to frontmost application</span></span><br><span class="line"><span class="string">   -n NAME, --attach-name=NAME     attach to NAME</span></span><br><span class="line"><span class="string">   -p PID, --attach-pid=PID     attach to PID</span></span><br><span class="line"><span class="string">   --stdio=inherit|pipe      stdio behavior when spawning (defaults to “inherit”)</span></span><br><span class="line"><span class="string">   --runtime=duk|v8          script runtime to use (defaults to “duk”)</span></span><br><span class="line"><span class="string">   --debug                   enable the Node.js compatible script debugger</span></span><br><span class="line"><span class="string">   -I MODULE, --include-module=MODULE       include MODULE</span></span><br><span class="line"><span class="string">   -X MODULE, --exclude-module=MODULE       exclude MODULE</span></span><br><span class="line"><span class="string">   -i FUNCTION, --include=FUNCTION    include FUNCTION</span></span><br><span class="line"><span class="string">   -x FUNCTION, --exclude=FUNCTION   exclude FUNCTION</span></span><br><span class="line"><span class="string">   -a MODULE!OFFSET, --add=MODULE!OFFSET    add MODULE!OFFSET</span></span><br><span class="line"><span class="string">   -T, --include-imports    include program&#x27;</span>s imports</span><br><span class="line">   -t MODULE, --include-<span class="built_in">module</span>-imports=MODULE      include MODULE imports</span><br><span class="line">   -m OBJC_METHOD, --include-objc-method=OBJC_METHOD    include OBJC_METHOD</span><br><span class="line">   -M OBJC_METHOD, --exclude-objc-method=OBJC_METHOD    exclude OBJC_METHOD</span><br><span class="line">   -s DEBUG_SYMBOL, --include-debug-symbol=DEBUG_SYMBOL    include DEBUG_SYMBOL</span><br><span class="line">   -q, --quiet           <span class="keyword">do</span> not format output messages</span><br><span class="line">   -d, --decorate        Add <span class="built_in">module</span> name to generated onEnter log statement</span><br><span class="line">   -o OUTPUT, --output=OUTPUT    dump messages to file</span><br></pre></td></tr></table></figure><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-trace [options] packagename</span><br></pre></td></tr></table></figure><h3 id="启动模式"><a href="#启动模式" class="headerlink" title="启动模式"></a>启动模式</h3><p>默认使用 <code>attach</code> 模式, 可以指定 <code>-f packageName</code> 使用 <code>spawn</code> 模式启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-trace -U -i strcmp -f com.gdufs.xman</span><br></pre></td></tr></table></figure><h3 id="文件输出"><a href="#文件输出" class="headerlink" title="文件输出"></a>文件输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-trace -U -i &quot;strcmp&quot; -f com.gdufs.xman -o xman.json</span><br></pre></td></tr></table></figure><p><code>-o filepath</code> 指定输出的文件路径, 方便内容过多时进行查看</p><h3 id="trace-任意-function"><a href="#trace-任意-function" class="headerlink" title="trace 任意 function"></a>trace 任意 function</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-trace -U -i &quot;strcmp&quot; com.example.demoso1</span><br></pre></td></tr></table></figure><h3 id="trace-任意-module"><a href="#trace-任意-module" class="headerlink" title="trace 任意 module"></a>trace 任意 module</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-trace -U -I &quot;libnative-lib.so&quot; com.example.demoso1</span><br></pre></td></tr></table></figure><h3 id="根据地址进行-trace"><a href="#根据地址进行-trace" class="headerlink" title="根据地址进行 trace"></a>根据地址进行 trace</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-trace -U -a &quot;libnative-lib.so!0x9281&quot; com.example.demoso1</span><br></pre></td></tr></table></figure><h2 id="批量-trace"><a href="#批量-trace" class="headerlink" title="批量 trace"></a>批量 trace</h2><p>源码地址: <a href="https://github.com/Pr0214/trace_natives">https://github.com/Pr0214/trace_natives</a></p><p>ps: 需要切换到 frida14 版本</p><p>1.将traceNatives.py丢进IDA plugins目录中</p><ul><li>  在ida 的python console中运行如下命令即可找到plugins目录：<code>os.path.join(idaapi.get_user_idadir(), &quot;plugins&quot;)</code></li></ul><p>2.IDA中，Edit-Plugins-traceNatives –&gt;  IDA输出窗口就会显示如下字眼：<strong>使用方法如下： frida-trace -UF -O C:\Users\Lenovo\Desktop\2021\mt\libmtguard.txt</strong></p><h1 id="frida-hook-libart"><a href="#frida-hook-libart" class="headerlink" title="frida-hook-libart"></a>frida-hook-libart</h1><p>下载地址: <a href="https://github.com/lasting-yang/frida_hook_libart">https://github.com/lasting-yang/frida_hook_libart</a></p><h2 id="hook-art"><a href="#hook-art" class="headerlink" title="hook art"></a>hook art</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U --no-pause -f package_name -l hook_art.js</span><br></pre></td></tr></table></figure><h2 id="hook-RegisterNatives"><a href="#hook-RegisterNatives" class="headerlink" title="hook_RegisterNatives"></a>hook_RegisterNatives</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U --no-pause -f package_name -l hook_RegisterNatives.js</span><br></pre></td></tr></table></figure><h2 id="hook-artmethod"><a href="#hook-artmethod" class="headerlink" title="hook_artmethod"></a>hook_artmethod</h2><h3 id="init-libext-first-time"><a href="#init-libext-first-time" class="headerlink" title="init libext first time"></a>init libext first time</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">adb push lib/libext64.so /data/<span class="built_in">local</span>/tmp/libext64.so</span><br><span class="line">adb push lib/libext.so /data/<span class="built_in">local</span>/tmp/libext.so</span><br><span class="line">adb shell su -c <span class="string">&quot;cp /data/local/tmp/libext64.so /data/app/libext64.so&quot;</span></span><br><span class="line">adb shell su -c <span class="string">&quot;cp /data/local/tmp/libext.so /data/app/libext.so&quot;</span></span><br><span class="line">adb shell su -c <span class="string">&quot;chown 1000.1000 /data/app/libext*.so&quot;</span></span><br><span class="line">adb shell su -c <span class="string">&quot;chmod 777 /data/app/libext*.so&quot;</span></span><br><span class="line">adb shell su -c <span class="string">&quot;ls -al /data/app/libext*&quot;</span></span><br></pre></td></tr></table></figure><h3 id="use-hook-artmethod-js"><a href="#use-hook-artmethod-js" class="headerlink" title="use hook_artmethod.js"></a>use hook_artmethod.js</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">frida -U --no-pause -f package_name -l hook_artmethod.js</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">frida -U --no-pause -f package_name -l hook_artmethod.js &gt; hook_artmethod.log</span><br></pre></td></tr></table></figure><h2 id="frida-fart-hook"><a href="#frida-fart-hook" class="headerlink" title="frida-fart-hook"></a>frida-fart-hook</h2><p>首先拷贝fart.so和fart64.so到/data/app目录下，并使用chmod 777 设置好权限,然后就可以使用了。</p><p>如果目标 app 没有 sdcard 权限则需要手动添加; 或者可以修改 frida_fart_hook.js 中的源码, 将 savepath 改为 <code>/data/data/应用包名/</code>;</p><p>该frida版fart是使用hook的方式实现的函数粒度的脱壳，仅仅是对类中的所有函数进行了加载，但依然可以解决绝大多数的抽取保护</p><p>需要以spawn方式启动app，等待app进入Activity界面后，执行fart()函数即可。如app包名为com.example.test,则</p><p><code>frida -U -f com.example.test -l frida_fart_hook.js --no-pause</code> ，然后等待app进入主界面,执行fart()</p><p>高级用法：如果发现某个类中的函数的CodeItem没有dump下来，可以调用dump(classname),传入要处理的类名，完成对该类下的所有函数体的dump,dump下来的函数体会追加到bin文件当中。</p><h1 id="frida-文件写入-frida-hook-libc"><a href="#frida-文件写入-frida-hook-libc" class="headerlink" title="frida 文件写入(frida/hook libc)"></a>frida 文件写入(frida/hook libc)</h1><p><code>frida api</code> 写入文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeFile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> file = <span class="keyword">new</span> File(<span class="string">&quot;/sdcard/reg.dat&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">file.write(<span class="string">&quot;content from frida&quot;</span>);</span><br><span class="line">file.flush();</span><br><span class="line">file.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>frida 定义 NativeFunction</code> 写入文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeFileNative</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> addr_fopen = Module.findExportByName(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;fopen&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> addr_fputs = Module.findExportByName(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;fputs&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> addr_fclose = Module.findExportByName(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;fclose&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 libc 的系统方法注册到 js 层</span></span><br><span class="line"><span class="keyword">var</span> fopen = <span class="keyword">new</span> NativeFunction(addr_fopen, <span class="string">&quot;pointer&quot;</span>, [<span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>]);</span><br><span class="line"><span class="keyword">var</span> fputs = <span class="keyword">new</span> NativeFunction(addr_fputs, <span class="string">&quot;int&quot;</span>, [<span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>]);</span><br><span class="line"><span class="keyword">var</span> fclose = <span class="keyword">new</span> NativeFunction(addr_fclose, <span class="string">&quot;int&quot;</span>, [<span class="string">&quot;pointer&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 js 层主动调用 libc 的方法</span></span><br><span class="line"><span class="comment">// 不能直接将 js 的字符串传给 libc中的方法, 需要进行转换</span></span><br><span class="line"><span class="keyword">var</span> filename = Memory.allocUtf8String(<span class="string">&quot;/sdcard/reg.dat&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> open_mode = Memory.allocUtf8String(<span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> file = fopen(filename, open_mode);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buffer = Memory.allocUtf8String(<span class="string">&quot;content from frida&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> result = fputs(buffer, file);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;fputs ret: &quot;</span>, result);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭文件</span></span><br><span class="line">fclose(file);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="hook-读写-std-string"><a href="#hook-读写-std-string" class="headerlink" title="hook 读写 std::string"></a>hook 读写 std::string</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readStdString</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> isTiny = (str.readU8 &amp; <span class="number">1</span>) === <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (isTiny)&#123;</span><br><span class="line">    <span class="keyword">return</span> str.add(<span class="number">1</span>).readUtf8String();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str.add(<span class="number">2</span> * Process.pointerSize).readPointer().readUtf8String();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeStdString</span>(<span class="params">str, content</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> isTiny = (str.readU8() &amp; <span class="number">1</span>) === <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (isTiny)&#123;</span><br><span class="line">    str.add(<span class="number">1</span>).writeUtf8String(content);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    str.add(<span class="number">2</span> * Process.pointerSize).readPointer().writeUtf8String(content);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="hook-so-文件加载后马上-hook"><a href="#hook-so-文件加载后马上-hook" class="headerlink" title="hook so 文件加载后马上 hook"></a>hook so 文件加载后马上 hook</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种方式（针对较老的系统版本）</span></span><br><span class="line"><span class="keyword">var</span> dlopen = Module.findExportByName(<span class="literal">null</span>, <span class="string">&quot;dlopen&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(dlopen);</span><br><span class="line"><span class="keyword">if</span>(dlopen != <span class="literal">null</span>)&#123;</span><br><span class="line">    Interceptor.attach(dlopen,&#123;</span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> soName = args[<span class="number">0</span>].readCString();</span><br><span class="line">            <span class="built_in">console</span>.log(soName);</span><br><span class="line">            <span class="keyword">if</span>(soName.indexOf(<span class="string">&quot;libc.so&quot;</span>) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.hook = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.hook) &#123; </span><br><span class="line">                dlopentodo();</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方式（针对新系统版本） android 8.1 使用该方法</span></span><br><span class="line"><span class="keyword">var</span> android_dlopen_ext = Module.findExportByName(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(android_dlopen_ext);</span><br><span class="line"><span class="keyword">if</span>(android_dlopen_ext != <span class="literal">null</span>)&#123;</span><br><span class="line">    Interceptor.attach(android_dlopen_ext,&#123;</span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> soName = args[<span class="number">0</span>].readCString();</span><br><span class="line">            <span class="built_in">console</span>.log(soName);</span><br><span class="line">            <span class="keyword">if</span>(soName.indexOf(<span class="string">&quot;libc.so&quot;</span>) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.hook = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.hook) &#123;</span><br><span class="line">                dlopentodo();</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dlopentodo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//todo ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="hook-libc-kill"><a href="#hook-libc-kill" class="headerlink" title="hook libc kill"></a>hook libc kill</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceKILL</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> kill_addr = Module.findExportByName(<span class="string">&quot;libc.so&quot;</span>,<span class="string">&quot;kill&quot;</span>);</span><br><span class="line">Interceptor.replace(kill_addr, <span class="keyword">new</span> NativeCallback(<span class="function"><span class="keyword">function</span>(<span class="params">arg0, arg1</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;arg0=&gt; &quot;</span>, arg0);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;arg1=&gt; &quot;</span>, arg1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;libc.so!kill called from:\n&#x27;</span> +</span><br><span class="line">        Thread.backtrace(<span class="built_in">this</span>.context, Backtracer.ACCURATE)</span><br><span class="line">        .map(DebugSymbol.fromAddress).join(<span class="string">&#x27;\n&#x27;</span>) + <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;,<span class="string">&quot;int&quot;</span>,[<span class="string">&quot;int&quot;</span>,<span class="string">&quot;int&quot;</span>]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="hook-init-array"><a href="#hook-init-array" class="headerlink" title="hook init_array"></a>hook init_array</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//应用以32位在64位终端环境下运行</span></span><br><span class="line"><span class="comment">//adb install --abi armeabi-v7a &lt;path to apk&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_call_function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> call_function_addr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> symbols = Process.getModuleByName(<span class="string">&quot;linker&quot;</span>).enumerateSymbols();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> m = <span class="number">0</span>; m &lt; symbols.length; m++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (symbols[m].name == <span class="string">&quot;__dl__ZL13call_functionPKcPFviPPcS2_ES0_&quot;</span>) &#123;</span><br><span class="line">            call_function_addr = symbols[m].address;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;found call_function_addr =&gt; &quot;</span>, call_function_addr)</span><br><span class="line">            hook_call_function(call_function_addr)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_call_function</span>(<span class="params">_call_function_addr</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hook call function begin!hooking address :=&gt;&quot;</span>,_call_function_addr)</span><br><span class="line">    Interceptor.attach(_call_function_addr,&#123;</span><br><span class="line">        onEnter:<span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(args[<span class="number">2</span>].readCString().indexOf(<span class="string">&quot;base.odex&quot;</span>)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;============================&quot;</span>)</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;function_name =&gt;&quot;</span>,args[<span class="number">0</span>].readCString())</span><br><span class="line">                <span class="keyword">var</span> soPath = args[<span class="number">2</span>].readCString()</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;so path : =&gt;&quot;</span>,soPath)</span><br><span class="line">                <span class="keyword">var</span> soName = soPath.split(<span class="string">&quot;/&quot;</span>).pop();</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;function offset =&gt;&quot;</span>,<span class="string">&quot;0x&quot;</span>+(args[<span class="number">1</span>]-Module.findBaseAddress(soName)).toString(<span class="number">16</span>))</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;============================&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="function"><span class="keyword">function</span>(<span class="params">retval</span>)</span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(get_call_function)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_constructor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Process.pointerSize == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> linker = Process.findModuleByName(<span class="string">&quot;linker&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> linker = Process.findModuleByName(<span class="string">&quot;linker64&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> addr_call_function =<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> addr_g_ld_debug_verbosity = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> addr_async_safe_format_log = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (linker) &#123;</span><br><span class="line">        <span class="keyword">var</span> symbols = linker.enumerateSymbols();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; symbols.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> name = symbols[i].name;</span><br><span class="line">            <span class="keyword">if</span> (name.indexOf(<span class="string">&quot;call_function&quot;</span>) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                addr_call_function = symbols[i].address;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(name.indexOf(<span class="string">&quot;g_ld_debug_verbosity&quot;</span>) &gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                addr_g_ld_debug_verbosity = symbols[i].address;</span><br><span class="line">              </span><br><span class="line">                ptr(addr_g_ld_debug_verbosity).writeInt(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(name.indexOf(<span class="string">&quot;async_safe_format_log&quot;</span>) &gt;=<span class="number">0</span> &amp;&amp; name.indexOf(<span class="string">&#x27;va_list&#x27;</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            </span><br><span class="line">                addr_async_safe_format_log = symbols[i].address;</span><br><span class="line"></span><br><span class="line">            &#125; </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(addr_async_safe_format_log)&#123;</span><br><span class="line">        Interceptor.attach(addr_async_safe_format_log,&#123;</span><br><span class="line">            onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.log_level  = args[<span class="number">0</span>];</span><br><span class="line">                <span class="built_in">this</span>.tag = ptr(args[<span class="number">1</span>]).readCString()</span><br><span class="line">                <span class="built_in">this</span>.fmt = ptr(args[<span class="number">2</span>]).readCString()</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">this</span>.fmt.indexOf(<span class="string">&quot;c-tor&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp; <span class="built_in">this</span>.fmt.indexOf(<span class="string">&#x27;Done&#x27;</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="built_in">this</span>.function_type = ptr(args[<span class="number">3</span>]).readCString(), <span class="comment">// func_type</span></span><br><span class="line">                    <span class="built_in">this</span>.so_path = ptr(args[<span class="number">5</span>]).readCString();</span><br><span class="line">                    <span class="keyword">var</span> strs = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">//定义一数组 </span></span><br><span class="line">                    strs = <span class="built_in">this</span>.so_path.split(<span class="string">&quot;/&quot;</span>); <span class="comment">//字符分割</span></span><br><span class="line">                    <span class="built_in">this</span>.so_name = strs.pop();</span><br><span class="line">                    <span class="built_in">this</span>.func_offset  = ptr(args[<span class="number">4</span>]).sub(Module.findBaseAddress(<span class="built_in">this</span>.so_name)) </span><br><span class="line">                     <span class="built_in">console</span>.log(<span class="string">&quot;func_type:&quot;</span>, <span class="built_in">this</span>.function_type,</span><br><span class="line">                        <span class="string">&#x27;\nso_name:&#x27;</span>,<span class="built_in">this</span>.so_name,</span><br><span class="line">                        <span class="string">&#x27;\nso_path:&#x27;</span>,<span class="built_in">this</span>.so_path,</span><br><span class="line">                        <span class="string">&#x27;\nfunc_offset:&#x27;</span>,<span class="built_in">this</span>.func_offset </span><br><span class="line">                     );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    hook_constructor();</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><h1 id="frida-dump"><a href="#frida-dump" class="headerlink" title="frida dump"></a>frida dump</h1><p>document: <a href="https://github.com/lasting-yang/frida_dump">https://github.com/lasting-yang/frida_dump</a></p><h2 id="frida-dump-so"><a href="#frida-dump-so" class="headerlink" title="frida dump so"></a>frida dump so</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dump_so</span>(<span class="params">so_name</span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> currentApplication = Java.use(<span class="string">&quot;android.app.ActivityThread&quot;</span>).currentApplication();</span><br><span class="line">        <span class="keyword">var</span> dir = currentApplication.getApplicationContext().getFilesDir().getPath();</span><br><span class="line">        <span class="keyword">var</span> libso = Process.getModuleByName(so_name);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;[name]:&quot;</span>, libso.name);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;[base]:&quot;</span>, libso.base);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;[size]:&quot;</span>, ptr(libso.size));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;[path]:&quot;</span>, libso.path);</span><br><span class="line">        <span class="keyword">var</span> file_path = dir + <span class="string">&quot;/&quot;</span> + libso.name + <span class="string">&quot;_&quot;</span> + libso.base + <span class="string">&quot;_&quot;</span> + ptr(libso.size) + <span class="string">&quot;.so&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> file_handle = <span class="keyword">new</span> File(file_path, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (file_handle &amp;&amp; file_handle != <span class="literal">null</span>) &#123;</span><br><span class="line">            Memory.protect(ptr(libso.base), libso.size, <span class="string">&#x27;rwx&#x27;</span>);</span><br><span class="line">            <span class="keyword">var</span> libso_buffer = ptr(libso.base).readByteArray(libso.size);</span><br><span class="line">            file_handle.write(libso_buffer);</span><br><span class="line">            file_handle.flush();</span><br><span class="line">            file_handle.close();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;[dump]:&quot;</span>, file_path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="frida-dump-dex"><a href="#frida-dump-dex" class="headerlink" title="frida dump dex"></a>frida dump dex</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_self_process_name</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> openPtr = Module.getExportByName(<span class="string">&#x27;libc.so&#x27;</span>, <span class="string">&#x27;open&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> open = <span class="keyword">new</span> NativeFunction(openPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> readPtr = Module.getExportByName(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;read&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> read = <span class="keyword">new</span> NativeFunction(readPtr, <span class="string">&quot;int&quot;</span>, [<span class="string">&quot;int&quot;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;int&quot;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> closePtr = Module.getExportByName(<span class="string">&#x27;libc.so&#x27;</span>, <span class="string">&#x27;close&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> close = <span class="keyword">new</span> NativeFunction(closePtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> path = Memory.allocUtf8String(<span class="string">&quot;/proc/self/cmdline&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> fd = open(path, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (fd != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> buffer = Memory.alloc(<span class="number">0x1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> result = read(fd, buffer, <span class="number">0x1000</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        result = ptr(buffer).readCString();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;-1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mkdir</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> mkdirPtr = Module.getExportByName(<span class="string">&#x27;libc.so&#x27;</span>, <span class="string">&#x27;mkdir&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> mkdir = <span class="keyword">new</span> NativeFunction(mkdirPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> opendirPtr = Module.getExportByName(<span class="string">&#x27;libc.so&#x27;</span>, <span class="string">&#x27;opendir&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> opendir = <span class="keyword">new</span> NativeFunction(opendirPtr, <span class="string">&#x27;pointer&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> closedirPtr = Module.getExportByName(<span class="string">&#x27;libc.so&#x27;</span>, <span class="string">&#x27;closedir&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> closedir = <span class="keyword">new</span> NativeFunction(closedirPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> cPath = Memory.allocUtf8String(path);</span><br><span class="line">    <span class="keyword">var</span> dir = opendir(cPath);</span><br><span class="line">    <span class="keyword">if</span> (dir != <span class="number">0</span>) &#123;</span><br><span class="line">        closedir(dir);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mkdir(cPath, <span class="number">755</span>);</span><br><span class="line">    chmod(path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chmod</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> chmodPtr = Module.getExportByName(<span class="string">&#x27;libc.so&#x27;</span>, <span class="string">&#x27;chmod&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> chmod = <span class="keyword">new</span> NativeFunction(chmodPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line">    <span class="keyword">var</span> cPath = Memory.allocUtf8String(path);</span><br><span class="line">    chmod(cPath, <span class="number">755</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dump_dex</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> libart = Process.findModuleByName(<span class="string">&quot;libart.so&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> addr_DefineClass = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> symbols = libart.enumerateSymbols();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; symbols.length; index++) &#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[index];</span><br><span class="line">        <span class="keyword">var</span> symbol_name = symbol.name;</span><br><span class="line">        <span class="comment">//这个DefineClass的函数签名是Android9的</span></span><br><span class="line">        <span class="comment">//_ZN3art11ClassLinker11DefineClassEPNS_6ThreadEPKcmNS_6HandleINS_6mirror11ClassLoaderEEERKNS_7DexFileERKNS9_8ClassDefE</span></span><br><span class="line">        <span class="keyword">if</span> (symbol_name.indexOf(<span class="string">&quot;ClassLinker&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">            symbol_name.indexOf(<span class="string">&quot;DefineClass&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">            symbol_name.indexOf(<span class="string">&quot;Thread&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">            symbol_name.indexOf(<span class="string">&quot;DexFile&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(symbol_name, symbol.address);</span><br><span class="line">            addr_DefineClass = symbol.address;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> dex_maps = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> dex_count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;[DefineClass:]&quot;</span>, addr_DefineClass);</span><br><span class="line">    <span class="keyword">if</span> (addr_DefineClass) &#123;</span><br><span class="line">        Interceptor.attach(addr_DefineClass, &#123;</span><br><span class="line">            onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> dex_file = args[<span class="number">5</span>];</span><br><span class="line">                <span class="comment">//ptr(dex_file).add(Process.pointerSize) is &quot;const uint8_t* const begin_;&quot;</span></span><br><span class="line">                <span class="comment">//ptr(dex_file).add(Process.pointerSize + Process.pointerSize) is &quot;const size_t size_;&quot;</span></span><br><span class="line">                <span class="keyword">var</span> base = ptr(dex_file).add(Process.pointerSize).readPointer();</span><br><span class="line">                <span class="keyword">var</span> size = ptr(dex_file).add(Process.pointerSize + Process.pointerSize).readUInt();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (dex_maps[base] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">                    dex_maps[base] = size;</span><br><span class="line">                    <span class="keyword">var</span> magic = ptr(base).readCString();</span><br><span class="line">                    <span class="keyword">if</span> (magic.indexOf(<span class="string">&quot;dex&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">var</span> process_name = get_self_process_name();</span><br><span class="line">                        <span class="keyword">if</span> (process_name != <span class="string">&quot;-1&quot;</span>) &#123;</span><br><span class="line">                            <span class="keyword">var</span> dex_dir_path = <span class="string">&quot;/data/data/&quot;</span> + process_name + <span class="string">&quot;/files/dump_dex_&quot;</span> + process_name;</span><br><span class="line">                            mkdir(dex_dir_path);</span><br><span class="line">                            <span class="keyword">var</span> dex_path = dex_dir_path + <span class="string">&quot;/class&quot;</span> + (dex_count == <span class="number">1</span> ? <span class="string">&quot;&quot;</span> : dex_count) + <span class="string">&quot;.dex&quot;</span>;</span><br><span class="line">                            <span class="built_in">console</span>.log(<span class="string">&quot;[find dex]:&quot;</span>, dex_path);</span><br><span class="line">                            <span class="keyword">var</span> fd = <span class="keyword">new</span> File(dex_path, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">                            <span class="keyword">if</span> (fd &amp;&amp; fd != <span class="literal">null</span>) &#123;</span><br><span class="line">                                dex_count++;</span><br><span class="line">                                <span class="keyword">var</span> dex_buffer = ptr(base).readByteArray(size);</span><br><span class="line">                                fd.write(dex_buffer);</span><br><span class="line">                                fd.flush();</span><br><span class="line">                                fd.close();</span><br><span class="line">                                <span class="built_in">console</span>.log(<span class="string">&quot;[dump dex]:&quot;</span>, dex_path);</span><br><span class="line"></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>) </span>&#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> is_hook_libart = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_dlopen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Interceptor.attach(Module.findExportByName(<span class="literal">null</span>, <span class="string">&quot;dlopen&quot;</span>), &#123;</span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (pathptr !== <span class="literal">undefined</span> &amp;&amp; pathptr != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> path = ptr(pathptr).readCString();</span><br><span class="line">                <span class="comment">//console.log(&quot;dlopen:&quot;, path);</span></span><br><span class="line">                <span class="keyword">if</span> (path.indexOf(<span class="string">&quot;libart.so&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.can_hook_libart = <span class="literal">true</span>;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;[dlopen:]&quot;</span>, path);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.can_hook_libart &amp;&amp; !is_hook_libart) &#123;</span><br><span class="line">                dump_dex();</span><br><span class="line">                is_hook_libart = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    Interceptor.attach(Module.findExportByName(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>), &#123;</span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (pathptr !== <span class="literal">undefined</span> &amp;&amp; pathptr != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> path = ptr(pathptr).readCString();</span><br><span class="line">                <span class="comment">//console.log(&quot;android_dlopen_ext:&quot;, path);</span></span><br><span class="line">                <span class="keyword">if</span> (path.indexOf(<span class="string">&quot;libart.so&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.can_hook_libart = <span class="literal">true</span>;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;[android_dlopen_ext:]&quot;</span>, path);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.can_hook_libart &amp;&amp; !is_hook_libart) &#123;</span><br><span class="line">                dump_dex();</span><br><span class="line">                is_hook_libart = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setImmediate(dump_dex);</span><br></pre></td></tr></table></figure><h2 id="frida-dump-dex-class"><a href="#frida-dump-dex-class" class="headerlink" title="frida dump dex class"></a>frida dump dex class</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_self_process_name</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> openPtr = Module.getExportByName(<span class="string">&#x27;libc.so&#x27;</span>, <span class="string">&#x27;open&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> open = <span class="keyword">new</span> NativeFunction(openPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> readPtr = Module.getExportByName(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;read&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> read = <span class="keyword">new</span> NativeFunction(readPtr, <span class="string">&quot;int&quot;</span>, [<span class="string">&quot;int&quot;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;int&quot;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> closePtr = Module.getExportByName(<span class="string">&#x27;libc.so&#x27;</span>, <span class="string">&#x27;close&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> close = <span class="keyword">new</span> NativeFunction(closePtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> path = Memory.allocUtf8String(<span class="string">&quot;/proc/self/cmdline&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> fd = open(path, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (fd != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> buffer = Memory.alloc(<span class="number">0x1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> result = read(fd, buffer, <span class="number">0x1000</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        result = ptr(buffer).readCString();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;-1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">load_all_class</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Java.available) &#123;</span><br><span class="line">        Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> DexFileclass = Java.use(<span class="string">&quot;dalvik.system.DexFile&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> BaseDexClassLoaderclass = Java.use(<span class="string">&quot;dalvik.system.BaseDexClassLoader&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> DexPathListclass = Java.use(<span class="string">&quot;dalvik.system.DexPathList&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Java.enumerateClassLoaders(&#123;</span><br><span class="line">                onMatch: <span class="function"><span class="keyword">function</span> (<span class="params">loader</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">var</span> basedexclassloaderobj = Java.cast(loader, BaseDexClassLoaderclass);</span><br><span class="line">                        <span class="keyword">var</span> pathList = basedexclassloaderobj.pathList.value;</span><br><span class="line">                        <span class="keyword">var</span> pathListobj = Java.cast(pathList, DexPathListclass)</span><br><span class="line">                        <span class="keyword">var</span> dexElements = pathListobj.dexElements.value;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> index <span class="keyword">in</span> dexElements) &#123;</span><br><span class="line">                            <span class="keyword">var</span> element = dexElements[index];</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="keyword">var</span> dexfile = element.dexFile.value;</span><br><span class="line">                                <span class="keyword">var</span> dexfileobj = Java.cast(dexfile, DexFileclass);</span><br><span class="line">                                <span class="built_in">console</span>.log(<span class="string">&quot;dexFile:&quot;</span>, dexfileobj);</span><br><span class="line">                                <span class="keyword">const</span> classNames = [];</span><br><span class="line">                                <span class="keyword">const</span> enumeratorClassNames = dexfileobj.entries();</span><br><span class="line">                                <span class="keyword">while</span> (enumeratorClassNames.hasMoreElements()) &#123;</span><br><span class="line">                                    <span class="keyword">var</span> className = enumeratorClassNames.nextElement().toString();</span><br><span class="line">                                    classNames.push(className);</span><br><span class="line">                                    <span class="keyword">try</span> &#123;</span><br><span class="line">                                        loader.loadClass(className);</span><br><span class="line">                                    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                                        <span class="built_in">console</span>.log(<span class="string">&quot;loadClass error:&quot;</span>, error);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                                <span class="built_in">console</span>.log(<span class="string">&quot;dexfile error:&quot;</span>, error);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&quot;loader error:&quot;</span>, error);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                onComplete: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;load_all_class end.&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dex_maps = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print_dex_maps</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> dex <span class="keyword">in</span> dex_maps) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(dex, dex_maps[dex]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dump_dex</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    load_all_class();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> base <span class="keyword">in</span> dex_maps) &#123;</span><br><span class="line">        <span class="keyword">var</span> size = dex_maps[base];</span><br><span class="line">        <span class="built_in">console</span>.log(base);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> magic = ptr(base).readCString();</span><br><span class="line">        <span class="keyword">if</span> (magic.indexOf(<span class="string">&quot;dex&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> process_name = get_self_process_name();</span><br><span class="line">            <span class="keyword">if</span> (process_name != <span class="string">&quot;-1&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> dex_path = <span class="string">&quot;/data/data/&quot;</span> + process_name + <span class="string">&quot;/files/&quot;</span> + base.toString(<span class="number">16</span>) + <span class="string">&quot;_&quot;</span> + size.toString(<span class="number">16</span>) + <span class="string">&quot;.dex&quot;</span>;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;[find dex]:&quot;</span>, dex_path);</span><br><span class="line">                <span class="keyword">var</span> fd = <span class="keyword">new</span> File(dex_path, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (fd &amp;&amp; fd != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> dex_buffer = ptr(base).readByteArray(size);</span><br><span class="line">                    fd.write(dex_buffer);</span><br><span class="line">                    fd.flush();</span><br><span class="line">                    fd.close();</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;[dump dex]:&quot;</span>, dex_path);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_dex</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> libart = Process.findModuleByName(<span class="string">&quot;libart.so&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> addr_DefineClass = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> symbols = libart.enumerateSymbols();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; symbols.length; index++) &#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[index];</span><br><span class="line">        <span class="keyword">var</span> symbol_name = symbol.name;</span><br><span class="line">        <span class="comment">//这个DefineClass的函数签名是Android9的</span></span><br><span class="line">        <span class="comment">//_ZN3art11ClassLinker11DefineClassEPNS_6ThreadEPKcmNS_6HandleINS_6mirror11ClassLoaderEEERKNS_7DexFileERKNS9_8ClassDefE</span></span><br><span class="line">        <span class="keyword">if</span> (symbol_name.indexOf(<span class="string">&quot;ClassLinker&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">            symbol_name.indexOf(<span class="string">&quot;DefineClass&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">            symbol_name.indexOf(<span class="string">&quot;Thread&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">            symbol_name.indexOf(<span class="string">&quot;DexFile&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(symbol_name, symbol.address);</span><br><span class="line">            addr_DefineClass = symbol.address;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;[DefineClass:]&quot;</span>, addr_DefineClass);</span><br><span class="line">    <span class="keyword">if</span> (addr_DefineClass) &#123;</span><br><span class="line">        Interceptor.attach(addr_DefineClass, &#123;</span><br><span class="line">            onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> dex_file = args[<span class="number">5</span>];</span><br><span class="line">                <span class="comment">//ptr(dex_file).add(Process.pointerSize) is &quot;const uint8_t* const begin_;&quot;</span></span><br><span class="line">                <span class="comment">//ptr(dex_file).add(Process.pointerSize + Process.pointerSize) is &quot;const size_t size_;&quot;</span></span><br><span class="line">                <span class="keyword">var</span> base = ptr(dex_file).add(Process.pointerSize).readPointer();</span><br><span class="line">                <span class="keyword">var</span> size = ptr(dex_file).add(Process.pointerSize + Process.pointerSize).readUInt();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (dex_maps[base] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">                    dex_maps[base] = size;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;hook_dex:&quot;</span>, base, size);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            onLeave: <span class="function"><span class="keyword">function</span> (<span class="params">retval</span>) </span>&#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> is_hook_libart = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_dlopen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Interceptor.attach(Module.findExportByName(<span class="literal">null</span>, <span class="string">&quot;dlopen&quot;</span>), &#123;</span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (pathptr !== <span class="literal">undefined</span> &amp;&amp; pathptr != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> path = ptr(pathptr).readCString();</span><br><span class="line">                <span class="comment">//console.log(&quot;dlopen:&quot;, path);</span></span><br><span class="line">                <span class="keyword">if</span> (path.indexOf(<span class="string">&quot;libart.so&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.can_hook_libart = <span class="literal">true</span>;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;[dlopen:]&quot;</span>, path);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span> (<span class="params">retval</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.can_hook_libart &amp;&amp; !is_hook_libart) &#123;</span><br><span class="line">                hook_dex();</span><br><span class="line">                is_hook_libart = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    Interceptor.attach(Module.findExportByName(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>), &#123;</span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (pathptr !== <span class="literal">undefined</span> &amp;&amp; pathptr != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> path = ptr(pathptr).readCString();</span><br><span class="line">                <span class="comment">//console.log(&quot;android_dlopen_ext:&quot;, path);</span></span><br><span class="line">                <span class="keyword">if</span> (path.indexOf(<span class="string">&quot;libart.so&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.can_hook_libart = <span class="literal">true</span>;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;[android_dlopen_ext:]&quot;</span>, path);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span> (<span class="params">retval</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.can_hook_libart &amp;&amp; !is_hook_libart) &#123;</span><br><span class="line">                hook_dex();</span><br><span class="line">                is_hook_libart = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setImmediate(hook_dex);</span><br></pre></td></tr></table></figure><h1 id="指针运算符和读写-API"><a href="#指针运算符和读写-API" class="headerlink" title="指针运算符和读写 API"></a>指针运算符和读写 API</h1><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-03-01-052956.jpg" alt="img"><br><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-03-01-053441.jpg" alt="img"></p><h2 id="hook-so-readPointer"><a href="#hook-so-readPointer" class="headerlink" title="hook so readPointer()"></a>hook so readPointer()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> libc_addr = Process.findModuleByName(<span class="string">&quot;libc.so&quot;</span>).base;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;libc address is &quot;</span> + libc_addr);</span><br><span class="line">        <span class="comment">// 0x10 转为十进制为 16, 读取</span></span><br><span class="line">        <span class="built_in">console</span>.log(libc_addr.readByteArray(<span class="number">0x10</span>));</span><br><span class="line">        <span class="comment">// readPointer(), 从此内存位置读取 NativePointer</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;pointer size&quot;</span>, Process.pointerSize);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;readPointer() is &quot;</span> + libc_addr.readPointer());</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Memory.readPointer()&quot;</span> + Memory.readPointer(libc_addr.add(Process.pointerSize)));</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="hook-so-writePointer"><a href="#hook-so-writePointer" class="headerlink" title="hook so writePointer()"></a>hook so writePointer()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> libc_addr = Process.findModuleByName(<span class="string">&quot;libc.so&quot;</span>).base;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;libc_addr : &quot;</span> + libc_addr);</span><br><span class="line">        <span class="comment">// 分配四个字节的空间地址</span></span><br><span class="line">        <span class="keyword">const</span> r = Memory.alloc(<span class="number">4</span>);</span><br><span class="line">        <span class="comment">// 将 libc_addr 指针写入刚申请的 r 中</span></span><br><span class="line">        r.writePointer(libc_addr);</span><br><span class="line">        <span class="comment">// 读取 r 指针的数据</span></span><br><span class="line">        <span class="keyword">var</span> buffer = Memory.readByteArray(r, <span class="number">4</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(buffer);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//libc_addr : 0x7da7fdf000</span></span><br><span class="line">        <span class="comment">//    0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span></span><br><span class="line"><span class="comment">// 00000000  00 f0 fd a7                                      ....</span></span><br></pre></td></tr></table></figure><h2 id="hook-so-readS32-readU32"><a href="#hook-so-readS32-readU32" class="headerlink" title="hook so readS32(), readU32()"></a>hook so readS32(), readU32()</h2><p>从指定内存地址读取有符号或者无符号 8/16/21/etc 或浮点数/双精度值, 并将其作为数字返回;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> libc_addr = Process.findModuleByName(<span class="string">&quot;libc.so&quot;</span>).base;</span><br><span class="line">        <span class="built_in">console</span>.log(hexdump(libc_addr));</span><br><span class="line">        <span class="built_in">console</span>.log(libc_addr.readS32(), (libc_addr.readS32()).toString(<span class="number">16</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(libc_addr.readU32(), (libc_addr.readU32()).toString(<span class="number">16</span>));</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-03-01-062734.png" alt="img"></p><h2 id="hook-so-writeS32-writeU32"><a href="#hook-so-writeS32-writeU32" class="headerlink" title="hook so writeS32(), writeU32()"></a>hook so writeS32(), writeU32()</h2><p>将有符号或无符号8/16/32/等或浮点数/双精度值写入此内存位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 开辟四个字节的内存空间</span></span><br><span class="line">        <span class="keyword">const</span> r = Memory.alloc(<span class="number">4</span>);</span><br><span class="line">        r.writeS32(<span class="number">0x12345678</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(r.readByteArray(<span class="number">0x10</span>));</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;!--  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line"><span class="number">00000000</span>  <span class="number">78</span> <span class="number">56</span> <span class="number">34</span> <span class="number">12</span> 7d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">98</span> c0 bb a8 7d <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  xV4.&#125;.......&#125;...</span><br><span class="line"> --&gt;</span><br></pre></td></tr></table></figure><h2 id="hook-so-readByteArray-writeByteArray"><a href="#hook-so-readByteArray-writeByteArray" class="headerlink" title="hook so readByteArray(), writeByteArray()"></a>hook so readByteArray(), writeByteArray()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 定义一个需要写入的字节数组</span></span><br><span class="line">        <span class="keyword">var</span> arr = [ <span class="number">0x72</span>, <span class="number">0x6F</span>, <span class="number">0x79</span>, <span class="number">0x73</span>, <span class="number">0x75</span>, <span class="number">0x65</span>];</span><br><span class="line">       <span class="comment">//这里申请以arr大小的内存空间</span></span><br><span class="line">        <span class="keyword">var</span> r = Memory.alloc(arr.length);</span><br><span class="line">        <span class="comment">// 将 arr 写入 r 中</span></span><br><span class="line">        r.writeByteArray(arr);</span><br><span class="line">        <span class="comment">// Memory.writeByteArray(r, arr); 同样可以写入</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;memory readbyteArray: &quot;</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(r.readByteArray(arr.length));</span><br><span class="line">        <span class="built_in">console</span>.log(Memory.readByteArray(r, arr.length));</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="hook-so-readCString-writeUtf8String"><a href="#hook-so-readCString-writeUtf8String" class="headerlink" title="hook so readCString(), writeUtf8String()"></a>hook so readCString(), writeUtf8String()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 开辟内存空间 存有字符串</span></span><br><span class="line">        <span class="keyword">var</span> r = Memory.allocUtf8String(<span class="string">&quot;你好,世界&quot;</span>);</span><br><span class="line">        <span class="comment">// 读取内存中的字符串</span></span><br><span class="line">        <span class="built_in">console</span>.log(hexdump(r));</span><br><span class="line">        <span class="built_in">console</span>.log(r.readCString());</span><br><span class="line">        <span class="comment">// 往内存中写入新的字符串</span></span><br><span class="line">        r.writeUtf8String(<span class="string">&quot;Hello,World&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(hexdump(r));</span><br><span class="line">        <span class="built_in">console</span>.log(r.readCString())</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h1 id="hook-获取-jni-array"><a href="#hook-获取-jni-array" class="headerlink" title="hook 获取 jni array"></a>hook 获取 jni array</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 jbytesArray 的指针</span></span><br><span class="line"><span class="keyword">var</span> arg1Ptr = Java.vm.getEnv().getByteArrayElements(<span class="built_in">this</span>.arg1, <span class="literal">null</span>) </span><br><span class="line"><span class="comment">// 获取到指针后可以直接 hexdump 打印</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;arg1Ptr&quot;</span>,hexdump(arg1Ptr));</span><br><span class="line"><span class="comment">// 如果是字符串可以直接转</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;arg1Ptr&quot;</span>,arg1Ptr.readCString());</span><br></pre></td></tr></table></figure><h1 id="ida-动态调试"><a href="#ida-动态调试" class="headerlink" title="ida 动态调试"></a>ida 动态调试</h1><ol><li><p>将 ida 中的 android-server 推入到手机中</p><p> <code>adb push /Applications/IDA\ Pro\ 7.0/ida.app/Contents/MacOS/dbgsrv/android_server /data/local/tmp/as</code></p><p> android_server 负责调试 32 位的app, android_server64 负责调试 64 位的app, 改名为 as 可以防止部分 android_server 名称检测</p></li><li><p>给 android_server 增加权限</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">chmod +x /data/<span class="built_in">local</span>/tmp/as</span><br></pre></td></tr></table></figure></li><li><p> 进行端口转发 <code>adb forward tcp:11678 tcp:11678</code></p></li><li><p>启动 android_server 并指定端口为 11678</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">/data/<span class="built_in">local</span>/tmp/as -p11678</span><br></pre></td></tr></table></figure></li><li><p> 调试之前先注入 frida</p></li><li><p> 新建一个 ida 界面</p></li><li><p> Debugger - Remote ARMLinux/Android debugger</p></li><li><p> hostname: localhost; Port: 11678; 勾选 Save network settings as default</p></li><li><p> frida 打印出目标 function 最终的地址, ida 中 g 到目标 function 地址, 查看是否是 thumb 指令集, 如果是 thumb 则 option + g, 将 T 修改为1, 再按 c;</p></li><li><p> File - Script file - 读取 ida trace 脚本, 需要更改目标 so 文件和 function 的起始地址和结束地址; 读取之后会出现断点; 快捷键: <code>option F7</code>; </p></li><li><p> frida 主动调用脚本, 检测断点是否触发</p></li><li><p> 断点检测正常后, ida 中执行 starthook()命令, 进行 hook 操作; 执行<code>suspend_other_thread()</code>挂起其他线程(可选择)</p></li><li><p> ida 中 Debugger - tracing - tracing options - 设置 Trace file 路径 和 取消 Trace over debugger segments 的勾选</p></li><li><p> ida 中 Debugger - tracing - 勾选 instruction tracing</p></li><li><p> frida 主动调用触发断点</p></li><li><p> ida 点击运行按钮进行执行, 此时 ida 中黄色部分为已经执行完的指令, 点击 Debugger -tracing - tracing window 可以看到当前执行进度;</p></li></ol><h1 id="ida-添加自有-python-路径"><a href="#ida-添加自有-python-路径" class="headerlink" title="ida 添加自有 python 路径"></a>ida 添加自有 python 路径</h1><p>修改路径下的文件 : /Applications/IDA Pro 7.0/ida.app/Contents/MacOS/python/init.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Prepare sys.path so loading of the shared objects works</span></span><br><span class="line">lib_dynload = os.path.join(</span><br><span class="line">    sys.executable,</span><br><span class="line">    IDAPYTHON_DYNLOAD_BASE,</span><br><span class="line">    <span class="string">&quot;python&quot;</span>, <span class="string">&quot;lib&quot;</span>, <span class="string">&quot;python2.7&quot;</span>, <span class="string">&quot;lib-dynload&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># added by kevin</span></span><br><span class="line">sys.path.insert(<span class="number">0</span>, <span class="string">&quot;/Users/zhangyang/anaconda3/envs/py2/lib/python2.7/site-packages&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="idapython-脚本调试"><a href="#idapython-脚本调试" class="headerlink" title="idapython 脚本调试"></a>idapython 脚本调试</h1><p>在 pycharm 中开启调试</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-06-03-040306.png"></p><p>在需要调试的脚本中添加断点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pydevd_pycharm</span><br><span class="line"></span><br><span class="line">pydevd_pycharm.settrace(<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">12345</span>, stdoutToServer=<span class="literal">True</span>, stderrToServer=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>在 idapython 的<code>__init__.py</code>文件中添加自有的 python 路径;</p><p>先在 pycharm 中打开调试监听, 在 ida 中运行要调试的脚本即可;</p><h1 id="jni-helper"><a href="#jni-helper" class="headerlink" title="jni_helper"></a>jni_helper</h1><ol><li> 进入目录 <code>~/androidFxxk/idaTools/jni_helper</code></li><li> <code>java -jar JadxFindJNI/JadxFindJNI.jar &lt;apk.path&gt; &lt;output.json&gt;</code></li><li> ida 中<code>Script File</code>运行 <code>jni_help</code>脚本, 路径 <code>~/androidFxxk/idaTools/jni_helper/ida/jni_helper.py</code></li><li> 导入刚才生成的 <code>output.json</code> 文件即可自动识别</li></ol>]]></content>
      
      
      <categories>
          
          <category> frida </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓NDK开发</title>
      <link href="ndk/"/>
      <url>ndk/</url>
      
        <content type="html"><![CDATA[<p>参考: <a href="https://developer.android.com/ndk/guides">https://developer.android.com/ndk/guides</a></p><h1 id="JNI-简述"><a href="#JNI-简述" class="headerlink" title="JNI 简述"></a>JNI 简述</h1><ul><li>JNI: Java Native Interface 的缩写, 通常翻译为 Java 本地接口;</li><li>从 Java1.1 开始, Java Native Interface 标准成为了 Java 平台的一部分, 它允许了 Java 代码和其他语言的代码进行交互; JNI 一开始是为了本地已编译的语言, 尤其是 C 和 C++设计的, 但是现在只要调用约定受支持的语言都可以使用;</li><li>JNI不是 Android 特有的, windowd, linux 等凡是有 JVM 的地方都支持 JNI; Android 的虚拟机 Dalvik/Art 都支持 JNI 标准; 通过 JNI, 就可以打通 Android 中 Java 世界和 Native 世界;</li></ul><h1 id="NDK-简述"><a href="#NDK-简述" class="headerlink" title="NDK 简述"></a>NDK 简述</h1><ul><li>NDK: Native Development Kit的缩写</li><li>NDK 是一系列工具的集合, 是一个开发套件, 帮助开发者快速开发以及调试 C/C++ 的动态库;</li><li>为了弥补 Java 容易被反编译的问题, 一些重要的逻辑和算法可以采用 C/C++ 甚至是汇编的形式编写, 再通过 NDK 的工具最终编译生成动态库, 再通过 JNI 来完成和 Dalvik/Art 虚拟机环境的 Java 代码的交互</li></ul><h1 id="ABI-和支持的指令集"><a href="#ABI-和支持的指令集" class="headerlink" title="ABI 和支持的指令集"></a>ABI 和支持的指令集</h1><p>使用 NDK 开发的 so 不再具有跨平台特性, 需要编译提供不同平台支持 ABI: Application Binary Interface</p><table><thead><tr><th>ABI</th><th>支持的指令集</th></tr></thead><tbody><tr><td>armeabi-v7a</td><td>armeabi, Thumb-2, VFPv3-D16</td></tr><tr><td>Arm64-v8a</td><td>AArch64</td></tr><tr><td>x86</td><td>x86, MMX, SSE/2/3, SSSE3</td></tr><tr><td>x86_64</td><td>x86, MMX, SSE/2/3, SSSE3, SSE4.1,SSE4.2,POPCNT</td></tr></tbody></table><h1 id="Java-反射"><a href="#Java-反射" class="headerlink" title="Java 反射"></a>Java 反射</h1><p>Java 反射定义:</p><ol><li>对于任意一个类, 都能够知道这个类的所有属性和方法</li><li>对于任意一个类的静态属性, 都能进行静态属性的获取和设置, 静态方法的调用</li><li>对于任意一个对象, 都能够进行对象的属性的获取和设置, 对象方法的调用</li></ol><h2 id="java-反射获取类"><a href="#java-反射获取类" class="headerlink" title="java 反射获取类"></a>java 反射获取类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 某个对象.class.getClassLoader().loadClass()</span></span><br><span class="line">Class TestClazz = MainActivity.class.getClassLoader().loadClass(<span class="string">&quot;com.kevin.reflection.Test&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Class.forName()</span></span><br><span class="line">Class TestClazz1 = Class.forName(<span class="string">&quot;com.kevin.reflection.Test&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="java-反射获取构造方法"><a href="#java-反射获取构造方法" class="headerlink" title="java 反射获取构造方法"></a>java 反射获取构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Class TestClazz = Class.forName(<span class="string">&quot;com.kevin.reflection.Test&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 获取无参构造方法</span></span><br><span class="line">Constructor constructor = TestClazz.getConstructor(<span class="keyword">null</span>);</span><br><span class="line">Test obj = (Test) constructor.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 获取指定参数为 String 的构造方法</span></span><br><span class="line">Constructor constructor1 = TestClazz.getConstructor(String.class);</span><br><span class="line">Test obj1 = (Test) constructor1.newInstance(<span class="string">&quot;测试字符串&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 获取私有的构造方法</span></span><br><span class="line">Constructor constructor2 = TestClazz.getDeclaredConstructor(<span class="keyword">char</span>.class);</span><br><span class="line"><span class="comment">// 暴力反射, 忽略所有访问修饰符</span></span><br><span class="line">constructor2.setAccessible(<span class="keyword">true</span>); </span><br><span class="line">Test obj2 = (Test) constructor2.newInstance(<span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="java-反射获取静态属性"><a href="#java-反射获取静态属性" class="headerlink" title="java 反射获取静态属性"></a>java 反射获取静态属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 public static 静态属性</span></span><br><span class="line">Class TestClazz = Class.forName(<span class="string">&quot;com.kevin.reflection.Test&quot;</span>);</span><br><span class="line">Field publicStaticField = TestClazz.getDeclaredField(<span class="string">&quot;publicStaticField&quot;</span>);</span><br><span class="line">String publicStaticFieldValue = publicStaticField.get(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 private static 静态属性</span></span><br><span class="line">Class TestClazz = Class.forName(<span class="string">&quot;com.kevin.reflection.Test&quot;</span>);</span><br><span class="line">Field privateStaticField = TestClazz.getDecalredField(<span class="string">&quot;privateStaticField&quot;</span>);</span><br><span class="line">privateStaticField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">String privateStaticFieldValue = privateStaticField.get(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h2 id="java-反射获取动态属性"><a href="#java-反射获取动态属性" class="headerlink" title="java 反射获取动态属性"></a>java 反射获取动态属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 public 动态属性</span></span><br><span class="line">Class TestClazz = Class.forName(<span class="string">&quot;com.kevin.reflectiontest.Test&quot;</span>); </span><br><span class="line">Constructor constructor = TestClazz.getConstructor();</span><br><span class="line">Test obj1 = (Test) constructor.newInstance();</span><br><span class="line">Field publicNonStaticField = TestClazz.getDeclaredField(<span class="string">&quot;publicNonStaticField&quot;</span>);</span><br><span class="line">String publicNoneStaticFieldValue = publicNonStaticField.get(obj1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 private 动态属性</span></span><br><span class="line">Class TestClazz = Class.forName(<span class="string">&quot;com.kevin.reflectiontest.Test&quot;</span>); </span><br><span class="line">Constructor constructor = TestClazz.getConstructor();</span><br><span class="line">Test obj1 = (Test) constructor.newInstance();</span><br><span class="line">Field privateNonStaticField = TestClazz.getDeclaredField(<span class="string">&quot;privateNonStaticField&quot;</span>);</span><br><span class="line">privateNoneStaticField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">String privateNonStaticFieldValue = privateNonStaticField.get(obj1);</span><br></pre></td></tr></table></figure><h2 id="java-反射获取并调用方法"><a href="#java-反射获取并调用方法" class="headerlink" title="java 反射获取并调用方法"></a>java 反射获取并调用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取并调用非静态方法</span></span><br><span class="line">Class TestClazz = Class.forName(<span class="string">&quot;com.kevin.reflectiontest.Test&quot;</span>);</span><br><span class="line">Constructor constructor = TestClazz.getConstructor();</span><br><span class="line">Test obj = (Test) constructor.newInstance();</span><br><span class="line">Method method = TestClazz.getDeclaredMethod(<span class="string">&quot;privateNonStaticFunc&quot;</span>, String.class);</span><br><span class="line">method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">method.invoke(obj, <span class="string">&quot;string as arg&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取并调用静态方法</span></span><br><span class="line">Class TestClazz = Class.forName(<span class="string">&quot;com.kevin.reflectiontest.Test&quot;</span>);</span><br><span class="line">Method method = TestClazz.getDeclaredMethod(<span class="string">&quot;privateStaticFunc&quot;</span>);</span><br><span class="line">method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">method.invoke(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h2 id="java-反射案例"><a href="#java-反射案例" class="headerlink" title="java 反射案例"></a>java 反射案例</h2><p>自定义类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kevin.reflectiontest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;kevinTest&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String flag = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String publicStaticField = <span class="string">&quot;i am a public static field&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> String publicNonStaticField = <span class="string">&quot;i am a public non static field&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String privateStaticField = <span class="string">&quot;i am a private static field&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String privateNonStaticField = <span class="string">&quot;i am a private non static field&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        flag = <span class="string">&quot;Test()&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(String arg)</span></span>&#123;</span><br><span class="line">        flag = <span class="string">&quot;Test(String arg)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(String arg, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        flag = <span class="string">&quot;Test(String arg, int num)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">publicStaticFunc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;public Static Func: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publicNonStaticFunc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;public Non Static Func: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">privateStaticFunc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;private Static Func: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">privateNonStaticFunc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;private Non Static Func: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">privateNonStaticFunc</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;private Non Static Func: arg is String : &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反射代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kevin.reflectiontest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.RequiresApi;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Build;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;kevinTest MainActivity&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Used to load the &#x27;native-lib&#x27; library on application startup.</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;native-lib&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiresApi(api = Build.VERSION_CODES.KITKAT)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Example of a call to a native method</span></span><br><span class="line">        TextView tv = findViewById(R.id.sample_text);</span><br><span class="line">        tv.setText(stringFromJNI());</span><br><span class="line"></span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reflection</span></span><br><span class="line">    <span class="meta">@RequiresApi(api = Build.VERSION_CODES.KITKAT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// get class</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 通过 class.getClassLoader().loadClass()加载</span></span><br><span class="line">            Class TestClazz = MainActivity.class.getClassLoader().loadClass(<span class="string">&quot;com.kevin.reflectiontest.Test&quot;</span>);</span><br><span class="line"><span class="comment">// 使用 Class.forname()显示加载</span></span><br><span class="line">            Class TestClazz1 = Class.forName(<span class="string">&quot;com.kevin.reflectiontest.Test&quot;</span>); </span><br><span class="line"><span class="comment">// 在同一个 classloader 中, 可以直接获取</span></span><br><span class="line">            Class TestCLazz2 = Test.class; </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// constructor filed method</span></span><br><span class="line">        Class TestClazz = Test.class;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取重载的构造函数 并 创建实例</span></span><br><span class="line">            Constructor constructor = TestClazz.getConstructor();</span><br><span class="line">            Test obj1 = (Test) constructor.newInstance();</span><br><span class="line">            Constructor constructor1 = TestClazz.getConstructor(String.class);</span><br><span class="line">            Test obj2 = (Test) constructor1.newInstance(<span class="string">&quot;String arg&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Constructor constructor2 = TestClazz.getConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">            Test obj3 = (Test) constructor2.newInstance(<span class="string">&quot;String arg&quot;</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">            Constructor[] constructors= TestClazz.getDeclaredConstructors();</span><br><span class="line">            <span class="keyword">for</span> (Constructor each : constructors) &#123;</span><br><span class="line">                Log.i(TAG, <span class="string">&quot;test: getDeclaredConstructors :&quot;</span> + each);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// get public static filed</span></span><br><span class="line">            Field publicStaticField = TestClazz.getDeclaredField(<span class="string">&quot;publicStaticField&quot;</span>);</span><br><span class="line">            Log.i(TAG, <span class="string">&quot;test: getDecalredField() publicStaticFiled is &quot;</span> + publicStaticField);</span><br><span class="line">            <span class="comment">// use Field to get static field value</span></span><br><span class="line">            String publicStaticFieldValue = (String) publicStaticField.get(<span class="keyword">null</span>);</span><br><span class="line">            Log.i(TAG, <span class="string">&quot;test: publicStaticFieldValue is &quot;</span> + publicStaticFieldValue);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// get private static field</span></span><br><span class="line">            Field privateStaticField = TestClazz.getDeclaredField(<span class="string">&quot;privateStaticField&quot;</span>);</span><br><span class="line">            Log.i(TAG, <span class="string">&quot;test: getDecalredField() privateStaticField is &quot;</span> + privateStaticField);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// get value from private static filed</span></span><br><span class="line">            privateStaticField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            String privateStaticFieldValue = (String) privateStaticField.get(<span class="keyword">null</span>);</span><br><span class="line">            Log.i(TAG, <span class="string">&quot;test: get private static field value is:&quot;</span> + privateStaticFieldValue);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// get public non static value from obj</span></span><br><span class="line">            Field privateNonStaticField = TestClazz.getDeclaredField(<span class="string">&quot;privateNonStaticField&quot;</span>);</span><br><span class="line">            privateNonStaticField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            String privateNonStaticFieldValue = (String) privateNonStaticField.get(obj1);</span><br><span class="line">            Log.i(TAG, <span class="string">&quot;test: get private non static field value is :&quot;</span> + privateNonStaticFieldValue);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// get public filed from obj</span></span><br><span class="line">            Field flag = TestClazz.getDeclaredField(<span class="string">&quot;flag&quot;</span>);</span><br><span class="line">            String value = (String) flag.get(obj1);</span><br><span class="line">            Log.i(TAG, <span class="string">&quot;test: flag value is :&quot;</span> + value);</span><br><span class="line"></span><br><span class="line">            String value1 = (String) flag.get(obj2);</span><br><span class="line">            Log.i(TAG, <span class="string">&quot;test: flag1 value is :&quot;</span> + value1);</span><br><span class="line"></span><br><span class="line">            String value2 = (String) flag.get(obj3);</span><br><span class="line">            Log.i(TAG, <span class="string">&quot;test: flag2 value is :&quot;</span> + value2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// get fields use getDecalredFields() 可以获取所有属性 包含 public 和 private</span></span><br><span class="line">            Field[] fields = TestClazz.getDeclaredFields();</span><br><span class="line">            <span class="keyword">for</span> (Field each : fields)&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;onCreate: getDecalredFields() is :&quot;</span> + each);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// get fields use getFields() 只能获取 public 属性</span></span><br><span class="line">            Field[] fields1 = TestClazz.getFields();</span><br><span class="line">            <span class="keyword">for</span> (Field each : fields1) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;onCreate: getFields() is :&quot;</span> + each);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// get method</span></span><br><span class="line">            <span class="comment">// get methods</span></span><br><span class="line">            Method[] methods = TestClazz.getMethods();</span><br><span class="line">            <span class="keyword">for</span> (Method each : methods) &#123;</span><br><span class="line">                Log.i(TAG, <span class="string">&quot;test: getMethods() is &quot;</span> + each);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Method[] methods1 = TestClazz.getDeclaredMethods();</span><br><span class="line">            <span class="keyword">for</span> (Method each : methods1) &#123;</span><br><span class="line">                Log.i(TAG, <span class="string">&quot;test: getDecalredMethods() is &quot;</span> + each);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// getDecalredMethod() // invoke non static method</span></span><br><span class="line">            Method method = TestClazz.getDeclaredMethod(<span class="string">&quot;privateNonStaticFunc&quot;</span>, String.class);</span><br><span class="line">            method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            method.invoke(obj1, <span class="string">&quot;string as arg&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// invoke static method</span></span><br><span class="line">            Method method1 = TestClazz.getDeclaredMethod(<span class="string">&quot;privateStaticFunc&quot;</span>);</span><br><span class="line">            method1.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            method1.invoke(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException | IllegalAccessException | InstantiationException | NoSuchMethodException | InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">stringFromJNI</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Native-方法的标识"><a href="#Native-方法的标识" class="headerlink" title="Native 方法的标识"></a>Native 方法的标识</h1><ul><li>Native 方法在代码中含有 <code>native</code> 关键字修饰</li><li>Native 方法在 Java 中会有静态代码块, 使用了 <code>System.loadLibrary</code> 加载一个 <code>native-lib</code> 的 so 文件</li></ul><h1 id="Jni-函数定义和参数解析"><a href="#Jni-函数定义和参数解析" class="headerlink" title="Jni 函数定义和参数解析"></a>Jni 函数定义和参数解析</h1><ol><li><p><code>JNIEXPORT</code>: 是一个宏, 等价于<code>_ _attribute_ _((visibility (&quot;default&quot;)))</code> , 表示当前函数符号需要导出, 与之对应为<code>hidden</code>隐藏符号信息;</p></li><li><p>```<br>extern “C”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">: 按照 C 函数进行编译, 不使用</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>name mangling</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">; 因为 C++支持重载, C++类中的函数会使用</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>name mangling</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   1. 未使用 &#96;extern &quot;C&quot;&#96;, &#96;add&#96; 方法被导出为 &#96;_Z3addii&#96;; 还原 &#96;name mangling&#96;可以使用命令: &#96;c++flit -n _Z3addii&#96; 进行还原;</span><br><span class="line">   2. 使用了&#96;extern &quot;C&quot;&#96;, &#96;add1&#96; 方法被导出为 &#96;add1&#96;;</span><br><span class="line"></span><br><span class="line">3. &#96;JNICALL&#96; : 空宏, 目前无实际意义可以删除;</span><br><span class="line"></span><br><span class="line">4. &#96;&#96;&#96;</span><br><span class="line">   JNI</span><br></pre></td></tr></table></figure><p>函数的参数:</p><ol><li><code>JNIEnv* env</code> : 一个<code>JNIEnv</code>类型的指针, 所有<code>JNI</code>函数的第一个参数都是<code>env</code>;</li><li><code>jclass</code> or <code>jobject</code>: 当方法为 <code>static</code>时, 第二个参数为 <code>jclass</code> , 当方法为非<code>static</code>时, 第二个参数为 <code>jobject</code>;</li><li>从第三个参数开始, 才是该函数真正的参数;</li></ol></li><li><p>静态注册的<code>JNI</code>方法命名遵循格式为: <code>Java_包名_类名_方法名</code> , 以<code>Java</code>开头, 用<code>_</code>进行分割</p></li></ol><h1 id="Native-打印-log-日志"><a href="#Native-打印-log-日志" class="headerlink" title="Native 打印 log 日志"></a>Native 打印 log 日志</h1><ol><li>在 C++代码中引入头文件; <code>#include &lt;android/log.h&gt;</code></li><li><code>__android_log_print(ANDROID_LOG_INFO, &quot;kevinTest&quot;, &quot;result is %d&quot;, result);</code></li></ol><h1 id="C-中导入其他-C文件"><a href="#C-中导入其他-C文件" class="headerlink" title="C++ 中导入其他 C文件"></a>C++ 中导入其他 C文件</h1><ol><li><p>在 cpp 目录下创建头文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testc.h</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NDKDEMO01_TESTC_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NDKDEMO01_TESTC_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//NDKDEMO01_TESTC_H</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add_c</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>在 cpp 目录下创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testc.c</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;testc.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add_c</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a +b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 cpp 目录下的 <code>CMakeLists.txt</code> 中的 <code>add_library</code> 添加 <code>testc.c</code></p></li><li><p>在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">native-lib.cpp</span><br></pre></td></tr></table></figure><p>文件中就可以直接使用导入的方法了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;testc.h&quot;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_kevin_ndkdemo01_MainActivity_myStaticJni</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    JNIEnv* env,</span></span></span><br><span class="line"><span class="function"><span class="params">    jclass)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = add_c(<span class="number">4</span>, <span class="number">6</span>);</span><br><span class="line">__android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;kevinTest&quot;</span>, <span class="string">&quot;result is %d&quot;</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="JNI-和-Java-和-C-C-基础数据类型映射"><a href="#JNI-和-Java-和-C-C-基础数据类型映射" class="headerlink" title="JNI 和 Java 和 C/C++ 基础数据类型映射"></a>JNI 和 Java 和 C/C++ 基础数据类型映射</h1><h2 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h2><table><thead><tr><th>Java</th><th>C/C++</th><th>JNI</th><th>描述</th></tr></thead><tbody><tr><td>int</td><td>long</td><td>jint</td><td>signed 32bit</td></tr><tr><td>long</td><td>_int64</td><td>jlong</td><td>signed 64 bit</td></tr><tr><td>byte</td><td>signed char</td><td>jbyte</td><td>signed 8bit</td></tr><tr><td>boolean</td><td>unsigned char</td><td>jboolean</td><td>unsigned 8bit</td></tr><tr><td>char</td><td>unsigned short</td><td>jchar</td><td>unsigned 16bit</td></tr><tr><td>short</td><td>short</td><td>jshort</td><td>signed 16bit</td></tr><tr><td>float</td><td>float</td><td>jfloat</td><td>32 bit</td></tr><tr><td>double</td><td>double</td><td>jdouble</td><td>64 bit</td></tr><tr><td>void</td><td>void</td><td>void</td><td>N/A</td></tr></tbody></table><h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><table><thead><tr><th>Java</th><th>JNI</th></tr></thead><tbody><tr><td>java.lang.Object</td><td>jobject</td></tr><tr><td>java.lang.Class</td><td>jclass</td></tr><tr><td>java.lang.reflect.Field</td><td>jfieldID</td></tr><tr><td>java.lang.reflect.Method</td><td>jmethodID</td></tr><tr><td>java.lang.String</td><td>jstring</td></tr><tr><td>java.lang.Throwable</td><td>jthrowable</td></tr></tbody></table><h2 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h2><table><thead><tr><th>Java</th><th>JNI</th></tr></thead><tbody><tr><td>int[]</td><td>jintArray</td></tr><tr><td>byte[]</td><td>jbyteArray</td></tr><tr><td>short[]</td><td>jshortArray</td></tr><tr><td>long[]</td><td>jlongArray</td></tr><tr><td>float[]</td><td>jfloatArray</td></tr><tr><td>double[]</td><td>jdoubleArray</td></tr><tr><td>char[]</td><td>jcharArray</td></tr><tr><td>boolean[]</td><td>jbooleanArray</td></tr><tr><td>Object[] 引用类型的数组</td><td>jobjectArray</td></tr></tbody></table><h2 id="访问-String-对象"><a href="#访问-String-对象" class="headerlink" title="访问 String 对象"></a>访问 String 对象</h2><p>从 <code>java</code> 中传入的 <code>String</code> 对象在本地方法中对应的是 <code>jstring</code> 类型, <code>jstring</code>类型和 c 中的 char* 不同, 无法直接使用;</p><p>常用的方法:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 String 对象</span></span><br><span class="line">jstring NewString(const jchar* unicodeChars, jsize len): 创建一个 Unicode 格式的 String 对象</span><br><span class="line">jstring NewStringUTF(const char* bytes): 创建一个 UTF-8 格式的 String 对象</span><br><span class="line"></span><br><span class="line"><span class="comment">// String 对象转 char*</span></span><br><span class="line">const jchar* GetStringChars(jstring string, jboolean* isCopy): 将 string 对象转换成 Unicode 格式的 char* </span><br><span class="line">const char* GetStringUTFChars(jstring string, jboolean* isCopy): 将 string 对象转换成 UTF-8 类型</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放 char* 指针</span></span><br><span class="line">void ReleaseStringChars(jstring string, const jchar* chars) : 释放指向 Unicode 格式的 char* 指针</span><br><span class="line">void ReleaseStringUTFChars(jstring string, const char* utf): 释放指向 UTF-8 格式的 char*指针</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 string 长度</span></span><br><span class="line">jsize GetStringUTFLength(jstring string): 获取 string 对应 UTF-8 的 char*长度</span><br><span class="line">jsize GetStringLength(jstring string): 获取 string 对应 Unicode 格式的 char* 长度</span><br></pre></td></tr></table></figure><p>代码示例:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 java 的 string 类型转为 native 的 char* 互转</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> JNIEXPORT jstring JNICALL</span><br><span class="line">Java_com_kevin_ndkdemo01_MainActivity_getStringToChar(JNIEnv *env, jobject, jstring inputStr)&#123;</span><br><span class="line">    <span class="comment">// string 转 char*</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* nativeChar = (env-&gt;GetStringUTFChars(inputStr, <span class="literal">nullptr</span>));</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;kevinTest&quot;</span>, <span class="string">&quot;string from java is %s&quot;</span>, nativeChar);</span><br><span class="line">    env-&gt;ReleaseStringUTFChars(inputStr, nativeChar);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// char* 转 string</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *fromNativeChar = <span class="string">&quot;char* from native&quot;</span>;</span><br><span class="line">    jstring result = env-&gt;NewStringUTF(fromNativeChar);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>env.GetStringUTFChars(jstring string, jboolean* isCopy)</code> 将传入的 jstring 转换成 UTF-8 的格式, 这样就可以在 C/C++中使用了</li><li><code>env.ReleaseStringUTFChars(jstring string, const char* utf)</code> 在使用完你所转换之后的对象之后，需要显示调用ReleaseStringUTFChars方法，让JVM释放转换成UTF-8的string的对象的空间，如果不显示的调用的话，JVM中会一直保存该对象，不会被垃圾回收器回收，因此就会导致内存溢出</li></ul><h2 id="访问-Array-对象"><a href="#访问-Array-对象" class="headerlink" title="访问 Array 对象"></a>访问 Array 对象</h2><p>和 String 对象一样, 在 c/c++中不能直接访问 jarray 对象, 需要使用 JNIEnv 指针指向的一些方法进行转换;</p><p>常用方法:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取数组长度</span></span><br><span class="line">jsize GetArrayLength(jarray array) : 获取数组的长度</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组对应的指针</span></span><br><span class="line">jboolean* GetBooleanArrayElements(jbooleanArray array, jboolean* isCopy): 获取 boolean 数组指针</span><br><span class="line"></span><br><span class="line">jbyte* GetByteArrayElements(jbyteArray array, jboolean* isCopy): 获取 byte 数组指针</span><br><span class="line"></span><br><span class="line">jchar* GetCharArrayElements(jcharArray array, jboolean* isCopy): 获取 char 数组指针</span><br><span class="line"></span><br><span class="line">jshort* GetShortArrayElements(jshortArray array, jboolean* isCopy): 获取 short 数组指针</span><br><span class="line"></span><br><span class="line">jint* GetIntArrayElements(jintArray array, jboolean* isCopy): 获取 int 数组指针</span><br><span class="line"></span><br><span class="line">jlong* GetLongArrayElements(jlongArray array, jboolean* isCopy): 获取 long 数组指针</span><br><span class="line"></span><br><span class="line">jfloat* GetFloatArrayElements(jfloatArray array, jboolean* isCopy): 获取 float 数组指针</span><br><span class="line"></span><br><span class="line">jdouble* GetDoubleArrayElements(jdoubleArray array, jboolean* isCopy): 获取 double 数组指针</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历数组</span></span><br><span class="line">jint sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">    sum += arrayptr[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放数组指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReleaseBooleanArrayElements</span><span class="params">(jbooleanArray <span class="built_in">array</span>, jboolean* elems,</span></span></span><br><span class="line">    jint mode):  释放 boolean 数组指针</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReleaseByteArrayElements</span><span class="params">(jbyteArray <span class="built_in">array</span>, jbyte* elems,</span></span></span><br><span class="line">    jint mode): 释放 byte 数组指针</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReleaseCharArrayElements</span><span class="params">(jcharArray <span class="built_in">array</span>, jchar* elems,</span></span></span><br><span class="line">    jint mode): 释放 char 数组指针</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReleaseShortArrayElements</span><span class="params">(jshortArray <span class="built_in">array</span>, jshort* elems,</span></span></span><br><span class="line">    jint mode): 释放 short 数组指针</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReleaseIntArrayElements</span><span class="params">(jintArray <span class="built_in">array</span>, jint* elems,</span></span></span><br><span class="line">    jint mode): 释放 int 数组指针</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReleaseLongArrayElements</span><span class="params">(jlongArray <span class="built_in">array</span>, jlong* elems,</span></span></span><br><span class="line">    jint mode): 释放 long 数组指针</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReleaseFloatArrayElements</span><span class="params">(jfloatArray <span class="built_in">array</span>, jfloat* elems,</span></span></span><br><span class="line">    jint mode): 释放 float 数组指针</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReleaseDoubleArrayElements</span><span class="params">(jdoubleArray <span class="built_in">array</span>, jdouble* elems,</span></span></span><br><span class="line">    jint mode): 释放 double 数组指针</span><br></pre></td></tr></table></figure><p>代码示例:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// native 使用 java 的 bytes array</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_kevin_ndkdemo01_MainActivity_getByteArray(JNIEnv *env, jobject, jintArray inputIntArray)&#123;</span><br><span class="line">    <span class="comment">// 获取数组长度</span></span><br><span class="line">    jint length = env-&gt;GetArrayLength(inputIntArray);</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;kevinTest&quot;</span>, <span class="string">&quot;native 数组长度为 %d&quot;</span>, length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数组元素的指针</span></span><br><span class="line">    jint* arrayptr = env-&gt;GetIntArrayElements(inputIntArray, <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据指针和索引获取数组中的对应值</span></span><br><span class="line">    jint sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">        sum += arrayptr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;kevinTest&quot;</span>, <span class="string">&quot;native sum is: %d&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放数组指针</span></span><br><span class="line">    env-&gt;ReleaseIntArrayElements(inputIntArray, arrayptr, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="访问自定义-Java-对象数组"><a href="#访问自定义-Java-对象数组" class="headerlink" title="访问自定义 Java 对象数组"></a>访问自定义 Java 对象数组</h2><p>JNI 提供了两个单独的方法来访问对象数组的元素, 通过这两个方法可以获取和设置单个对象数组的元素;<br>JNI 无法一次获取到对象数组的所有元素</p><p>常用方法:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jobject GetObjectArrayElement(jobjectArray array, jsize index): 获取 java 对象数组中指定索引位置的值</span><br><span class="line"></span><br><span class="line">void SetObjectArrayElement(jobjectArray array, jsize index, jobject value): 设置 java 对象数组中指定索引位置的值</span><br></pre></td></tr></table></figure><p>代码示例:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// native 使用 java 的 对象数组</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_kevin_ndkdemo01_MainActivity_getStringArray(JNIEnv *env, jobject, jobjectArray inputStringArray)&#123;</span><br><span class="line">    jstring str1 = (jstring) env-&gt;GetObjectArrayElement(inputStringArray, <span class="number">0</span>);</span><br><span class="line">    jstring str2 = (jstring) env-&gt;GetObjectArrayElement(inputStringArray, <span class="number">1</span>);</span><br><span class="line">    jstring str3 = (jstring) env-&gt;GetObjectArrayElement(inputStringArray, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *char1 = env-&gt;GetStringUTFChars(str1, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *char2 = env-&gt;GetStringUTFChars(str2, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *char3 = env-&gt;GetStringUTFChars(str3, <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;kevinTest&quot;</span>, <span class="string">&quot;native inputStringArray is : %s %s %s&quot;</span>,</span><br><span class="line">                        char1, char2, char3);</span><br><span class="line"></span><br><span class="line">    env-&gt;ReleaseStringUTFChars(str1, char1);</span><br><span class="line">    env-&gt;ReleaseStringUTFChars(str2, char2);</span><br><span class="line">    env-&gt;ReleaseStringUTFChars(str3, char3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="描述符"><a href="#描述符" class="headerlink" title="描述符"></a>描述符</h1><h2 id="类描述符"><a href="#类描述符" class="headerlink" title="类描述符"></a>类描述符</h2><ul><li>类描述符是类的完整名称(包名+类名), 在 jni 中, 需要将原来的<code>.</code> 分隔符替换成 <code>/</code> 分隔符;</li><li>类描述符常用于 <code>env.FindClass()</code>, 获取 <code>jclass</code> 的时候使用</li></ul><h2 id="域描述符"><a href="#域描述符" class="headerlink" title="域描述符"></a>域描述符</h2><h3 id="基本数据类型域描述符"><a href="#基本数据类型域描述符" class="headerlink" title="基本数据类型域描述符"></a>基本数据类型域描述符</h3><table><thead><tr><th>域描述符</th><th>java 基础数据类型</th></tr></thead><tbody><tr><td>Z</td><td>boolean</td></tr><tr><td>B</td><td>byte</td></tr><tr><td>C</td><td>char</td></tr><tr><td>S</td><td>short</td></tr><tr><td>I</td><td>int</td></tr><tr><td>J</td><td>long</td></tr><tr><td>F</td><td>float</td></tr><tr><td>D</td><td>double</td></tr><tr><td>V</td><td>void</td></tr></tbody></table><h3 id="引用数据类型域描述符"><a href="#引用数据类型域描述符" class="headerlink" title="引用数据类型域描述符"></a>引用数据类型域描述符</h3><p>格式为: <code>L + 该类型的类描述符 + ;</code><br>String 类型的域描述符: <code>&quot;Ljava/lang/String;&quot;</code><br>Object 类型的域描述符: <code>&quot;Ljava/lang/Object;&quot;</code></p><h2 id="函数描述符"><a href="#函数描述符" class="headerlink" title="函数描述符"></a>函数描述符</h2><p>格式为: <code>(参数的域描述符叠加)返回值的域描述符</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String test()&#96; 函数描述符为: &#96;&quot;Ljava&#x2F;lang&#x2F;String&quot;&#96;</span><br><span class="line">&#96;int f(int i, Object object)&#96; 函数描述符为: &#96;&quot;(ILjava&#x2F;lang&#x2F;Object;)I&quot;&#96;</span><br><span class="line">&#96;void set(byte[] bytes)&#96; : 函数描述符为: &#96;&quot;([B)V&quot;</span><br></pre></td></tr></table></figure><h2 id="数组描述符"><a href="#数组描述符" class="headerlink" title="数组描述符"></a>数组描述符</h2><p>格式为: <code>[ + 其他类型的域描述符</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int[]&#96; 描述符为: &#96;[I&#96;</span><br><span class="line">&#96;float[]&#96; 描述符为: &#96;[F&#96;</span><br><span class="line">&#96;String[]&#96; 描述符为: &#96;[Ljava&#x2F;lang&#x2F;String;</span><br></pre></td></tr></table></figure><p>多维数组类型的描述符格式为: <code>n 个 [ + 该类型的域描述符</code><br><code>int[][]</code> 描述符为: <code>[[I</code><br><code>float[][]</code> 描述符为: <code>[[F</code></p><h1 id="JNI-获取-Java-层"><a href="#JNI-获取-Java-层" class="headerlink" title="JNI 获取 Java 层"></a>JNI 获取 Java 层</h1><h2 id="JNI-获取-Java-类"><a href="#JNI-获取-Java-类" class="headerlink" title="JNI 获取 Java 类"></a>JNI 获取 Java 类</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jnienv 获取 java 类</span></span><br><span class="line">jclass TestClass = env-&gt;FindClass(<span class="string">&quot;com/kevin/ndkdemo01/Test&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// jnienv 通过 java 层传入的对象获取该对象的类</span></span><br><span class="line">jclass TestClass = env-&gt;GetObjectClass(obj); <span class="comment">// obj 为 java 层传入的 Test 对象</span></span><br></pre></td></tr></table></figure><p><code>env.FindClass()</code> 传入的参数为: 对应的 java 类的路径, java 中用<code>.</code> 分割, <code>jni</code> 中使用 <code>/</code> 分割; <code>com/kevin/ndkdemo01/Test</code> 是类描述符, 常在 jni 层查找 java 层对应的类时使用;</p><h2 id="JNI-获取-Java-层属性"><a href="#JNI-获取-Java-层属性" class="headerlink" title="JNI 获取 Java 层属性"></a>JNI 获取 Java 层属性</h2><p>获取 java 层属性常用 API</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取静态属性的 FieldID</span></span><br><span class="line"><span class="function">jfieldID <span class="title">GetStaticFieldID</span><span class="params">(jclass clazz, <span class="keyword">const</span> <span class="keyword">char</span>* name, <span class="keyword">const</span> <span class="keyword">char</span>* sig)</span></span></span><br><span class="line"><span class="function"><span class="comment">// clazz : 对应的 jclass</span></span></span><br><span class="line"><span class="function"><span class="comment">// name: 该属性名称</span></span></span><br><span class="line"><span class="function"><span class="comment">// sig: 该属性的域描述符</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取非静态属性的 FieldID</span></span></span><br><span class="line"><span class="function">jfieldID <span class="title">GetFieldID</span><span class="params">(jclass clazz, <span class="keyword">const</span> <span class="keyword">char</span>* name, <span class="keyword">const</span> <span class="keyword">char</span>* sig)</span></span></span><br><span class="line"><span class="function"><span class="comment">// clazz: 对应的 jclass </span></span></span><br><span class="line"><span class="function"><span class="comment">// name: 该属性的名称</span></span></span><br><span class="line"><span class="function"><span class="comment">// sig: 该属性的域描述符</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取非静态属性对应的值</span></span></span><br><span class="line"><span class="function">jobject <span class="title">GetObjectField</span><span class="params">(jobject obj, jfieldID fieldID)</span></span></span><br><span class="line"><span class="function">jboolean <span class="title">GetBooleanField</span><span class="params">(jobject obj, jfieldID fieldID)</span></span></span><br><span class="line"><span class="function">jbyte <span class="title">GetByteField</span><span class="params">(jobject obj, jfieldID fieldID)</span></span></span><br><span class="line"><span class="function">jchar <span class="title">GetCharField</span><span class="params">(jobject obj, jfieldID fieldID)</span></span></span><br><span class="line"><span class="function">jshort <span class="title">GetShortField</span><span class="params">(jobject obj, jfieldID fieldID)</span></span></span><br><span class="line"><span class="function">jint <span class="title">GetIntField</span><span class="params">(jobject obj, jfieldID fieldID)</span></span></span><br><span class="line"><span class="function">jlong <span class="title">GetLongField</span><span class="params">(jobject obj, jfieldID fieldID)</span></span></span><br><span class="line"><span class="function">jfloat <span class="title">GetFloatField</span><span class="params">(jobject obj, jfieldID fieldID)</span></span></span><br><span class="line"><span class="function">jdouble <span class="title">GetDoubleField</span><span class="params">(jobject obj, jfieldID fieldID)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取类的静态属性对应的值</span></span></span><br><span class="line"><span class="function">jobject <span class="title">GetStaticObjectField</span><span class="params">(jclass clazz, jfieldID fieldID)</span></span></span><br><span class="line"><span class="function">jboolean <span class="title">GetStaticBooleanField</span><span class="params">(jclass clazz, jfieldID fieldID)</span></span></span><br><span class="line"><span class="function">jbyte <span class="title">GetStaticByteField</span><span class="params">(jclass clazz, jfieldID fieldID)</span></span></span><br><span class="line"><span class="function">jchar <span class="title">GetStaticCharField</span><span class="params">(jclass clazz, jfieldID fieldID)</span></span></span><br><span class="line"><span class="function">jshort <span class="title">GetStaticShortField</span><span class="params">(jclass clazz, jfieldID fieldID)</span></span></span><br><span class="line"><span class="function">jint <span class="title">GetStaticIntField</span><span class="params">(jclass clazz, jfieldID fieldID)</span></span></span><br><span class="line"><span class="function">jlong <span class="title">GetStaticLongField</span><span class="params">(jclass clazz, jfieldID fieldID)</span></span></span><br><span class="line"><span class="function">jfloat <span class="title">GetStaticFloatField</span><span class="params">(jclass clazz, jfieldID fieldID)</span></span></span><br><span class="line"><span class="function">jdouble <span class="title">GetStaticDoubleField</span><span class="params">(jclass clazz, jfieldID fieldID)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置非静态属性对应的值</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetObjectField</span><span class="params">(jobject obj, jfieldID fieldID, jobject value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetBooleanField</span><span class="params">(jobject obj, jfieldID fieldID, jboolean value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetByteField</span><span class="params">(jobject obj, jfieldID fieldID, jbyte value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetCharField</span><span class="params">(jobject obj, jfieldID fieldID, jchar value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetShortField</span><span class="params">(jobject obj, jfieldID fieldID, jshort value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetIntField</span><span class="params">(jobject obj, jfieldID fieldID, jint value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetLongField</span><span class="params">(jobject obj, jfieldID fieldID, jlong value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetFloatField</span><span class="params">(jobject obj, jfieldID fieldID, jfloat value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetDoubleField</span><span class="params">(jobject obj, jfieldID fieldID, jdouble value)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置静态属性对应的值</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetStaticObjectField</span><span class="params">(jclass clazz, jfieldID fieldID, jobject value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetStaticBooleanField</span><span class="params">(jclass clazz, jfieldID fieldID, jboolean value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetStaticByteField</span><span class="params">(jclass clazz, jfieldID fieldID, jbyte value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetStaticCharField</span><span class="params">(jclass clazz, jfieldID fieldID, jchar value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetStaticShortField</span><span class="params">(jclass clazz, jfieldID fieldID, jshort value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetStaticIntField</span><span class="params">(jclass clazz, jfieldID fieldID, jint value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetStaticLongField</span><span class="params">(jclass clazz, jfieldID fieldID, jlong value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetStaticFloatField</span><span class="params">(jclass clazz, jfieldID fieldID, jfloat value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetStaticDoubleField</span><span class="params">(jclass clazz, jfieldID fieldID, jdouble value)</span></span></span><br></pre></td></tr></table></figure><p>JNI 获取类的静态属性</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_kevin_ndkdemo01_MainActivity_jniGetJava(JNIEnv *env, jobject) &#123;</span><br><span class="line">    <span class="comment">// jnienv 获取 java 类</span></span><br><span class="line">    jclass TestClass = env-&gt;FindClass(<span class="string">&quot;com/kevin/ndkdemo01/Test&quot;</span>);</span><br><span class="line">    <span class="comment">// jnienv 获取 java 类的静态属性</span></span><br><span class="line">    jfieldID publicStaticField_filedid = env-&gt;GetStaticFieldID(TestClass, <span class="string">&quot;publicStaticField&quot;</span>, <span class="string">&quot;Ljava/lang/String;&quot;</span>);</span><br><span class="line">    jstring publicStaticFiled_value = (jstring)env-&gt;GetStaticObjectField(TestClass, publicStaticField_filedid);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* native_publicStaticFiled_value = env-&gt;GetStringUTFChars(publicStaticFiled_value, <span class="literal">nullptr</span>);</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;kevinTest&quot;</span>, <span class="string">&quot;native publicStaticFiled value is %s&quot;</span>,</span><br><span class="line">                        native_publicStaticFiled_value);</span><br><span class="line">    env-&gt;ReleaseStringUTFChars(publicStaticFiled_value, native_publicStaticFiled_value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JNI 获取对象的属性</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jni 获取 java 对象的属性</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_kevin_ndkdemo01_MainActivity_jniGetJavaObjFiled(JNIEnv *env, jobject, jobject testObj) &#123;</span><br><span class="line">    <span class="comment">// env 获取类</span></span><br><span class="line">    jclass TestClass = env-&gt;FindClass(<span class="string">&quot;com/kevin/ndkdemo01/Test&quot;</span>);</span><br><span class="line">    jfieldID publicNonStaticFiledId = env-&gt;GetFieldID(TestClass, <span class="string">&quot;publicNonStaticField&quot;</span>, <span class="string">&quot;Ljava/lang/String;&quot;</span>);</span><br><span class="line">    jstring publicNonStaticFieldValue = (jstring) env-&gt;GetObjectField(testObj, publicNonStaticFiledId);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *nativeChar = env-&gt;GetStringUTFChars(publicNonStaticFieldValue, <span class="literal">nullptr</span>);</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;kevinTest&quot;</span>, <span class="string">&quot;native public NonStatic Field value is %s&quot;</span>,</span><br><span class="line">                        nativeChar);</span><br><span class="line">    env-&gt;ReleaseStringUTFChars(publicNonStaticFieldValue, nativeChar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JNI-获取-Java-层方法"><a href="#JNI-获取-Java-层方法" class="headerlink" title="JNI 获取 Java 层方法"></a>JNI 获取 Java 层方法</h2><p>获取 java 层方法常用 API</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 java 类的静态方法</span></span><br><span class="line"><span class="function">jmethodID <span class="title">GetStaticMethodID</span><span class="params">(jclass clazz, <span class="keyword">const</span> <span class="keyword">char</span>* name, <span class="keyword">const</span> <span class="keyword">char</span>* sig)</span></span></span><br><span class="line"><span class="function"><span class="comment">// clazz: 对应的 jclass</span></span></span><br><span class="line"><span class="function"><span class="comment">// name: 对应的方法名</span></span></span><br><span class="line"><span class="function"><span class="comment">// sig: 对应的函数描述符</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取 java 非静态方法</span></span></span><br><span class="line"><span class="function">jmethodID <span class="title">GetMethodID</span><span class="params">(jclass clazz, <span class="keyword">const</span> <span class="keyword">char</span>* name, <span class="keyword">const</span> <span class="keyword">char</span>* sig)</span></span></span><br><span class="line"><span class="function"><span class="comment">// clazz: 对应的 jclass</span></span></span><br><span class="line"><span class="function"><span class="comment">// name: 对应的方法名</span></span></span><br><span class="line"><span class="function"><span class="comment">// sig: 对应的函数描述符</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 调用静态方法</span></span></span><br><span class="line"><span class="function">NativeType CallStatic&lt;type&gt;<span class="title">Method</span><span class="params">(JNIEnv *env, jclass clazz,</span></span></span><br><span class="line"><span class="function"><span class="params">jmethodID methodID, ...)</span></span>;</span><br><span class="line"></span><br><span class="line">NativeType CallStatic&lt;type&gt;MethodA(JNIEnv *env, jclass clazz,</span><br><span class="line">jmethodID methodID, jvalue *args);</span><br><span class="line"></span><br><span class="line">NativeType CallStatic&lt;type&gt;MethodV(JNIEnv *env, jclass clazz,</span><br><span class="line">jmethodID methodID, va_list args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// clazz: 对应的 jlazz</span></span><br><span class="line"><span class="comment">// methodID: 方法对应的 MethodID</span></span><br><span class="line"><span class="comment">// ...：变参列表</span></span><br><span class="line"><span class="comment">// jvalue *args：Java值数组</span></span><br><span class="line"><span class="comment">// va_list args：指向变参列表的指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用非静态方法</span></span><br><span class="line">NativeType Call&lt;type&gt;Method(JNIEnv *env, jobject obj,</span><br><span class="line">jmethodID methodID, ...);</span><br><span class="line"></span><br><span class="line">NativeType Call&lt;type&gt;MethodA(JNIEnv *env, jobject obj,</span><br><span class="line">jmethodID methodID, <span class="keyword">const</span> jvalue *args);</span><br><span class="line"></span><br><span class="line">NativeType Call&lt;type&gt;MethodV(JNIEnv *env, jobject obj,</span><br><span class="line">jmethodID methodID, va_list args);</span><br><span class="line"><span class="comment">// obj: java 对象</span></span><br><span class="line"><span class="comment">// methodID: 实例方法 ID</span></span><br><span class="line"><span class="comment">// ... : 变参列表</span></span><br><span class="line"><span class="comment">// jvalue *args: 参数数组</span></span><br><span class="line"><span class="comment">// va_list args: 指向变参列表的指针</span></span><br></pre></td></tr></table></figure><p>JNI 获取并调用类的静态方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_kevin_ndkdemo01_MainActivity_jniGetJavaStaticMethod(JNIEnv *env, jobject)&#123;</span><br><span class="line">    jclass TestClass = env-&gt;FindClass(<span class="string">&quot;com/kevin/ndkdemo01/Test&quot;</span>);</span><br><span class="line">    jmethodID publicStaticMethodID = env-&gt;GetStaticMethodID(TestClass, <span class="string">&quot;publicStaticFunc&quot;</span>, <span class="string">&quot;()V&quot;</span>);</span><br><span class="line">    env-&gt;CallStaticVoidMethod(TestClass, publicStaticMethodID);</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;kevinTest&quot;</span>, <span class="string">&quot;native 调用 publicStaticMethod&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JNI 获取并调用非静态方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jni 获取 java 非静态方法</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_kevin_ndkdemo01_MainActivity_jniGetJavaNonStaticMethod(JNIEnv *env, jobject, jobject TestObj)&#123;</span><br><span class="line">    jclass TestClass = env-&gt;GetObjectClass(TestObj);</span><br><span class="line">    jmethodID publicNonStaticMethodID = env-&gt;GetMethodID(TestClass, <span class="string">&quot;publicNonStaticFunc&quot;</span>, <span class="string">&quot;()V&quot;</span>);</span><br><span class="line">    env-&gt;CallVoidMethod(TestObj, publicNonStaticMethodID);</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;kevinTest&quot;</span>, <span class="string">&quot;native public Nonstatic func&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JNI-OnLoad"><a href="#JNI-OnLoad" class="headerlink" title="JNI_OnLoad"></a>JNI_OnLoad</h1><p>负责 Java 方法和本地函数的链接工作;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JNIEXPORT jint JNI_OnLoad(JavaVM* vm, void* reserved)</span><br></pre></td></tr></table></figure><ul><li>参数: 该函数的格式固定, 其中第一个参数为 <code>JavaVM* vm</code>, 第二个参数保留;</li><li>作用: 该函数通常用于处理一些动态注册, 逻辑准备, 参数初始化的功能;</li><li>返回值: <code>JNI</code>的版本号, 如 <code>JNI_VERSION_1_4</code> ;</li><li>运行时机: 运行时机早于其他的 JNI 函数, 在静态代码块中调用 <code>System.loadLibrary()</code> 或者 <code>System.load()</code> 的时候就会调用;</li></ul><h1 id="RegisterNatives"><a href="#RegisterNatives" class="headerlink" title="RegisterNatives"></a>RegisterNatives</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jint RegisterNatives(jclass clazz, const JNINativeMethod* methods, jint nMethods)</span><br></pre></td></tr></table></figure><ul><li><p>clazz: java 层对应的类描述符</p></li><li><p>methods: JNINativeMethod 结构体,定义如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* signature;</span><br><span class="line">    <span class="keyword">void</span>*       fnPtr;</span><br><span class="line">&#125; JNINativeMethod;</span><br><span class="line"><span class="comment">// name: Java 方法名</span></span><br><span class="line"><span class="comment">// signature: Java 函数签名</span></span><br><span class="line"><span class="comment">// fnPtr: native 函数指针</span></span><br></pre></td></tr></table></figure></li><li><p>nMethods: 注册的方法数量</p></li></ul><h2 id="动态注册代码"><a href="#动态注册代码" class="headerlink" title="动态注册代码"></a>动态注册代码</h2><ol><li>定义一个 java 层需要动态注册的方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.kevin;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NativeLib</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">getName</span><span class="params">(<span class="keyword">int</span> number)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>本地声明一个该方法实现的函数, 并动态注册</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">getName</span><span class="params">(JNIEnv* env, jobject thiz, <span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(<span class="string">&quot;Hello from jni !!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> *CLASS_NAME = <span class="string">&quot;com/github/kevin/NativeLib&quot;</span>; <span class="comment">// 类名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> JNINativeMethod method = &#123; <span class="comment">// 本地方法描述</span></span><br><span class="line">    <span class="string">&quot;getName&quot;</span>, <span class="comment">// Java 方法名</span></span><br><span class="line">    <span class="string">&quot;(I)Ljava/lang/String;&quot;</span>,  <span class="comment">//方法签名</span></span><br><span class="line">    (<span class="keyword">void</span> *) getName <span class="comment">// 绑定本地函数 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">bool</span> bindNative(JNIEnv* env)&#123;</span><br><span class="line">    jclass clazz;</span><br><span class="line">    clazz = env-&gt;FindClass(CLASS_NAME);</span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;RegisterNatives(clazz, &amp;method, <span class="number">1</span>) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">JNI_OnLoad</span><span class="params">(JavaVM* vm, <span class="keyword">void</span>* reserved)</span></span>&#123;</span><br><span class="line">    JNIEnv* env = <span class="literal">NULL</span>;</span><br><span class="line">    jint result = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (vm-&gt;GetEnv((<span class="keyword">void</span>**) &amp;env, JNI_VERSION_1_6) != JNI_OK)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> res = bindNative(env);</span><br><span class="line">    <span class="keyword">return</span> JNI_VERSION_1_6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JavaVM"><a href="#JavaVM" class="headerlink" title="JavaVM"></a>JavaVM</h1><h2 id="JavaVM-定义"><a href="#JavaVM-定义" class="headerlink" title="JavaVM 定义"></a>JavaVM 定义</h2><p><code>JavaVM</code>是一个虚拟机在<code>JNI</code>层的代表, 一个进程只有一个<code>JavaVM</code>, 所有的线程共用一个<code>JavaVM</code>;</p><h2 id="JavaVM-2-种获取方式"><a href="#JavaVM-2-种获取方式" class="headerlink" title="JavaVM 2 种获取方式"></a>JavaVM 2 种获取方式</h2><ol><li><p>通过 <code>JNI_OnLoad</code> 来获取 <code>JavaVM</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">JNIEXPORT jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM* vm, <span class="keyword">void</span>* reserved)</span></span>&#123;</span><br><span class="line">  <span class="comment">// 直接获取到 JavaVM* vm</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过 <code>JNIEnv</code> 来获取 <code>JavaVM</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 JNIEnv 获取 JavaVM</span></span><br><span class="line">JavaVM* vm = <span class="literal">nullptr</span>;</span><br><span class="line">env-&gt;GetJavaVM(&amp;vm);</span><br></pre></td></tr></table></figure><h2 id="JavaVM-相关-api"><a href="#JavaVM-相关-api" class="headerlink" title="JavaVM 相关 api"></a>JavaVM 相关 api</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">jint <span class="title">DestroyJavaVM</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> functions-&gt;DestroyJavaVM(<span class="keyword">this</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">jint <span class="title">AttachCurrentThread</span><span class="params">(JNIEnv** p_env, <span class="keyword">void</span>* thr_args)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> functions-&gt;AttachCurrentThread(<span class="keyword">this</span>, p_env, thr_args); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">jint <span class="title">DetachCurrentThread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> functions-&gt;DetachCurrentThread(<span class="keyword">this</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">jint <span class="title">GetEnv</span><span class="params">(<span class="keyword">void</span>** env, jint version)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> functions-&gt;GetEnv(<span class="keyword">this</span>, env, version); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">jint <span class="title">AttachCurrentThreadAsDaemon</span><span class="params">(JNIEnv** p_env, <span class="keyword">void</span>* thr_args)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> functions-&gt;AttachCurrentThreadAsDaemon(<span class="keyword">this</span>, p_env, thr_args); &#125;</span><br></pre></td></tr></table></figure><p><strong>链接到虚拟机</strong></p><p><code>JNIEnv</code> 指针仅在创建它的线程中有效, 如果我们需要在其他线程中访问 <code>JVM</code>, 那么必须先调用 <code>AttachCurrentThread</code> 将当前线程与 <code>JVM</code> 进行关联, 然后才能获得<code>JNIEnv</code> 对象; 当不使用该线程的时候, 需要调用 <code>DetachCurrentThread</code> 来解除链接;</p><p><code>jint AttachCurrentThread(JavaVM* vm , JNIEnv** env , JavaVMAttachArgs* args);</code></p><ul><li>vm: 虚拟机对象指针</li><li>env: 用来保存得到的 JNIEnv 的指针</li><li>args: 链接参数, 参数结构如下所示</li><li>return: 链接成功返回 0, 链接失败返回其他</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">JavaVMAttachArgs</span> &#123;</span></span><br><span class="line">    jint        version;    <span class="comment">/* must be &gt;= JNI_VERSION_1_2 */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* name;       <span class="comment">/* NULL or name of thread as modified UTF-8 str */</span></span><br><span class="line">    jobject     group;      <span class="comment">/* global ref of a ThreadGroup object, or NULL */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>卸载虚拟机</strong></p><p><code>jint DetachCurrentThread(JavaVM* vm);</code></p><p><strong>解除与虚拟机的链接</strong></p><p><code>jint DetachCurrentThread(JavaVM* vm);</code></p><p><strong>卸载虚拟机</strong></p><p><code>jint DestroyJavaVM(JavaVM* vm);</code></p><p><strong>获取 JNIEnv</strong></p><p><code>jint GetEnv(void** env, jint version)</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">JNIEXPORT jnit JNICALL <span class="title">JNI_OnLoad</span><span class="params">(JavaVM* vm, <span class="keyword">void</span>* reserved)</span></span>&#123;</span><br><span class="line">    JNIEnv* env = <span class="literal">nullptr</span>;</span><br><span class="line">  <span class="keyword">if</span> (vm-&gt;GetEnv((<span class="keyword">void</span>**) &amp;env, JNI_VERSION_1_6) == JNI_OK)&#123;</span><br><span class="line">      __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;kevinTest&quot;</span>, <span class="string">&quot;jni-&gt;%s&quot;</span>, <span class="string">&quot;vm-&gt;GetEnv((void **) &amp;env, JNI_VERSION_1_6)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="JNIEnv"><a href="#JNIEnv" class="headerlink" title="JNIEnv"></a>JNIEnv</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><code>JNIEnv*</code> 是 <code>Java Native Interface Environment</code> , 是一个 <code>JNI</code> 接口指针, 指向了本地方法的函数表, 该函数表的每个成员执行了一个 <code>jni</code> 函数</p><h2 id="JNIEnv-特性"><a href="#JNIEnv-特性" class="headerlink" title="JNIEnv 特性"></a>JNIEnv 特性</h2><ol><li><code>JNIEnv</code> 只在创建它的线程中生效, 不能跨线程传递, 不同线程的 <code>JNIEnv</code> 彼此独立</li><li><code>native</code> 环境中创建的线程, 如果需要访问 <code>JNIEnv</code>, 必须调用 <code>AttachCurrentThread</code> 关联, 并使用 <code>DetachCurrentThread</code> 解除链接</li></ol><h2 id="获取-JNIEnv"><a href="#获取-JNIEnv" class="headerlink" title="获取 JNIEnv"></a>获取 <code>JNIEnv</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vm-&gt;GetEnv()&#96; 在主线程获取 &#96;JNIEnv</span><br><span class="line">JNIEnv *env &#x3D; nullptr;</span><br><span class="line">if (vm-&gt;GetEnv((void**)&amp;env, JNI_VERSION_1_6) &#x3D;&#x3D; JNI_OK)&#123;</span><br><span class="line">__android_log_print(ANDROID_LOG_INFO, &quot;kevinTest&quot;, &quot;jni-&gt;%s&quot;, &quot;vm-&gt;GetEnv((void **) &amp;env, JNI_VERSION_1_6)&quot;);</span><br><span class="line">&#125;</span><br><span class="line">vm-&gt;GetEnv()&#96; 在子线程中获取 &#96;JNIEnv</span><br><span class="line">&#x2F;&#x2F; 从 JNI_OnLoad中获取的 vm 保存为全局变量 globalvm</span><br><span class="line">&#x2F;&#x2F; 使用 AttachCurrentThread 对子线程进行注册</span><br><span class="line">&#x2F;&#x2F; globalvm-&gt;AttachCurrentThread(&amp;threadenv, nullptr);</span><br><span class="line">&#x2F;&#x2F; 再使用 vm-&gt;GetEnv()获取 JNIEnv</span><br><span class="line">if (globalvm-&gt;AttachCurrentThread(&amp;threadenv, nullptr)&#x3D;&#x3D; JNI_OK)&#123;</span><br><span class="line">    if (globalvm-&gt;GetEnv((void**)&amp;threadenv, JNI_VERSION_1_6) &#x3D;&#x3D; JNI_OK)&#123;</span><br><span class="line">__android_log_print(ANDROID_LOG_INFO, &quot;kevinTest&quot;, &quot;jni-&gt;get jnienv from thread %p&quot;, threadenv);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">globalvm-&gt;DetachCurrentThread();</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><p><code>JNIEnv</code>是与一个<code>ClassLoader</code>绑定的, 当使用<code>env-&gt;FindClass()</code>进行类的查询和加载时, 便是使用的这个<code>ClassLoader</code></p></li><li><p><code>JNIEnv</code>是当前<code>Java</code>线程的执行环境, 一个<code>JVM</code>对应一个<code>JavaVM</code>结构, 而一个<code>JVM</code>中可能创建多个<code>Java</code>线程, 使用<code>pthread_create</code>新建的线程当使用<code>AttachCurrentTread(&amp;env, nullptr)</code>获得到<code>JNIEnv</code>后, 该<code>JNIEnv</code>的<code>CLassLoader</code>并不是主线程的<code>ClassLoader</code>, 因此也无法加载<code>app</code>自己的 <code>Class</code></p></li><li><p>解决子线程无法获取主线程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader</span><br></pre></td></tr></table></figure><p>问题:</p><ul><li>保存全局<code>ClassLoader</code>, 之后在子线程中使用全局<code>ClassLoader</code></li><li>在主线程中获取到要使用的<code>Class</code>, 创建全局引用</li></ul></li></ul><h1 id="JNI-访问成员属性汇总"><a href="#JNI-访问成员属性汇总" class="headerlink" title="JNI 访问成员属性汇总"></a>JNI 访问成员属性汇总</h1><h2 id="定义-Test-类测试"><a href="#定义-Test-类测试" class="headerlink" title="定义 Test 类测试"></a>定义 <code>Test</code> 类测试</h2><ul><li><p><code>Test</code> 类定义代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kevin.reflectiontest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;kevinTest&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String flag = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String publicStaticField = <span class="string">&quot;i am a public static field&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> String publicNonStaticField = <span class="string">&quot;i am a public non static field&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String privateStaticField = <span class="string">&quot;i am a private static field&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String privateNonStaticField = <span class="string">&quot;i am a private non static field&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        flag = <span class="string">&quot;Test()&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(String arg)</span></span>&#123;</span><br><span class="line">        flag = <span class="string">&quot;Test(String arg)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(String arg, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        flag = <span class="string">&quot;Test(String arg, int num)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">publicStaticFunc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;public Static Func: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publicNonStaticFunc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;public Non Static Func: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">privateStaticFunc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;private Static Func: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">privateNonStaticFunc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;private Non Static Func: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">privateNonStaticFunc</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;private Non Static Func: arg is String : &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="获取-Field-静态属性的方法"><a href="#获取-Field-静态属性的方法" class="headerlink" title="获取 Field 静态属性的方法"></a>获取 <code>Field</code> 静态属性的方法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于获取非基础数据类型的属性</span></span><br><span class="line">jobject     (*GetStaticObjectField)(JNIEnv*, jclass, jfieldID);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于获取 8 种基础数据类型</span></span><br><span class="line">jboolean    (*GetStaticBooleanField)(JNIEnv*, jclass, jfieldID);</span><br><span class="line">jbyte       (*GetStaticByteField)(JNIEnv*, jclass, jfieldID);</span><br><span class="line">jchar       (*GetStaticCharField)(JNIEnv*, jclass, jfieldID);</span><br><span class="line">jshort      (*GetStaticShortField)(JNIEnv*, jclass, jfieldID);</span><br><span class="line">jint        (*GetStaticIntField)(JNIEnv*, jclass, jfieldID);</span><br><span class="line">jlong       (*GetStaticLongField)(JNIEnv*, jclass, jfieldID);</span><br><span class="line">jfloat      (*GetStaticFloatField)(JNIEnv*, jclass, jfieldID);</span><br><span class="line">jdouble     (*GetStaticDoubleField)(JNIEnv*, jclass, jfieldID);</span><br></pre></td></tr></table></figure><h2 id="设置-Field-静态属性的方法"><a href="#设置-Field-静态属性的方法" class="headerlink" title="设置 Field 静态属性的方法"></a>设置 <code>Field</code> 静态属性的方法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span>        (*SetStaticObjectField)(JNIEnv*, jclass, jfieldID, jobject);</span><br><span class="line"><span class="keyword">void</span>        (*SetStaticBooleanField)(JNIEnv*, jclass, jfieldID, jboolean);</span><br><span class="line"><span class="keyword">void</span>        (*SetStaticByteField)(JNIEnv*, jclass, jfieldID, jbyte);</span><br><span class="line"><span class="keyword">void</span>        (*SetStaticCharField)(JNIEnv*, jclass, jfieldID, jchar);</span><br><span class="line"><span class="keyword">void</span>        (*SetStaticShortField)(JNIEnv*, jclass, jfieldID, jshort);</span><br><span class="line"><span class="keyword">void</span>        (*SetStaticIntField)(JNIEnv*, jclass, jfieldID, jint);</span><br><span class="line"><span class="keyword">void</span>        (*SetStaticLongField)(JNIEnv*, jclass, jfieldID, jlong);</span><br><span class="line"><span class="keyword">void</span>        (*SetStaticFloatField)(JNIEnv*, jclass, jfieldID, jfloat);</span><br><span class="line"><span class="keyword">void</span>        (*SetStaticDoubleField)(JNIEnv*, jclass, jfieldID, jdouble);</span><br></pre></td></tr></table></figure><h2 id="获取-Field-动态属性的方法"><a href="#获取-Field-动态属性的方法" class="headerlink" title="获取 Field 动态属性的方法"></a>获取 <code>Field</code> 动态属性的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于获取非基础数据类型的属性</span></span><br><span class="line">jobject     (*GetObjectField)(JNIEnv*, jobject, jfieldID);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于获取 8 种基础数据类型</span></span><br><span class="line">jboolean    (*GetBooleanField)(JNIEnv*, jobject, jfieldID);</span><br><span class="line">jbyte       (*GetByteField)(JNIEnv*, jobject, jfieldID);</span><br><span class="line">jchar       (*GetCharField)(JNIEnv*, jobject, jfieldID);</span><br><span class="line">jshort      (*GetShortField)(JNIEnv*, jobject, jfieldID);</span><br><span class="line">jint        (*GetIntField)(JNIEnv*, jobject, jfieldID);</span><br><span class="line">jlong       (*GetLongField)(JNIEnv*, jobject, jfieldID);</span><br><span class="line">jfloat      (*GetFloatField)(JNIEnv*, jobject, jfieldID);</span><br><span class="line">jdouble     (*GetDoubleField)(JNIEnv*, jobject, jfieldID);</span><br></pre></td></tr></table></figure><h2 id="设置-Field-动态属性的方法"><a href="#设置-Field-动态属性的方法" class="headerlink" title="设置 Field 动态属性的方法"></a>设置 <code>Field</code> 动态属性的方法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span>        (*SetObjectField)(JNIEnv*, jobject, jfieldID, jobject);</span><br><span class="line"><span class="keyword">void</span>        (*SetBooleanField)(JNIEnv*, jobject, jfieldID, jboolean);</span><br><span class="line"><span class="keyword">void</span>        (*SetByteField)(JNIEnv*, jobject, jfieldID, jbyte);</span><br><span class="line"><span class="keyword">void</span>        (*SetCharField)(JNIEnv*, jobject, jfieldID, jchar);</span><br><span class="line"><span class="keyword">void</span>        (*SetShortField)(JNIEnv*, jobject, jfieldID, jshort);</span><br><span class="line"><span class="keyword">void</span>        (*SetIntField)(JNIEnv*, jobject, jfieldID, jint);</span><br><span class="line"><span class="keyword">void</span>        (*SetLongField)(JNIEnv*, jobject, jfieldID, jlong);</span><br><span class="line"><span class="keyword">void</span>        (*SetFloatField)(JNIEnv*, jobject, jfieldID, jfloat);</span><br><span class="line"><span class="keyword">void</span>        (*SetDoubleField)(JNIEnv*, jobject, jfieldID, jdouble);</span><br></pre></td></tr></table></figure><h2 id="访问类的静态属性"><a href="#访问类的静态属性" class="headerlink" title="访问类的静态属性"></a>访问类的静态属性</h2><ul><li><p>访问类的静态属性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jni 访问非私有的属性</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_kevin_reflectiontest_MainActivity_getStaticField(JNIEnv *env, jobject)&#123;</span><br><span class="line">    <span class="comment">// 获取类</span></span><br><span class="line">    jclass TestClass = env-&gt;FindClass(<span class="string">&quot;com/kevin/reflectiontest/Test&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到静态 public 属性的 fieldID</span></span><br><span class="line">    <span class="comment">// public static String publicStaticField = &quot;i am a public static field&quot;;</span></span><br><span class="line">    jfieldID publicStaticFieldid = env-&gt;GetStaticFieldID(TestClass, <span class="string">&quot;publicStaticField&quot;</span>,</span><br><span class="line">                                                            <span class="string">&quot;Ljava/lang/String;&quot;</span>);</span><br><span class="line">    <span class="comment">// 通过 GetStaticObjectFiled 找到对应属性的值</span></span><br><span class="line">    jstring publicStaticField = <span class="keyword">static_cast</span>&lt;jstring&gt;(env-&gt;GetStaticObjectField(TestClass,</span><br><span class="line">                                                                                    publicStaticFieldid));</span><br><span class="line">    <span class="comment">// 将 jstring 转成 char*</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *publicStaticFieldValue = env-&gt;GetStringUTFChars(publicStaticField, <span class="literal">nullptr</span>);</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;kevinTest&quot;</span>, <span class="string">&quot;获取到public 静态属性 %s&quot;</span>, publicStaticFieldValue);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到静态 private 属性的 FieldID</span></span><br><span class="line">    <span class="comment">// private static String privateStaticField = &quot;i am a private static field&quot;;</span></span><br><span class="line">    jfieldID privateStaticFieldID = env-&gt;GetStaticFieldID(TestClass, <span class="string">&quot;privateStaticField&quot;</span>,</span><br><span class="line">                                                          <span class="string">&quot;Ljava/lang/String;&quot;</span>);</span><br><span class="line">    jstring privateStaticField = (jstring)env-&gt;GetStaticObjectField(TestClass, privateStaticFieldID);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *privateStaticFieldValue = env-&gt;GetStringUTFChars(privateStaticField, <span class="literal">nullptr</span>);</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;kevinTest&quot;</span>, <span class="string">&quot;获取到 private 静态属性 %s&quot;</span>,</span><br><span class="line">                        privateStaticFieldValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="修改类的静态属性"><a href="#修改类的静态属性" class="headerlink" title="修改类的静态属性"></a>修改类的静态属性</h2><p><code>SetStaticObjectField</code> 静态的<code>private</code>和<code>public</code>修改的方法相同;</p><ul><li><p>修改类的静态属性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jni 访问类的属性</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_kevin_reflectiontest_MainActivity_getStaticField(JNIEnv *env, jobject)&#123;</span><br><span class="line">    <span class="comment">// 获取类</span></span><br><span class="line">    jclass TestClass = env-&gt;FindClass(<span class="string">&quot;com/kevin/reflectiontest/Test&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到静态 public 属性的 fieldID</span></span><br><span class="line">    <span class="comment">// public static String publicStaticField = &quot;i am a public static field&quot;;</span></span><br><span class="line">    jfieldID publicStaticFieldid = env-&gt;GetStaticFieldID(TestClass, <span class="string">&quot;publicStaticField&quot;</span>,</span><br><span class="line">                                                            <span class="string">&quot;Ljava/lang/String;&quot;</span>);</span><br><span class="line">    <span class="comment">// 通过 GetStaticObjectFiled 找到对应属性的值</span></span><br><span class="line">    jstring publicStaticField = <span class="keyword">static_cast</span>&lt;jstring&gt;(env-&gt;GetStaticObjectField(TestClass,publicStaticFieldid));</span><br><span class="line">    <span class="comment">// 将 jstring 转成 char*</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *publicStaticFieldValue = env-&gt;GetStringUTFChars(publicStaticField, <span class="literal">nullptr</span>);</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;kevinTest&quot;</span>, <span class="string">&quot;获取到public 静态属性 %s&quot;</span>, publicStaticFieldValue);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改 public static 属性的值</span></span><br><span class="line">    <span class="comment">// void SetStaticObjectField(jclass clazz, jfieldID fieldID, jobject value)</span></span><br><span class="line">    jstring changeValue = env-&gt;NewStringUTF(<span class="string">&quot;change the value&quot;</span>);</span><br><span class="line">    env-&gt;SetStaticObjectField(TestClass, publicStaticFieldid, changeValue);</span><br><span class="line">    jstring publicStaticFieldChange = <span class="keyword">static_cast</span>&lt;jstring&gt;(env-&gt;GetStaticObjectField(TestClass,publicStaticFieldid));</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *publicStaticFieldChangeValue = env-&gt;GetStringUTFChars(publicStaticFieldChange, <span class="literal">nullptr</span>);</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;kevinTest&quot;</span>, <span class="string">&quot;获取到public 静态属性 改变为: %s&quot;</span>, publicStaticFieldChangeValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="访问对象的属性"><a href="#访问对象的属性" class="headerlink" title="访问对象的属性"></a>访问对象的属性</h2><ul><li><p>访问对象的属性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jni 访问对象的属性</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_kevin_reflectiontest_MainActivity_getObjectField(JNIEnv *env, jobject obj, jobject inputObj)&#123;</span><br><span class="line">    <span class="comment">// 访问对象的私有属性 private String privateNonStaticField = &quot;i am a private non static field&quot;;</span></span><br><span class="line">    <span class="comment">// 1. 获取类</span></span><br><span class="line">    jclass TestClass = env-&gt;FindClass(<span class="string">&quot;com/kevin/reflectiontest/Test&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 获取属性ID</span></span><br><span class="line">    jfieldID privateNonStaticFieldID = env-&gt;GetFieldID(TestClass, <span class="string">&quot;privateNonStaticField&quot;</span>,</span><br><span class="line">                                                       <span class="string">&quot;Ljava/lang/String;&quot;</span>);</span><br><span class="line">    <span class="comment">// 3. 获取对象的值</span></span><br><span class="line">    jstring privateNonStaticField = <span class="keyword">static_cast</span>&lt;jstring&gt;(env-&gt;GetObjectField(inputObj,privateNonStaticFieldID));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. jstring 转 char* 并打印</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* privateNonStaticFieldValue = env-&gt;GetStringUTFChars(privateNonStaticField, <span class="literal">nullptr</span>);</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;kevinTest&quot;</span>, <span class="string">&quot;privateNoneStaticFieldValue is %s&quot;</span>,</span><br><span class="line">                        privateNonStaticFieldValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="修改对象的属性"><a href="#修改对象的属性" class="headerlink" title="修改对象的属性"></a>修改对象的属性</h2><ul><li><p>修改对象的属性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jni 访问类的属性</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_kevin_reflectiontest_MainActivity_getStaticField(JNIEnv *env, jobject)&#123;</span><br><span class="line">    <span class="comment">// 获取类</span></span><br><span class="line">    jclass TestClass = env-&gt;FindClass(<span class="string">&quot;com/kevin/reflectiontest/Test&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到静态 public 属性的 fieldID</span></span><br><span class="line">    <span class="comment">// public static String publicStaticField = &quot;i am a public static field&quot;;</span></span><br><span class="line">    jfieldID publicStaticFieldid = env-&gt;GetStaticFieldID(TestClass, <span class="string">&quot;publicStaticField&quot;</span>,</span><br><span class="line">                                                            <span class="string">&quot;Ljava/lang/String;&quot;</span>);</span><br><span class="line">    <span class="comment">// 通过 GetStaticObjectFiled 找到对应属性的值</span></span><br><span class="line">    jstring publicStaticField = <span class="keyword">static_cast</span>&lt;jstring&gt;(env-&gt;GetStaticObjectField(TestClass,</span><br><span class="line">                                                                                    publicStaticFieldid));</span><br><span class="line">    <span class="comment">// 将 jstring 转成 char*</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *publicStaticFieldValue = env-&gt;GetStringUTFChars(publicStaticField, <span class="literal">nullptr</span>);</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;kevinTest&quot;</span>, <span class="string">&quot;获取到public 静态属性 %s&quot;</span>, publicStaticFieldValue);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到静态 private 属性的 FieldID</span></span><br><span class="line">    <span class="comment">// private static String privateStaticField = &quot;i am a private static field&quot;;</span></span><br><span class="line">    jfieldID privateStaticFieldID = env-&gt;GetStaticFieldID(TestClass, <span class="string">&quot;privateStaticField&quot;</span>,</span><br><span class="line">                                                          <span class="string">&quot;Ljava/lang/String;&quot;</span>);</span><br><span class="line">    jstring privateStaticField = (jstring)env-&gt;GetStaticObjectField(TestClass, privateStaticFieldID);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *privateStaticFieldValue = env-&gt;GetStringUTFChars(privateStaticField, <span class="literal">nullptr</span>);</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;kevinTest&quot;</span>, <span class="string">&quot;获取到 private 静态属性 %s&quot;</span>,</span><br><span class="line">                        privateStaticFieldValue);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改 public static 属性的值</span></span><br><span class="line">    <span class="comment">// void SetStaticObjectField(jclass clazz, jfieldID fieldID, jobject value)</span></span><br><span class="line">    jstring changeValue = env-&gt;NewStringUTF(<span class="string">&quot;change the value&quot;</span>);</span><br><span class="line">    env-&gt;SetStaticObjectField(TestClass, publicStaticFieldid, changeValue);</span><br><span class="line">    jstring publicStaticFieldChange = <span class="keyword">static_cast</span>&lt;jstring&gt;(env-&gt;GetStaticObjectField(TestClass,</span><br><span class="line">                                                                               publicStaticFieldid));</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *publicStaticFieldChangeValue = env-&gt;GetStringUTFChars(publicStaticFieldChange, <span class="literal">nullptr</span>);</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;kevinTest&quot;</span>, <span class="string">&quot;获取到public 静态属性 改变为: %s&quot;</span>, publicStaticFieldChangeValue);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改 private static 属性值</span></span><br><span class="line">    jstring changeValue2 = env-&gt;NewStringUTF(<span class="string">&quot;change private the value&quot;</span>);</span><br><span class="line">    env-&gt;SetStaticObjectField(TestClass, privateStaticFieldID, changeValue2);</span><br><span class="line">    jstring privateStaticFieldChange = <span class="keyword">static_cast</span>&lt;jstring&gt;(env-&gt;GetStaticObjectField(TestClass,</span><br><span class="line">                                                                                      privateStaticFieldID));</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *privateStaticFieldChangeValue = env-&gt;GetStringUTFChars(privateStaticFieldChange,</span><br><span class="line">                                                                       <span class="literal">nullptr</span>);</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;kevinTest&quot;</span>, <span class="string">&quot;获取到private 静态属性 改变为: %s&quot;</span>, privateStaticFieldChangeValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jni 访问对象的属性</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_kevin_reflectiontest_MainActivity_getObjectField(JNIEnv *env, jobject obj, jobject inputObj)&#123;</span><br><span class="line">    <span class="comment">// 访问对象的私有属性 private String privateNonStaticField = &quot;i am a private non static field&quot;;</span></span><br><span class="line">    <span class="comment">// 1. 获取类</span></span><br><span class="line">    jclass TestClass = env-&gt;FindClass(<span class="string">&quot;com/kevin/reflectiontest/Test&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 获取属性ID</span></span><br><span class="line">    jfieldID privateNonStaticFieldID = env-&gt;GetFieldID(TestClass, <span class="string">&quot;privateNonStaticField&quot;</span>,</span><br><span class="line">                                                       <span class="string">&quot;Ljava/lang/String;&quot;</span>);</span><br><span class="line">    <span class="comment">// 3. 获取对象的值</span></span><br><span class="line">    jstring privateNonStaticField = <span class="keyword">static_cast</span>&lt;jstring&gt;(env-&gt;GetObjectField(inputObj,                                                                       privateNonStaticFieldID));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. jstring 转 char* 并打印</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* privateNonStaticFieldValue = env-&gt;GetStringUTFChars(privateNonStaticField, <span class="literal">nullptr</span>);</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;kevinTest&quot;</span>, <span class="string">&quot;privateNoneStaticFieldValue is %s&quot;</span>,</span><br><span class="line">                        privateNonStaticFieldValue);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 修改对象的属性</span></span><br><span class="line">    jstring newString = env-&gt;NewStringUTF(<span class="string">&quot;modified new String&quot;</span>);</span><br><span class="line">    env-&gt;SetObjectField(inputObj, privateNonStaticFieldID, newString);</span><br><span class="line">    <span class="comment">// 6. 获取对象的值</span></span><br><span class="line">    jstring privateNonStaticField1 = <span class="keyword">static_cast</span>&lt;jstring&gt;(env-&gt;GetObjectField(inputObj,                                                      privateNonStaticFieldID));</span><br><span class="line">    <span class="comment">// 7. jstring 转 char* 并打印</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* privateNonStaticFieldValue1 = env-&gt;GetStringUTFChars(privateNonStaticField1, <span class="literal">nullptr</span>);</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;kevinTest&quot;</span>, <span class="string">&quot;privateNoneStaticFieldValue is %s&quot;</span>,</span><br><span class="line">                        privateNonStaticFieldValue1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问和修改数组类型的属性"><a href="#访问和修改数组类型的属性" class="headerlink" title="访问和修改数组类型的属性"></a>访问和修改数组类型的属性</h2><p><code>env-&gt;GetArrayLength</code>: 获取数组的长度</p><p><code>env-&gt;GetIntArrayElements</code>: 获取数组首元素的指针</p><p><code>env-&gt;SetIntArrayRegion</code>: 修改数组的值</p><ul><li><p>code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_kevin_reflectiontest_MainActivity_getArrayField(JNIEnv *env, jobject obj, jobject inputObj)&#123;</span><br><span class="line">    <span class="comment">// 1. 获取 class</span></span><br><span class="line">    jclass TestClass = env-&gt;FindClass(<span class="string">&quot;com/kevin/reflectiontest/Test&quot;</span>);</span><br><span class="line">    <span class="comment">// private int[] ArrayField = &#123;1, 2, 3, 4&#125;;</span></span><br><span class="line">    <span class="comment">// 2. 获取 fieldID</span></span><br><span class="line">    jfieldID ArrayFieldID = env-&gt;GetFieldID(TestClass, <span class="string">&quot;ArrayField&quot;</span>, <span class="string">&quot;[I&quot;</span>);</span><br><span class="line">    <span class="comment">// 3. 获取 filedobj</span></span><br><span class="line">    jintArray ArrayFiledObj = <span class="keyword">static_cast</span>&lt;jintArray&gt;(env-&gt;GetObjectField(inputObj, ArrayFieldID));</span><br><span class="line">    <span class="comment">// 4. 获取 jintArray 的长度</span></span><br><span class="line">    jint length = env-&gt;GetArrayLength(ArrayFiledObj);</span><br><span class="line">    <span class="comment">// 5. 获取 jintArray 首元素的指针</span></span><br><span class="line">    <span class="keyword">int</span> *<span class="built_in">array</span> = env-&gt;GetIntArrayElements(ArrayFiledObj, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="comment">// 6. 遍历打印</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">        __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;kevinTest&quot;</span>, <span class="string">&quot;array[%d]-&gt;%d&quot;</span>, i, <span class="built_in">array</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 7. 定义新的jintArray</span></span><br><span class="line">    jint jni_array[length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">        jni_array[i] = <span class="number">10</span> - i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//void SetIntArrayRegion(jintArray array, jsize start, jsize len,</span></span><br><span class="line">    <span class="keyword">const</span> jint *ptr = jni_array;</span><br><span class="line">    env-&gt;SetIntArrayRegion(ArrayFiledObj, <span class="number">0</span>, length, ptr);</span><br><span class="line">    <span class="keyword">int</span> *array1 = env-&gt;GetIntArrayElements(ArrayFiledObj, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="comment">// 6. 遍历打印</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">        __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;kevinTest&quot;</span>, <span class="string">&quot;array[%d]-&gt;%d&quot;</span>, i, array1[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="JNI-访问成员方法汇总"><a href="#JNI-访问成员方法汇总" class="headerlink" title="JNI 访问成员方法汇总"></a>JNI 访问成员方法汇总</h1><h2 id="访问构造函数"><a href="#访问构造函数" class="headerlink" title="访问构造函数"></a>访问构造函数</h2><p>对于构造函数的调用来说, 只能通过<code>NewObject</code>和<code>AllocObject</code>来调用; 因为构造函数本身首先不是静态函数, 自然不能通过类名进行调用; 其次, 如果按照一般的函数进行调用的话, 还需要传入对象, 而此时还没有对象, 因此只能是使用创建对象的方式来调用;</p><ul><li><p>code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jni 调用 构造函数</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> JNIEXPORT jobject JNICALL</span><br><span class="line">Java_com_kevin_reflectiontest_MainActivity_getInitMethod(JNIEnv *env, jobject obj)&#123;</span><br><span class="line">    jclass TestClass = env-&gt;FindClass(<span class="string">&quot;com/kevin/reflectiontest/Test&quot;</span>);</span><br><span class="line">    <span class="comment">//  Test(String arg, int num)</span></span><br><span class="line">    jmethodID initMethodID = env-&gt;GetMethodID(TestClass, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;(Ljava/lang/String;I)V&quot;</span>);</span><br><span class="line">    jstring inputStr = env-&gt;NewStringUTF(<span class="string">&quot;构造函数字符串&quot;</span>);</span><br><span class="line">    jobject newObj = env-&gt;NewObject(TestClass, initMethodID, inputStr, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="访问静态函数"><a href="#访问静态函数" class="headerlink" title="访问静态函数"></a>访问静态函数</h2><p>对于静态函数来说, 可以通过传入类名, 直接通过 <code>CallStaticXXXMethod</code> 调用;</p><ol><li><code>CallStaticXXXMethod</code></li><li><code>CallStaticXXXMethodV</code></li><li><code>CallStaticXXXMethodA</code></li></ol><p>这三个接口都可以完成函数的调用, 只不过是传参的方式不同;</p><ul><li><p>code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jni 调用 静态函数</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_kevin_reflectiontest_MainActivity_callStaticMethod(JNIEnv *env, jobject obj)&#123;</span><br><span class="line">    jclass TestClass = env-&gt;FindClass(<span class="string">&quot;com/kevin/reflectiontest/Test&quot;</span>);</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 调用 public 静态方法</span></span><br><span class="line">  <span class="comment">// public static void publicStaticFunc()</span></span><br><span class="line">    jmethodID jmethodId = env-&gt;GetStaticMethodID(TestClass, <span class="string">&quot;publicStaticFunc&quot;</span>, <span class="string">&quot;()V&quot;</span>);</span><br><span class="line">    env-&gt;CallStaticVoidMethod(TestClass, jmethodId);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用 private 静态方法</span></span><br><span class="line">  <span class="comment">// private static void privateStaticFunc()</span></span><br><span class="line">    jmethodID jmethidID2 = env-&gt;GetStaticMethodID(TestClass, <span class="string">&quot;privateStaticFunc&quot;</span>, <span class="string">&quot;()V&quot;</span>);</span><br><span class="line">    env-&gt;CallStaticVoidMethod(TestClass, jmethidID2);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 调用 带有参数和返回值的静态方法</span></span><br><span class="line">    <span class="comment">// public static String publicStaticFunc_string(String arg)</span></span><br><span class="line">    jmethodID jmethodID3 = env-&gt;GetStaticMethodID(TestClass, <span class="string">&quot;publicStaticFunc_string&quot;</span>,</span><br><span class="line">                                                  <span class="string">&quot;(Ljava/lang/String;)Ljava/lang/String;&quot;</span>);</span><br><span class="line">    jstring arg = env-&gt;NewStringUTF(<span class="string">&quot;字符串参数&quot;</span>);</span><br><span class="line">    jstring result = <span class="keyword">static_cast</span>&lt;jstring&gt;(env-&gt;CallStaticObjectMethod(TestClass, jmethodID3, arg));</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *logResutl = env-&gt;GetStringUTFChars(result, <span class="literal">nullptr</span>);</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;kevinTest&quot;</span>, <span class="string">&quot;jni log result is : %s&quot;</span>, logResutl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="访问非静态函数"><a href="#访问非静态函数" class="headerlink" title="访问非静态函数"></a>访问非静态函数</h2><p>对于非静态函数来说, 可以通过传入类名, 直接通过<code>CallXXXMethod</code>调用;</p><ul><li><p>code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_kevin_reflectiontest_MainActivity_callMethod(JNIEnv *env, jobject obj)&#123;</span><br><span class="line">    <span class="comment">// 创建实例</span></span><br><span class="line">    jclass TestClass = env-&gt;FindClass(<span class="string">&quot;com/kevin/reflectiontest/Test&quot;</span>);</span><br><span class="line">    jmethodID jmethodId = env-&gt;GetMethodID(TestClass, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;(Ljava/lang/String;I)V&quot;</span>);</span><br><span class="line">    jstring arg1 = env-&gt;NewStringUTF(<span class="string">&quot;字符串参数&quot;</span>);</span><br><span class="line">    jobject testObj = env-&gt;NewObject(TestClass, jmethodId, arg1, <span class="number">100</span>);</span><br><span class="line">    <span class="comment">// 调用对象的方法</span></span><br><span class="line">    <span class="comment">// public void publicNonStaticFunc()</span></span><br><span class="line">    jmethodID jmethodId2 = env-&gt;GetMethodID(TestClass, <span class="string">&quot;publicNonStaticFunc&quot;</span>, <span class="string">&quot;()V&quot;</span>);</span><br><span class="line">    env-&gt;CallVoidMethod(testObj, jmethodId2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  private void privateNonStaticFunc()</span></span><br><span class="line">    jmethodID jmethodId3 = env-&gt;GetMethodID(TestClass, <span class="string">&quot;privateNonStaticFunc&quot;</span>, <span class="string">&quot;()V&quot;</span>);</span><br><span class="line">    env-&gt;CallVoidMethod(testObj, jmethodId3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="访问父类的函数"><a href="#访问父类的函数" class="headerlink" title="访问父类的函数"></a>访问父类的函数</h2><p><code>CallNonvirtualXXXMethod()</code>通过子类对象调用父类的方法</p><ul><li><p>code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_kevin_reflectiontest_MainActivity_callObjFaterMethod(JNIEnv *env, jobject obj, jobject BundleObj)&#123;</span><br><span class="line">    <span class="comment">// jni 层调用 android log</span></span><br><span class="line">    jclass LogClass = env-&gt;FindClass(<span class="string">&quot;android/util/Log&quot;</span>);</span><br><span class="line">    <span class="comment">// public static int i(String tag, String msg)</span></span><br><span class="line">    jmethodID logMehodid = env-&gt;GetStaticMethodID(LogClass, <span class="string">&quot;i&quot;</span>,</span><br><span class="line">                                                  <span class="string">&quot;(Ljava/lang/String;Ljava/lang/String;)I&quot;</span>);</span><br><span class="line">    jstring arg1 = env-&gt;NewStringUTF(<span class="string">&quot;kevinTest&quot;</span>);</span><br><span class="line">    jstring arg2 = env-&gt;NewStringUTF(<span class="string">&quot;onCreate called&quot;</span>);</span><br><span class="line">    env-&gt;CallStaticIntMethod(LogClass, logMehodid, arg1, arg2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取父类</span></span><br><span class="line">    jclass AppCompatActivityClass = env-&gt;FindClass(<span class="string">&quot;androidx/appcompat/app/AppCompatActivity&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取要调用的父类方法 id</span></span><br><span class="line">    jmethodID jmethodId = env-&gt;GetMethodID(AppCompatActivityClass, <span class="string">&quot;onCreate&quot;</span>,</span><br><span class="line">                                           <span class="string">&quot;(Landroid/os/Bundle;)V&quot;</span>);</span><br><span class="line">    <span class="comment">// void CallNonvirtualVoidMethod(jobject obj, jclass clazz, jmethodID methodID, ...)</span></span><br><span class="line">    <span class="comment">// 调用 CallNonvirtualVoidMethod() 传入对象, 父类名称, 父类方法 id, 参数 进行调用</span></span><br><span class="line">    env-&gt;CallNonvirtualVoidMethod(obj, AppCompatActivityClass, jmethodId, BundleObj);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// error  java.lang.IllegalStateException: Already attached 反复调用 super.onCreate() 方法导致</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="JNI-创建对象"><a href="#JNI-创建对象" class="headerlink" title="JNI 创建对象"></a>JNI 创建对象</h1><ol><li><p>通过 <code>FIndClass</code> 查找到对应的类</p></li><li><p>通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GetMethodID</span><br></pre></td></tr></table></figure><p>找到对应的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmethodID</span><br></pre></td></tr></table></figure><ol><li>构造函数名称统一为 <code>&lt;init&gt;</code></li><li>通过函数描述符来区分重载</li></ol></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jni 创建 java 对象</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_com_kevin_reflectiontest_MainActivity_newObject(JNIEnv *env, jobject)&#123;</span><br><span class="line">    <span class="comment">// NewObject 创建实例</span></span><br><span class="line">    jclass TestClazz = env-&gt;FindClass(<span class="string">&quot;com/kevin/reflectiontest/Test&quot;</span>);</span><br><span class="line">    jmethodID jmethodId = env-&gt;GetMethodID(TestClazz, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)V&quot;</span>);</span><br><span class="line">    jstring arg = env-&gt;NewStringUTF(<span class="string">&quot;I am from JNI : Test(String arg)&quot;</span>);</span><br><span class="line">    jobject testobj = env-&gt;NewObject(TestClazz, jmethodId, arg);</span><br><span class="line">    <span class="keyword">if</span> (testobj != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;kevinTest&quot;</span>, <span class="string">&quot;NewObject success! %p&quot;</span>, &amp;testobj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="动态注册和静态注册"><a href="#动态注册和静态注册" class="headerlink" title="动态注册和静态注册"></a>动态注册和静态注册</h1><p>对于任意一个 <code>jni</code> 函数来说, 在该函数调用前, 必须要完成 <code>java</code> 函数与 <code>so</code> 中地址的绑定, 这个绑定过程可以是主动的也可以是被动的;</p><p>被动绑定是由 <code>Dalvik/ART</code> 虚拟机在调用前查找并完成地址的绑定, 这就是静态注册;</p><p>主动注册就是由 <code>app</code> 自己完成的地址绑定;</p><h2 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h2><p>对应的函数名: <code>Java_包名_类名_方法名</code> , 通过指定的方式进行命名的 <code>jni</code> 方法</p><p>优点: 静态注册简单明了, 语义清晰</p><p>缺点: 不够安全, 必须要遵守注册规则从而导致名字过长; 由于要保留符号名, 很容易通过 <code>ida</code> 直接定位到方法地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java native method</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">stringFromJNI</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// jni method</span></span><br><span class="line">extern <span class="string">&quot;C&quot;</span> JNIEXPORT jstring JNICALL</span><br><span class="line">Java_com_afei_jnidemo_MainActivity_stringFromJNI(JNIEnv* env, jobject jobject)&#123;</span><br><span class="line"><span class="comment">// pass</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h2><p>在 <code>JNI_OnLoad</code> 中通过 <code>RegisterNatives</code> 方法手动完成 <code>native</code> 方法和 <code>so</code> 中的方法的绑定, 这样虚拟机就可以通过这个函数银蛇关系直接找到相应的方法了;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> JNIEXPORT jstring JNICALL</span><br><span class="line">Java_com_kevin_registerdemo_MainActivity_stringFromJNI(</span><br><span class="line">        JNIEnv* env,</span><br><span class="line">        jobject <span class="comment">/* this */</span>) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> hello = <span class="string">&quot;Hello from C++&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(hello.c_str());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(JNIEnv *env, jobject, jint a ,jint b)</span></span>&#123;</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;kevinTest&quot;</span>, <span class="string">&quot;result is : %d&quot;</span>, a + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//typedef struct &#123;</span></span><br><span class="line"><span class="comment">//    const char* name;</span></span><br><span class="line"><span class="comment">//    const char* signature;</span></span><br><span class="line"><span class="comment">//    void*       fnPtr;</span></span><br><span class="line"><span class="comment">//&#125; JNINativeMethod;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//jint RegisterNatives(jclass clazz, const JNINativeMethod* methods, </span></span><br><span class="line"><span class="comment">//jint nMethods)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在静态代码块 System.loadLibrary 或者 System.load 的时候自动执行 JNI_Onload</span></span><br><span class="line"><span class="function">JNIEXPORT jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM *vm, <span class="keyword">void</span> *reserved)</span></span>&#123;</span><br><span class="line">    JNIEnv *env = <span class="literal">nullptr</span>;</span><br><span class="line">    vm-&gt;GetEnv(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span> **&gt;(&amp;env), JNI_VERSION_1_6);</span><br><span class="line"></span><br><span class="line">    jclass MainActivityClass = env-&gt;FindClass(<span class="string">&quot;com/kevin/registerdemo/MainActivity&quot;</span>);</span><br><span class="line">    JNINativeMethod method[] = &#123;</span><br><span class="line">            &#123;<span class="string">&quot;add&quot;</span>, <span class="string">&quot;(II)V&quot;</span>, (<span class="keyword">void</span> *) add&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    jint result = env-&gt;RegisterNatives(MainActivityClass,  method, <span class="number">1</span>);</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;kevinTest&quot;</span>, <span class="string">&quot;registerNatives result is : %d&quot;</span>, result);</span><br><span class="line">    <span class="keyword">return</span> JNI_VERSION_1_6;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="so-加载执行顺序"><a href="#so-加载执行顺序" class="headerlink" title="so 加载执行顺序"></a>so 加载执行顺序</h1><h2 id="常用加载so的方法"><a href="#常用加载so的方法" class="headerlink" title="常用加载so的方法"></a>常用加载<code>so</code>的方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.loadLibrary()&#96;: 自动读取&#96;so&#96;文件的文件名, 不需要加&#96;.so</span><br></pre></td></tr></table></figure><p>例如: <code>System.loadLibrary(&quot;native-lib&quot;);</code></p><p><code>System.load()</code>: 需要指定<code>so</code>的绝对路径</p><p>例如: <code>System.load(&quot;/data/data/xxx/test.so&quot;)</code></p><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><ol><li><code>extern &quot;C&quot; void _init(void)&#123;&#125;</code></li><li><code>__attribute__((constructor, visibility (&quot;hidden&quot;))) void initarray_1(void)&#123;&#125;</code></li><li><code>extern &quot;C&quot; jint JNI_OnLoad(JavaVM *vm, void *reserved)&#123;&#125;</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> so </category>
          
      </categories>
      
      
        <tags>
            
            <tag> so </tag>
            
            <tag> ndk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向环境搭建</title>
      <link href="androidenv/"/>
      <url>androidenv/</url>
      
        <content type="html"><![CDATA[<h1 id="google-系统镜像"><a href="#google-系统镜像" class="headerlink" title="google 系统镜像"></a>google 系统镜像</h1><ul><li>推荐<code>8.1.0 OPM7.181205.001</code></li><li>下载地址: <a href="https://developers.google.com/android/images">https://developers.google.com/android/images</a></li><li>国内镜像: <a href="http://aosp.opersys.com/">http://aosp.opersys.com/</a></li></ul><h1 id="sdk-工具包"><a href="#sdk-工具包" class="headerlink" title="sdk 工具包"></a>sdk 工具包</h1><ul><li>包含 adb, fastboot, systrace 等</li><li>下载地址: <a href="https://developer.android.com/studio/releases/platform-tools">https://developer.android.com/studio/releases/platform-tools</a></li></ul><h1 id="twrp-管理工具"><a href="#twrp-管理工具" class="headerlink" title="twrp 管理工具"></a>twrp 管理工具</h1><ul><li>下载地址: <a href="https://twrp.me/Devices/">https://twrp.me/Devices/</a></li></ul><h1 id="SuperSU"><a href="#SuperSU" class="headerlink" title="SuperSU"></a>SuperSU</h1><ul><li>下载地址: <a href="https://supersuroot.org/download/">https://supersuroot.org/download/</a></li></ul><h1 id="Magisk"><a href="#Magisk" class="headerlink" title="Magisk"></a>Magisk</h1><ul><li>下载地址: <a href="https://github.com/topjohnwu/Magisk/releases">https://github.com/topjohnwu/Magisk/releases</a></li></ul><h1 id="apktool"><a href="#apktool" class="headerlink" title="apktool"></a>apktool</h1><ul><li>下载地址: <a href="https://bitbucket.org/iBotPeaches/apktool/downloads/">https://bitbucket.org/iBotPeaches/apktool/downloads/</a></li></ul><h1 id="wifiADB"><a href="#wifiADB" class="headerlink" title="wifiADB"></a>wifiADB</h1><ul><li>下载地址: <a href="https://play.google.com/store/apps/details?id=com.ttxapps.wifiadb&amp;hl=en_US">https://play.google.com/store/apps/details?id=com.ttxapps.wifiadb&amp;hl=en_US</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># connect</span></span><br><span class="line">adb connect ip:port</span><br><span class="line">adb shell</span><br><span class="line"></span><br><span class="line"><span class="comment"># disconnect</span></span><br><span class="line">adb disconnect</span><br></pre></td></tr></table></figure><h1 id="安卓系统设置"><a href="#安卓系统设置" class="headerlink" title="安卓系统设置"></a>安卓系统设置</h1><h2 id="wifi-显示错误"><a href="#wifi-显示错误" class="headerlink" title="wifi 显示错误"></a>wifi 显示错误</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">settings put global captive_portal_http_url https://www.google.cn/generate_204</span><br><span class="line">settings put global captive_portal_https_url https://www.google.cn/generate_204</span><br><span class="line">settings put global ntp_server 1.hk.pool.ntp.org</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h1 id="frida-frida-tools-objection-版本"><a href="#frida-frida-tools-objection-版本" class="headerlink" title="frida frida-tools objection 版本"></a>frida frida-tools objection 版本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保证安装的顺序 否则可能会导致安装的版本不对</span></span><br><span class="line">pip install frida==12.8.0</span><br><span class="line">pip install frida-tools==5.3.0</span><br><span class="line">pip install objection==1.8.4</span><br></pre></td></tr></table></figure><h1 id="BurpSuite-破解版"><a href="#BurpSuite-破解版" class="headerlink" title="BurpSuite 破解版"></a>BurpSuite 破解版</h1><p><a href="https://blog.csdn.net/u014549283/article/details/81248886">https://blog.csdn.net/u014549283/article/details/81248886</a></p><h1 id="brook"><a href="#brook" class="headerlink" title="brook"></a>brook</h1><p><a href="https://github.com/txthinking/brook">https://github.com/txthinking/brook</a></p><h1 id="010editor-过期处理"><a href="#010editor-过期处理" class="headerlink" title="010editor 过期处理"></a>010editor 过期处理</h1><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2020-11-27-082817.jpg" alt="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2020-11-27-082817.jpg"></p><h1 id="miniconda"><a href="#miniconda" class="headerlink" title="miniconda"></a>miniconda</h1><p>pyenv依赖问题一直很麻烦，可以切到miniconda</p><ol><li>下载安装脚本（建议科学）：<br>proxychains wget</li></ol><p><a href="https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh">https://repo.anaconda.com/miniconda/Miniconda3-lat…</a></p><ol><li>给安装脚本可执行权限<br>chmod +x Miniconda3-latest-Linux-x86_64.sh</li><li>运行安装脚本：<br>sh Miniconda3-latest-Linux-x86_64.sh</li><li>安装python3.8.0环境（建议科学）<br>proxychains conda create -n py380 python=3.8.0</li><li>切换到python3.8.0<br>conda activate py380</li><li>安装frida 12.8.0全家桶（建议科学）<br>proxychains pip install frida12.8.0<br>proxychains pip install frida-tools5.3.0<br>proxychains pip install objection==1.8.4</li><li>为了新建的终端默认的env在py380，可以将下面这句话放在/root/.bashrc的末尾，然后source一下。</li></ol><p>conda activate py380</p><ol><li>也可以把这句话放在/root/.bashrc的末尾，source之后只要运行mfrida命令即可切换到py380环境。</li></ol><p>alias mfrida=”conda activate py380”</p><ol><li>第七条和第八条二选一即可。开始享受12.8.0全家桶吧~</li></ol><h1 id="charles-破解版"><a href="#charles-破解版" class="headerlink" title="charles 破解版"></a>charles 破解版</h1><p><a href="https://www.zzzmode.com/mytools/charles/">https://www.zzzmode.com/mytools/charles/</a></p><h1 id="fastboot"><a href="#fastboot" class="headerlink" title="fastboot"></a>fastboot</h1><p><code>r0ysue</code> 星球直接搜索 <code>fastboot</code> 即可</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2020-11-28-085946.png" alt="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2020-11-28-085946.png"></p><h1 id="android-系统刷机教程"><a href="#android-系统刷机教程" class="headerlink" title="android 系统刷机教程"></a>android 系统刷机教程</h1><p><a href="https://github.com/r0ysue/AndroidSecurityStudy/blob/master/FRIDA/A01/README.md">https://github.com/r0ysue/AndroidSecurityStudy/blob/master/FRIDA/A01/README.md</a></p><h1 id="charles-抓包"><a href="#charles-抓包" class="headerlink" title="charles 抓包"></a>charles 抓包</h1><ul><li><a href="http://zhaoxincheng.com/index.php/2020/07/16/%E5%AE%89%E5%8D%937-0%E5%8F%8A%E4%BB%A5%E4%B8%8A%E6%8A%93%E5%8C%85%E8%AF%81%E4%B9%A6%E5%B0%8F%E6%8A%80%E5%B7%A7/">http://zhaoxincheng.com/index.php/2020/07/16/安卓7-0及以上抓包证书小技巧/</a></li></ul><ol><li>将证书安装到 user 下</li><li>用re管理器把<code>/data/misc/user/0/cacerts-added/</code>这个路径下面的文件复制到<code>/system/etc/security/cacerts</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> env </category>
          
      </categories>
      
      
        <tags>
            
            <tag> env </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一行命令内网穿透</title>
      <link href="neiwangchuangtou/"/>
      <url>neiwangchuangtou/</url>
      
        <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>本地搭建 web 服务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__author__ = <span class="string">&quot;Kevin&quot;</span></span><br><span class="line">__time__ = <span class="string">&quot;2021/2/24&quot;</span></span><br><span class="line">__blog__ = <span class="string">&quot;https://kevinspider.github.io/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   app.run()</span><br></pre></td></tr></table></figure><p>运行起来之后, 可以通过本地端口 <code>http://127.0.0.1:5000/</code> 进行正常访问</p><h1 id="穿透"><a href="#穿透" class="headerlink" title="穿透"></a>穿透</h1><p>开启了本地服务之后, 接下来可以通过 <code>localhost</code> 命令将本地网站提供给所有人访问<br><code>ssh -R 80:localhost:5000 localhost.run</code><br>返回的外网地址为:<br><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-02-24-021047.png" alt="img"><br>直接访问即可: <a href="http://zhangyang-9d453a8b.localhost.run/">http://zhangyang-9d453a8b.localhost.run</a></p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xposed</title>
      <link href="xposed/"/>
      <url>xposed/</url>
      
        <content type="html"><![CDATA[<h1 id="Xposed-简介"><a href="#Xposed-简介" class="headerlink" title="Xposed 简介"></a>Xposed 简介</h1><p>Xposed 是可以在不修改 apk 的情况下影响程序运行, 修改系统的框架<br>基于它可以制作出很多功能强大的模块, 且在功能不冲突的情况下同时运行;<br>在这个框架下, 我们可以加载自己编写的插件 app, 实现对目标 apk 的注入, 拦截等;</p><h1 id="xposed-原理"><a href="#xposed-原理" class="headerlink" title="xposed 原理"></a>xposed 原理</h1><p>控制 <code>zygote</code> 进程, 通过替换<code>/system/bin/app_precess</code> 程序控制 <code>zygote</code> 进程, 使得它在系统启动的过程中加载 <code>Xposed framework</code> 的一个 <code>jar</code> 文件 (<code>XposedBridge.jar</code>), 从而完成对 <code>zygote</code> 进程机器创建的虚拟机的劫持, 并且能够允许开发者独立替代任何<code>class</code>, 例如 <code>framework</code>本身, 系统 UI 又或者任意一个 app;</p><h1 id="Xposed-开发范式"><a href="#Xposed-开发范式" class="headerlink" title="Xposed 开发范式"></a>Xposed 开发范式</h1><p>新建 android 项目, 在 AndroidManifest.xml 文件中, Application中 activity 标签上面添加以下代码:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta-data</span><br><span class="line">    android:name=&quot;xposedmodule&quot;</span><br><span class="line">    android:value=&quot;true&quot; /&gt;   <span class="comment">&lt;!--定义 xposed 这是一个 xposed 模块--&gt;</span></span><br><span class="line">&lt;meta-data</span><br><span class="line">    android:name=&quot;xposeddescription&quot;</span><br><span class="line">    android:value=&quot;这是一个Xposed例程&quot; /&gt;  <span class="comment">&lt;!-- 关于模块的描述 --&gt;</span></span><br><span class="line">&lt;meta-data</span><br><span class="line">    android:name=&quot;xposedminversion&quot;</span><br><span class="line">    android:value=&quot;53&quot; /&gt;   <span class="comment">&lt;!-- 该模块支持的最低版本 本例为 53 --&gt;</span></span><br></pre></td></tr></table></figure><p>在 AndroidStudio3.1 中, 自动配置 XposedBridgeApi.jar;</p><p>在 项目/app/src/main/ 目录下找到 build.gradle, 添加以下代码:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">compileOnly &#x27;de.robv.android.xposed:api:82&#x27;</span><br><span class="line">compileOnly &#x27;de.robv.android.xposed:api:82:sources&#x27;</span><br></pre></td></tr></table></figure><p>结果如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compileOnly &#x27;de.robv.android.xposed:api:82&#x27;</span><br><span class="line">    compileOnly &#x27;de.robv.android.xposed:api:82:sources&#x27;</span><br><span class="line">    implementation fileTree(dir: &quot;libs&quot;, include: [&quot;*.jar&quot;])</span><br><span class="line">    implementation &#x27;androidx.appcompat:appcompat:1.2.0&#x27;</span><br><span class="line">    implementation &#x27;androidx.constraintlayout:constraintlayout:2.0.4&#x27;</span><br><span class="line">    testImplementation &#x27;junit:junit:4.12&#x27;</span><br><span class="line">    androidTestImplementation &#x27;androidx.test.ext:junit:1.1.2&#x27;</span><br><span class="line">    androidTestImplementation &#x27;androidx.test.espresso:espresso-core:3.3.0&#x27;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Project 模式下, 找到 /app/src/main/java/包名/ , 即在 MainActivity 同级目录下, 创建 java 类;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kevin.xposed03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hook</span> <span class="keyword">implements</span> <span class="title">IXposedHookLoadPackage</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!lpparam.packageName.equals(<span class="string">&quot;包名&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>告诉 xposed 框架入口类的位置, 在 /app/src/main 目录下创建 assets 文件夹, 在该 assets 文件中创建 xposed_init.txt 文件, 在里面定义入口类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.kevin.xposed03.Hook</span><br></pre></td></tr></table></figure><h1 id="Hook-获取类和设置类的静态属性"><a href="#Hook-获取类和设置类的静态属性" class="headerlink" title="Hook 获取类和设置类的静态属性"></a>Hook 获取类和设置类的静态属性</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kevin.xposed03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hook</span> <span class="keyword">implements</span> <span class="title">IXposedHookLoadPackage</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;Hook&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;handleLoadPackage: Hook starting&quot;</span>);</span><br><span class="line"><span class="comment">//        xposed 是全局 hook, 必须实现 IXposedHookLoadPackage 的接口</span></span><br><span class="line"><span class="comment">//        handleLoadPackage 是 hook 之后的回调, 其中传入的参数 lpparam 携带了包名信息, 需要进行过滤</span></span><br><span class="line">        <span class="keyword">if</span> (!lpparam.packageName.equals(<span class="string">&quot;com.xiaojianbang.xposeddemo&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">        Log.d(TAG, <span class="string">&quot;handleLoadPackage: find target package&quot;</span>);</span><br><span class="line"><span class="comment">//        hook 修改类的静态属性</span></span><br><span class="line"><span class="comment">//        1. 找到要 hook 的类 p1:要 hook 的类名 p2:classLoader</span></span><br><span class="line">        Class&lt;?&gt; targetClazz = XposedHelpers.findClass(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo&quot;</span>, lpparam.classLoader);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        2. setStaticIntField p1: findClass 的目标类 p2: 字段名称 p3: 要设置的值</span></span><br><span class="line">        XposedHelpers.setStaticIntField(targetClazz, <span class="string">&quot;staticInt&quot;</span>, <span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">int</span> staticInt = XposedHelpers.getStaticIntField(targetClazz, <span class="string">&quot;staticInt&quot;</span>);</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;handleLoadPackage: xposed staticInt is &quot;</span> + staticInt);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        设置 String 类型的静态变量的值</span></span><br><span class="line">        XposedHelpers.setStaticObjectField(targetClazz,<span class="string">&quot;Tag&quot;</span>, <span class="string">&quot;kevin&quot;</span>);</span><br><span class="line">        String hookTag = (String) XposedHelpers.getStaticObjectField(targetClazz, <span class="string">&quot;Tag&quot;</span>);</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;handleLoadPackage: xposed hookTag is &quot;</span> + hookTag);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>hadnleLoadPackage() 是 hook 之后的回调函数, 传入的参数 lpparam 携带了大量的信息;</li><li>lpparam.packageName 可以获取到加载的包名, xposed 是全局 hook, 需要使用包名进行过滤</li><li>lpparam.classLoader 可以获取到当前的 classLoader</li><li>XposedHelpers.findClass(类名字符串, 当前的 classLoader 对象) 获取到要 hook 的类</li><li>XposedHelpers.setStaticIntField(要 hook 的类, 静态字段名字符串, 要设置的值) 给类的静态属性赋值</li><li>XposedHelpers.getStaticIntFiled(要 hook 的类, 静态字段名字符串) 获取 int 类型的类的静态属性</li><li>XposedHelpers.setStaticObjectField(要 hook 的类, 静态字段名字符串, 要设置的值) 给非基础数据类型的类的静态属性赋值</li><li>XposedHelpers.getStaticObjectField(要 hook 的类, 静态字段名字符串) 获取非基础数据类型的类的静态属性的值</li></ul><h1 id="Hook-构造函数"><a href="#Hook-构造函数" class="headerlink" title="Hook 构造函数"></a>Hook 构造函数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        hook 构造函数</span></span><br><span class="line">Class&lt;?&gt; targetClazz = XposedHelpers.findClass(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo&quot;</span>, lpparam.classLoader);</span><br><span class="line">        XposedHelpers.findAndHookConstructor(targetClazz, <span class="keyword">new</span> XC_MethodHook() &#123;</span><br><span class="line"><span class="comment">//            hook 方法需要实现 XC_MethodHook 抽象类, 实现 beforeHookedMethod 方法和 afterHookedMethod 方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Log.i(TAG, <span class="string">&quot;beforeHookedMethod: 这是无参构造函数前&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Log.i(TAG, <span class="string">&quot;beforeHookedMethod: 这是无参构造函数后&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        hook 有参构造函数</span></span><br><span class="line"><span class="comment">//        参数要 hook 的 class 和传入的参数类型 都是字节码 </span></span><br><span class="line">        XposedHelpers.findAndHookConstructor(targetClazz, String.class, <span class="keyword">new</span> XC_MethodHook() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                param.args[<span class="number">0</span>] = <span class="string">&quot;Xposed 专题&quot;</span>;</span><br><span class="line">                Log.i(TAG, <span class="string">&quot;beforeHookedMethod: 这是有参构造函数前&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Log.i(TAG, <span class="string">&quot;beforeHookedMethod: 这是有参构造函数后&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-普通方法"><a href="#Hook-普通方法" class="headerlink" title="Hook 普通方法"></a>Hook 普通方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    hook 普通方法</span></span><br><span class="line"><span class="comment">//    xposed 中 hook 普通方法 无论是 static / not static / private / public 都是调用 findAndHookMethod</span></span><br><span class="line">Class&lt;?&gt; targetClazz = XposedHelpers.findClass(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo&quot;</span>, lpparam.classLoader);</span><br><span class="line">        XposedHelpers.findAndHookMethod(targetClazz, <span class="string">&quot;publicFunc&quot;</span>, String.class, <span class="keyword">new</span> XC_MethodHook() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Log.i(TAG, <span class="string">&quot;beforeHookedMethod: publicFunc hooked before input param is: &quot;</span> + param.args[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Log.i(TAG, <span class="string">&quot;beforeHookedMethod: publicFunc hooked after&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h1 id="Hook-复杂参数"><a href="#Hook-复杂参数" class="headerlink" title="Hook 复杂参数"></a>Hook 复杂参数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        hook 复杂参数</span></span><br><span class="line"><span class="comment">//        参数 1: String</span></span><br><span class="line"><span class="comment">//        参数 2: String[][]</span></span><br><span class="line"><span class="comment">//        参数 3: Map</span></span><br><span class="line"><span class="comment">//        参数 4: ArrayList</span></span><br><span class="line">Class&lt;?&gt; targetClazz = XposedHelpers.findClass(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo&quot;</span>, lpparam.classLoader);</span><br><span class="line">        XposedHelpers.findAndHookMethod(</span><br><span class="line">                targetClazz,</span><br><span class="line">                <span class="string">&quot;complexParameterFunc&quot;</span>,</span><br><span class="line">                String.class, <span class="comment">// &quot;java.lang.String&quot;</span></span><br><span class="line">                String[][].class, <span class="comment">// &quot;[[Ljava.lang.String;&quot;</span></span><br><span class="line">                Map.class, <span class="comment">// &quot;java.util.Map&quot;</span></span><br><span class="line">                ArrayList.class, <span class="keyword">new</span> XC_MethodHook() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        Log.i(TAG, <span class="string">&quot;beforeHookedMethod: complexParameterFunc hooked before&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        Log.i(TAG, <span class="string">&quot;beforeHookedMethod: complexParameterFunc hooked after&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><h1 id="Hook-自定义类"><a href="#Hook-自定义类" class="headerlink" title="Hook 自定义类"></a>Hook 自定义类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        hook 自定义类</span></span><br><span class="line"><span class="comment">//        获取自定义的类</span></span><br><span class="line"><span class="comment">//        获取 class 字节码的方法</span></span><br><span class="line"><span class="comment">//          1. 类名.class</span></span><br><span class="line"><span class="comment">//          2. 对象.getClass()</span></span><br><span class="line"><span class="comment">//          3. Class.forName()</span></span><br><span class="line"><span class="comment">//          4. &quot;java.lang.String&quot; 传入类的路径字符串</span></span><br><span class="line"><span class="comment">//          5. new DexClassLoader().loadClass 动态加载</span></span><br><span class="line"><span class="comment">//          6. XposedHelpers.findClass()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Class&lt;?&gt; Animal =  XposedHelpers.findClass(&quot;com.xiaojianbang.xposeddemo.Animal&quot;,lpparam.classLoader);</span></span><br><span class="line"><span class="comment">//        Class&lt;?&gt; Animal = lpparam.classLoader.loadClass(&quot;com.xiaojianbang.xposeddemo.Animal&quot;);</span></span><br><span class="line">        Class&lt;?&gt; Animal = Class.forName(<span class="string">&quot;com.xiaojianbang.xposeddemo.Animal&quot;</span>, <span class="keyword">false</span>, lpparam.classLoader);</span><br><span class="line"></span><br><span class="line">        XposedHelpers.findAndHookMethod(</span><br><span class="line">                targetClazz,</span><br><span class="line">                <span class="string">&quot;Inner&quot;</span>,</span><br><span class="line">                Animal,</span><br><span class="line">                String.class, <span class="keyword">new</span> XC_MethodHook() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        Log.i(TAG, <span class="string">&quot;beforeHookedMethod: Inner&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        Log.i(TAG, <span class="string">&quot;afterHookedMethod: Inner&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><h1 id="Hook-替换函数"><a href="#Hook-替换函数" class="headerlink" title="Hook 替换函数"></a>Hook 替换函数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        hook 替换函数</span></span><br><span class="line"><span class="comment">//        不是在方法执行前或后增加内容, 而是直接覆盖该方法, 可以调用原有方法</span></span><br><span class="line">Class&lt;?&gt; targetClazz = XposedHelpers.findClass(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo&quot;</span>, lpparam.classLoader);</span><br><span class="line">        XposedHelpers.findAndHookMethod(targetClazz, <span class="string">&quot;repleaceFunc&quot;</span>, <span class="keyword">new</span> XC_MethodReplacement() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> Object <span class="title">replaceHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;replaceHookedMethod: 替换原有的方法 repleaceFunc&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h1 id="Hook-内部类并获取对象的属性"><a href="#Hook-内部类并获取对象的属性" class="headerlink" title="Hook 内部类并获取对象的属性"></a>Hook 内部类并获取对象的属性</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; InnerClass = XposedHelpers.findClass(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo$InnerClass&quot;</span>, lpparam.classLoader);</span><br><span class="line">XposedHelpers.findAndHookMethod(InnerClass, <span class="string">&quot;innerFunc&quot;</span>, String.class, <span class="keyword">new</span> XC_MethodHook() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.beforeHookedMethod(param);</span><br><span class="line">        <span class="keyword">int</span> aa = XposedHelpers.getIntField(param.thisObject, <span class="string">&quot;innerPublicInt&quot;</span>);</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;beforeHookedMethod: innerPublicInt is &quot;</span> + aa);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.afterHookedMethod(param);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>内部类为 类名$内部类名</li><li>获取当前对象 param.thisObject 获取当前的对象</li></ul><h1 id="Hook-主动调用"><a href="#Hook-主动调用" class="headerlink" title="Hook 主动调用"></a>Hook 主动调用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class targetClass = XposedHelpers.findClass(<span class="string">&quot;com.xiaojianbang.xposeddemo.Demo&quot;</span>, lpparam.classLoader);</span><br><span class="line">Log.d(TAG, <span class="string">&quot;beforeHookedMethod: 调用前&quot;</span>);</span><br><span class="line">XposedHelpers.callMethod(targetClass.newInstance(), <span class="string">&quot;refl&quot;</span>);</span><br><span class="line">Log.d(TAG, <span class="string">&quot;beforeHookedMethod: 调用后&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="Hook-打印调用栈"><a href="#Hook-打印调用栈" class="headerlink" title="Hook 打印调用栈"></a>Hook 打印调用栈</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Log.e(<span class="string">&quot;调用栈 tag&quot;</span>, <span class="string">&quot;Stack&quot;</span>, <span class="keyword">new</span> Throwable(<span class="string">&quot;手动抛出异常&quot;</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> xposed </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xposed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>objection 指南</title>
      <link href="objection/"/>
      <url>objection/</url>
      
        <content type="html"><![CDATA[<h1 id="objectiong"><a href="#objectiong" class="headerlink" title="objectiong"></a>objectiong</h1><h2 id="objection-启动"><a href="#objection-启动" class="headerlink" title="objection 启动"></a>objection 启动</h2><h3 id="attach-启动"><a href="#attach-启动" class="headerlink" title="attach 启动"></a>attach 启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection -g -d packagename explore</span><br></pre></td></tr></table></figure><h3 id="spawn-启动"><a href="#spawn-启动" class="headerlink" title="spawn 启动"></a>spawn 启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--startup-command</span><br><span class="line">objection -g packagename explore --startup-command &#39;android hooking watch class_method android.app.AlertDialog.onCreate --dump-args --dump-backtrace --dump-return&#39;</span><br></pre></td></tr></table></figure><h3 id="连接远程自定义端口"><a href="#连接远程自定义端口" class="headerlink" title="连接远程自定义端口"></a>连接远程自定义端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection -N -h 192.168.0.1 -p 6666 -g com.kevin.demo1 explore</span><br></pre></td></tr></table></figure><h2 id="objection-memory"><a href="#objection-memory" class="headerlink" title="objection memory"></a>objection memory</h2><h3 id="memory-list-modules"><a href="#memory-list-modules" class="headerlink" title="memory list modules"></a>memory list modules</h3><p>查看内存中加载的 <code>module</code> , 可以方便获取 <code>.so</code> 的基地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memory list modules [--json module.json]</span><br></pre></td></tr></table></figure><ul><li>result</li></ul><h3 id="memory-list-exports"><a href="#memory-list-exports" class="headerlink" title="memory list exports"></a>memory list exports</h3><p>查看指定 <code>module</code> 的导出函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memory list exports [libssl.so](http:&#x2F;&#x2F;libssl.so) [--json exports.json]</span><br></pre></td></tr></table></figure><ul><li>result</li></ul><h2 id="objection-android"><a href="#objection-android" class="headerlink" title="objection android"></a>objection android</h2><h3 id="解除-ssl-pinning"><a href="#解除-ssl-pinning" class="headerlink" title="解除 ssl pinning"></a>解除 ssl pinning</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android sslpinning disable</span><br></pre></td></tr></table></figure><h3 id="获取当前的-activity"><a href="#获取当前的-activity" class="headerlink" title="获取当前的 activity"></a>获取当前的 <code>activity</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking get current_activity</span><br></pre></td></tr></table></figure><h3 id="获取当前的所有-activities"><a href="#获取当前的所有-activities" class="headerlink" title="获取当前的所有 activities"></a>获取当前的所有 <code>activities</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking list activities</span><br></pre></td></tr></table></figure><ul><li>result</li></ul><h3 id="获取当前的所有-services"><a href="#获取当前的所有-services" class="headerlink" title="获取当前的所有 services"></a>获取当前的所有 <code>services</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking list services</span><br></pre></td></tr></table></figure><h3 id="获取当前所有的-receivers"><a href="#获取当前所有的-receivers" class="headerlink" title="获取当前所有的 receivers"></a>获取当前所有的 <code>receivers</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking list receivers</span><br></pre></td></tr></table></figure><h3 id="获取当前加载的所有-classes"><a href="#获取当前加载的所有-classes" class="headerlink" title="获取当前加载的所有 classes"></a>获取当前加载的所有 <code>classes</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking list classes</span><br></pre></td></tr></table></figure><h3 id="获取指定-class-下的所有-methods"><a href="#获取指定-class-下的所有-methods" class="headerlink" title="获取指定 class 下的所有 methods"></a>获取指定 <code>class</code> 下的所有 <code>methods</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking list class_methods com.kevin.demoso1.MainActivity</span><br></pre></td></tr></table></figure><ul><li>result</li></ul><h3 id="模糊查询-class"><a href="#模糊查询-class" class="headerlink" title="模糊查询 class"></a>模糊查询 <code>class</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking search classes Main</span><br></pre></td></tr></table></figure><ul><li>result</li></ul><h3 id="模糊查询-method"><a href="#模糊查询-method" class="headerlink" title="模糊查询 method"></a>模糊查询 <code>method</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking search methods jni</span><br></pre></td></tr></table></figure><h3 id="查找指定-class-的对象实例"><a href="#查找指定-class-的对象实例" class="headerlink" title="查找指定 class 的对象实例"></a>查找指定 <code>class</code> 的对象实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android heap search instances com.kevin.demoso1.MainActivity</span><br></pre></td></tr></table></figure><ul><li>result</li></ul><h3 id="调用实例对象的方法"><a href="#调用实例对象的方法" class="headerlink" title="调用实例对象的方法"></a>调用实例对象的方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android heap execute 0x1eea myfirstjni --return-string</span><br></pre></td></tr></table></figure><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2020-09-02-084704.png" alt="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2020-09-02-084704.png"></p><h3 id="启动指定-activity"><a href="#启动指定-activity" class="headerlink" title="启动指定 activity"></a>启动指定 <code>activity</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android intent launch_activity com.kevin.demoso1.MainActivity</span><br></pre></td></tr></table></figure><h3 id="启动指定-service"><a href="#启动指定-service" class="headerlink" title="启动指定 service"></a>启动指定 <code>service</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android intent launch_service com.kevin.demoso1.MainService</span><br></pre></td></tr></table></figure><h3 id="监控指定的-class"><a href="#监控指定的-class" class="headerlink" title="监控指定的 class"></a>监控指定的 <code>class</code></h3><p>定位到了关键 <code>class</code> , 可以通过 <code>watch class</code> 来监控该类下的所有方法, 帮助定位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class com.kevin.demoso1.MainActivity --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2020-09-02-091131.png" alt="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2020-09-02-091131.png"></p><h3 id="监控指定的-method"><a href="#监控指定的-method" class="headerlink" title="监控指定的 method"></a>监控指定的 <code>method</code></h3><p>通过 <code>watch class_method</code> 监控可疑的方法, 对方法的参数, 返回值和调用栈进行打印;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method com.kevin.demoso1.MainActivity.myfirstjniJNI --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2020-09-02-091541.png" alt="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2020-09-02-091541.png"></p><h3 id="过滤-objection-结果"><a href="#过滤-objection-结果" class="headerlink" title="过滤 objection 结果"></a>过滤 objection 结果</h3><p><code>objection log</code> 默认是不能用 <code>grep</code> 进行过滤的, 但是可以通过</p><p><code>objection -g packagename run commandline | grep keyword</code> 进行过滤</p><p>例如: <code>objection -g com.android.settings run memory list modules | grep libc</code></p><p>还可以通过查看 <code>~/.objection/objection.log</code> 来查看日志信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~&#x2F;.objection&#x2F;objection.log | grep -i display</span><br></pre></td></tr></table></figure><h2 id="一次-hook-多个类"><a href="#一次-hook-多个类" class="headerlink" title="一次 hook 多个类"></a>一次 hook 多个类</h2><ol><li><p>获取到指定的包下面的所有的类</p><p><code>android hooking search class okhttp</code></p></li><li><p>复制 <code>class</code> , 创建 txt 进行替换, 在类名前面加上 <code>android hooking watch class</code></p></li><li><p>使用 <code>objection -g packagename explore -c file.txt</code> 进行批量 <code>hook</code></p><p><code>objection -g com.kevin.Test explore -c hooklist.txt</code></p></li></ol><h2 id="objection指定参数进行-hook"><a href="#objection指定参数进行-hook" class="headerlink" title="objection指定参数进行 hook"></a><code>objection</code>指定参数进行 <code>hook</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method 指定类和方法 参数类型, 参数类型</span><br></pre></td></tr></table></figure><p>例如: <code>android hooking watch class_method javax.crypto.Mac.getInstance java.lang.String</code></p><h1 id="wallbreaker"><a href="#wallbreaker" class="headerlink" title="wallbreaker"></a>wallbreaker</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [https:&#x2F;&#x2F;github.com&#x2F;hluwa&#x2F;Wallbreaker](https:&#x2F;&#x2F;github.com&#x2F;hluwa&#x2F;Wallbreaker) ~&#x2F;.objection&#x2F;plugins&#x2F;Wallbreaker</span><br></pre></td></tr></table></figure><h2 id="objection-加载插件"><a href="#objection-加载插件" class="headerlink" title="objection 加载插件"></a>objection 加载插件</h2><h3 id="加载-wallbreaker"><a href="#加载-wallbreaker" class="headerlink" title="加载 wallbreaker"></a>加载 <code>wallbreaker</code></h3><p>启动时加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection -g [com.app.name](http:&#x2F;&#x2F;com.app.name) explore -P ~&#x2F;.objection&#x2F;plugins</span><br></pre></td></tr></table></figure><p>启动后加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugin load &#x2F;Users&#x2F;zhangyang&#x2F;.objection&#x2F;plugins&#x2F;Wallbreaker</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ol><li><code>plugin wallbreaker classsearch &lt;pattern&gt;</code> 查找指定的类</li><li><code>plugin wallbreaker classdump &lt;classname&gt; [--fullname]</code> <code>dump</code> 指定的类</li><li><code>plugin wallbreaker objectsearch &lt;classname&gt;</code> 查找指定的类的实例</li><li><code>plugin wallbreaker objectdump &lt;handle&gt; [--fullname]</code> <code>dump</code> 指定的类的实例</li></ol><h1 id="dexdump"><a href="#dexdump" class="headerlink" title="dexdump"></a>dexdump</h1><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;hluwa&#x2F;FRIDA-DEXDump ~&#x2F;.objection&#x2F;plugins&#x2F;dexdump</span><br></pre></td></tr></table></figure><h2 id="加载-dexdump插件"><a href="#加载-dexdump插件" class="headerlink" title="加载 dexdump插件"></a>加载 <code>dexdump</code>插件</h2><p>启动 <code>objection</code> , 读取插件, 这里要注意路径, <code>Wallbreaker</code> 直接读取 <code>plugins</code> 即可, 但是 <code>fridadexdump</code> 需要读取到 <code>dexdump</code> 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.hello.qqc explore -P ~/.objection/plugins/dexdump/</span><br><span class="line"></span><br><span class="line"><span class="comment"># to dump all found dex.</span></span><br><span class="line">plugin dexdump dump </span><br><span class="line"></span><br><span class="line"><span class="comment"># to search and print all dex</span></span><br><span class="line">plugin dexdump search</span><br></pre></td></tr></table></figure><h2 id="python-中使用-dexdump"><a href="#python-中使用-dexdump" class="headerlink" title="python 中使用 dexdump"></a>python 中使用 dexdump</h2><p><code>pip3 install frida-dexdump</code><br><code>frida-dexdump -h</code><br><code>frida-dexdump dump</code> 直接脱当前应用</p><p>arguments:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-n: [Optional] Specify target process name, when spawn mode, it requires an application package name. If not specified, use frontmost application.</span><br><span class="line">-p: [Optional] Specify pid when multiprocess. If not specified, dump all.</span><br><span class="line">-f: [Optional] Use spawn mode, default is <span class="built_in">disable</span>.</span><br><span class="line">-s: [Optional] When spawn mode, start dump work after sleep few seconds. default is 10s.</span><br><span class="line">-d: [Optional] Enable deep search maybe detected more dex, but speed will be slower.</span><br><span class="line">-h: show <span class="built_in">help</span>.</span><br></pre></td></tr></table></figure><h2 id="查找脱下的-dex"><a href="#查找脱下的-dex" class="headerlink" title="查找脱下的 dex"></a>查找脱下的 <code>dex</code></h2><p>进入存放脱下来的 <code>dex</code> 文件目录, 一般是在 <code>~/.objection/plugins/包名</code> 路径下</p><p>定位主文件</p><ul><li>通过文件大小判断 <code>ls -lht</code></li><li>通过 <code>grep -rnli &quot;mainactivity&quot; *</code> 获取当前目录下含有 <code>MainActivity</code> 的目标文件</li></ul><h2 id="重打包"><a href="#重打包" class="headerlink" title="重打包"></a>重打包</h2><ol><li><code>apktool d -s xxx.apk</code> 保留壳的 <code>dex</code> 文件</li><li>删除原 <code>dex</code> 文件, 将脱壳后的文件全部复制进来, 将文件名修改为 <code>classes.dex</code> <code>classes2.dex</code> <code>classes3.dex</code></li><li>修改 <code>AndroidManifest.xml</code> 文件中的 <code>application</code> 节点下面的 <code>android:name</code> 属性, 原来的是 <code>android:name=&quot;com.SecShell.SecShell.ApplicationWrapper&quot;</code> ，这是梆梆壳启动的地方，现在我们需要修改为脱壳后的 <code>dex</code> 中继承了 <code>Application</code> 的类，我们搜索 <code>extends Appliaction</code> ，可以找到是 <code>cn.net.tokyo.ccg.base.App</code></li><li><code>apktool b 包名</code> 进行重打包</li></ol>]]></content>
      
      
      <categories>
          
          <category> objection </category>
          
      </categories>
      
      
        <tags>
            
            <tag> objection </tag>
            
            <tag> wallbreaker </tag>
            
            <tag> dexdump </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frida hook java</title>
      <link href="fridahookjava/"/>
      <url>fridahookjava/</url>
      
        <content type="html"><![CDATA[<h1 id="Frida-启动"><a href="#Frida-启动" class="headerlink" title="Frida 启动"></a>Frida 启动</h1><h2 id="attach-启动"><a href="#attach-启动" class="headerlink" title="attach 启动"></a>attach 启动</h2><p>直接附加到指定包名的应用中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U com.kevin.android -l hook.js --no-pause</span><br></pre></td></tr></table></figure><p>直接附加到当前应用中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">frida -UF -l hook.js --no-pause</span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">import frida</span><br><span class="line"></span><br><span class="line">def on_message(message,data):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;message&quot;</span>,message)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data&quot;</span>,data)</span><br><span class="line"></span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line">session = device.attach(<span class="string">&quot;com.kevin.demo1&quot;</span>)</span><br><span class="line"></span><br><span class="line">with open(<span class="string">&quot;./demo1.js&quot;</span>,<span class="string">&quot;r&quot;</span>) as f:</span><br><span class="line">    script = session.create_script(f.read())</span><br><span class="line"></span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>,on_message)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><h2 id="spawn-启动"><a href="#spawn-启动" class="headerlink" title="spawn 启动"></a>spawn 启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">frida -U -f com.kevin.android -l demo1.js --no-pause</span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">import frida</span><br><span class="line"></span><br><span class="line">def on_message(message,data):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;message&quot;</span>,message)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data&quot;</span>,data)</span><br><span class="line"></span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line">pid = device.spawn([<span class="string">&quot;com.kevin.demo1&quot;</span>])</span><br><span class="line">device.resume(pid)</span><br><span class="line">session = device.attach(pid)</span><br><span class="line"></span><br><span class="line">with open(<span class="string">&quot;./rpc_demo.js&quot;</span>,<span class="string">&#x27;r&#x27;</span>) as f:</span><br><span class="line">    script = session.create_script(f.read())</span><br><span class="line"></span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>,on_message)</span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><h1 id="frida-server-自定义端口"><a href="#frida-server-自定义端口" class="headerlink" title="frida-server 自定义端口"></a>frida-server 自定义端口</h1><h2 id="frida-server"><a href="#frida-server" class="headerlink" title="frida server"></a>frida server</h2><p>更改 frida server 默认端口: 27042 并开启远程连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su -</span><br><span class="line"><span class="built_in">cd</span> /data/<span class="built_in">local</span>/tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入 wifiadb 对应的 ip 和自定义端口</span></span><br><span class="line">./frida-server -l 192.168.0.1:6666</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用默认端口启动</span></span><br><span class="line">./frida-server -l 192.168.0.1</span><br></pre></td></tr></table></figure><h2 id="frida"><a href="#frida" class="headerlink" title="frida"></a>frida</h2><p>frida 远程连接自定义端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接指定 6666 端口</span></span><br><span class="line">frida -H 192.168.0.1:6666 com.demo1.app -l demo1.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认使用端口 27042</span></span><br><span class="line">frida -H 192.168.0.1 -l demo1.js</span><br></pre></td></tr></table></figure><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> frida, sys</span><br><span class="line"></span><br><span class="line">jsCode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">console.log(&quot;test&quot;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">message</span>(<span class="params">message, data</span>):</span></span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;send&#x27;</span>:</span><br><span class="line">        print(<span class="string">f&quot;[*] <span class="subst">&#123;message[<span class="string">&#x27;payload&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(message)</span><br><span class="line"><span class="comment"># ./fs120800 -l &quot;0.0.0.0:6666&quot;</span></span><br><span class="line"><span class="comment"># adb wifi 10.0.0.23</span></span><br><span class="line">process = frida.get_device_manager().add_remote_device(<span class="string">&#x27;127.0.0.1:6666&#x27;</span>).attach(<span class="string">&#x27;com.kevin.app&#x27;</span>)</span><br><span class="line">script = process.create_script(jsCode)</span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>,message)</span><br><span class="line">script.load()</span><br><span class="line"><span class="built_in">input</span>()</span><br></pre></td></tr></table></figure><h1 id="Frida-rpc-远程调用"><a href="#Frida-rpc-远程调用" class="headerlink" title="Frida rpc 远程调用"></a>Frida rpc 远程调用</h1><h2 id="python-1"><a href="#python-1" class="headerlink" title="python"></a>python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, request</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">message</span>(<span class="params">message, data</span>):</span></span><br><span class="line"><span class="keyword">if</span> message[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;send&#x27;</span>:</span><br><span class="line">print(<span class="string">f&quot;[*] <span class="subst">&#123;message[<span class="string">&#x27;payload&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(message)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ./fs120800 -l &quot;0.0.0.0:6666&quot;</span></span><br><span class="line"><span class="comment"># adb wifi 10.0.0.123</span></span><br><span class="line"><span class="comment"># 远程 frida-server 路径 adb wifi 的 ip : frida-server 启动的端口</span></span><br><span class="line">session = frida.get_device_manager().add_remote_device(<span class="string">&#x27;10.0.0.123:6666&#x27;</span>).attach(<span class="string">&#x27;com.example.demoso1&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/Users/zhangyang/codes/fridaProject/rpcDemo/hook.js&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    jsCode = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;加载代码&quot;, jsCode)</span></span><br><span class="line">script = session.create_script(jsCode)</span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>,message)</span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;加密&quot;,&quot;1213&quot;)</span></span><br><span class="line"><span class="comment"># encodeResult = script.exports.invokemethod01(&quot;123&quot;)</span></span><br><span class="line"><span class="comment"># decodeResult = script.exports.invokemethod02(encodeResult)</span></span><br><span class="line"><span class="comment"># print(decodeResult)</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/encrypt&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span><span class="comment">#data解密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_class</span>():</span></span><br><span class="line">    data = request.get_data()</span><br><span class="line">    json_data = json.loads(data.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    postdata = json_data.get(<span class="string">&quot;data&quot;</span>)</span><br><span class="line">    res = script.exports.invokemethod01(postdata)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/decrypt&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span><span class="comment">#url加密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_class</span>():</span></span><br><span class="line">    data = request.get_data()</span><br><span class="line">    json_data = json.loads(data.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    postdata = json_data.get(<span class="string">&quot;data&quot;</span>)</span><br><span class="line">    print(postdata)</span><br><span class="line">    res = script.exports.invokemethod02(postdata)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///&lt;reference path=&#x27;/Users/zhangyang/node_modules/@types/frida-gum/index.d.ts&#x27;/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先 hook 方法 method01</span></span><br><span class="line"><span class="comment">// function hookmethod1()&#123;</span></span><br><span class="line"><span class="comment">//     Java.perform(function()&#123;</span></span><br><span class="line"><span class="comment">//         var targetClass = Java.use(&quot;com.example.demoso1.MainActivity&quot;);</span></span><br><span class="line"><span class="comment">//         targetClass.method01.implementation = function(str)&#123;</span></span><br><span class="line"><span class="comment">//             console.log(&quot;str is &quot;, str);</span></span><br><span class="line"><span class="comment">//             var result = this.method01(str);</span></span><br><span class="line"><span class="comment">//             console.log(&quot;result is &quot;, result);</span></span><br><span class="line"><span class="comment">//             return result;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;)</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主动调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fridamethod01</span>(<span class="params">inputStr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="literal">null</span>;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> targetClass = Java.use(<span class="string">&quot;com.example.demoso1.MainActivity&quot;</span>);</span><br><span class="line">        result = targetClass.method01(inputStr);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fridamethod02</span>(<span class="params">inputStr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// public native String method02(String str);</span></span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.choose(<span class="string">&quot;com.example.demoso1.MainActivity&quot;</span>,&#123;</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span>(<span class="params">ins</span>)</span>&#123;</span><br><span class="line">                result = ins.method02(inputStr);</span><br><span class="line">            &#125;,</span><br><span class="line">            onComplete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优先测试 js 中的主动调用</span></span><br><span class="line"><span class="comment">// function main()&#123;</span></span><br><span class="line"><span class="comment">//     console.log(&quot;你好 -&gt; 结果为:&quot;, fridamethod01(&quot;你好&quot;));</span></span><br><span class="line"><span class="comment">//     console.log(&quot;27cae29a0913f6791705ca10be31a3e0 -&gt; 结果为&quot;, fridamethod02(&quot;27cae29a0913f6791705ca10be31a3e0&quot;))</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// setImmediate(main);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于主动调用设置 rpc</span></span><br><span class="line">rpc.exports = &#123;</span><br><span class="line">    invokemethod01: fridamethod01,</span><br><span class="line">    invokemethod02: fridamethod02,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h2><p>tmp.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;data&quot;</span>: <span class="string">&quot;62feb9a98a01945ab06c0dd7823adc57&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">siege -c30 -r1 <span class="string">&quot;&lt;http://127.0.0.1:5000/encrypt&gt; POST &lt; tmp.json&quot;</span></span><br></pre></td></tr></table></figure><h2 id="nps-进行内网穿透"><a href="#nps-进行内网穿透" class="headerlink" title="nps 进行内网穿透"></a>nps 进行内网穿透</h2><ol><li><p>nps server 启动</p><p>mac: <code>sudo nps start</code></p></li><li><p>新建客户端</p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-01-14-032324.png" alt="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-01-14-032324.png"></p><p>安卓手机连接客户端 <code>./npc -server=10.0.0.124:8024 -vkey=hm40rtjpf2j3c1up -type=tcp</code></p></li><li><p>给客户端添加和 frida server 的端口映射</p><p>安卓手机启动 frida-server: <code>./fs12800 -l 0.0.0.0:6666</code></p><p><img src="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-01-14-032703.png" alt="https://kevinspider-1258012111.cos.ap-shanghai.myqcloud.com/2021-01-14-032703.png"></p><p>将目标 frida-server 的端口映射到 56666 端口上</p></li><li><p>python 脚本更改和 frida-server 的连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session = frida.get_device_manager().add_remote_device(<span class="string">&#x27;10.0.0.124:56666&#x27;</span>).attach(<span class="string">&#x27;com.example.demoso1&#x27;</span>)</span><br></pre></td></tr></table></figure><p>此时就可以将 frida-server 开放到公网了;</p></li></ol><h1 id="Hook-普通方法"><a href="#Hook-普通方法" class="headerlink" title="Hook 普通方法"></a>Hook 普通方法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> UtilsClass = Java.use(<span class="string">&quot;com.kevin.app.Utils&quot;</span>);</span><br><span class="line">        UtilsClass.getCalc.implementation = <span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 打印信息</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;a:&#x27;</span> + a + <span class="string">&#x27; &#x27;</span> + <span class="string">&#x27;b:&#x27;</span> + b);</span><br><span class="line">        <span class="comment">// 调用原方法获取结果</span></span><br><span class="line">        <span class="keyword">var</span> value = <span class="built_in">this</span>.getCalc(a, b);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;result:&#x27;</span>,value);</span><br><span class="line">            <span class="comment">// 修改返回值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">123456</span>;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><h1 id="Hook-重载方法"><a href="#Hook-重载方法" class="headerlink" title="Hook 重载方法"></a>Hook 重载方法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> UtilsClass = Java.use(<span class="string">&quot;com.kevin.app.Utils&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重载无参方法</span></span><br><span class="line">        UtilsClass.test.overload().implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;hook overload no args&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.test();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 重载有参方法 - 基础数据类型</span></span><br><span class="line">UtilsClass.test.overload(<span class="string">&#x27;int&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;hook overload int args&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> myNum = <span class="number">9999</span>;</span><br><span class="line">            <span class="keyword">var</span> oriResult = <span class="built_in">this</span>.test(num);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;oriResult is :&quot;</span> + oriResult);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.test(myNum);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 重载有参方法 - 引用数据类型</span></span><br><span class="line">        UtilsClass.test.overload(<span class="string">&#x27;com.kevin.app.Money&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">money</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;hook Money args&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.test(money);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// hook 指定方法的所有重载</span></span><br><span class="line">        <span class="keyword">var</span> ClassName = Java.use(<span class="string">&quot;com.xiaojianbang.app.Utils&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> overloadsLength = ClassName.test.overloads.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; overloadsLength; i++)&#123;</span><br><span class="line">            ClassName.test.overloads[i].implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 遍历打印 arguments </span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="number">0</span>; a &lt; <span class="built_in">arguments</span>.length; a++)&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(a + <span class="string">&quot; : &quot;</span> + <span class="built_in">arguments</span>[a]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 调用原方法</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.test.apply(<span class="built_in">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><h1 id="Hook-构造方法"><a href="#Hook-构造方法" class="headerlink" title="Hook 构造方法"></a>Hook 构造方法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// hook 构造方法 $init</span></span><br><span class="line">        <span class="keyword">var</span> MoneyClass = Java.use(<span class="string">&quot;com.kevin.app.Money&quot;</span>);</span><br><span class="line">        MoneyClass.$init.overload().implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;hook Money $init&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.$init();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><h1 id="Hook-对象"><a href="#Hook-对象" class="headerlink" title="Hook 对象"></a>Hook 对象</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// hook instance</span></span><br><span class="line">        Java.choose(<span class="string">&quot;com.xiaojianbang.app.Money&quot;</span>,&#123;</span><br><span class="line">            onMatch : <span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;find it!!&quot;</span>, instance.getInfo());</span><br><span class="line">                <span class="comment">// something to do...</span></span><br><span class="line">            &#125;,</span><br><span class="line">            </span><br><span class="line">            onComplete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;compelete!!!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><h1 id="Hook-动静态成员属性"><a href="#Hook-动静态成员属性" class="headerlink" title="Hook 动静态成员属性"></a>Hook 动静态成员属性</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> MoneyClass = Java.use(<span class="string">&quot;com.xiaojianbang.app.Money&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// get static properties</span></span><br><span class="line">        <span class="comment">// need to use .value</span></span><br><span class="line">        <span class="keyword">var</span> ori_property = MoneyClass.flag.value;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;ori_property: &quot;</span>, ori_property);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// change static properties </span></span><br><span class="line">        MoneyClass.flag.value = <span class="string">&quot;change the value&quot;</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;change to : &quot;</span>, MoneyClass.flag.value);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// get dynamic properties </span></span><br><span class="line">        Java.choose(<span class="string">&quot;com.xiaojianbang.app.Money&quot;</span>,&#123;</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">                instance.num.value = <span class="number">50000</span>;</span><br><span class="line">                <span class="comment">// 当对象的成员属性和成员方法名重复时,成员属性前加`_`,进行区分</span></span><br><span class="line">                instance._name.value = <span class="string">&quot;ouyuan&quot;</span>; </span><br><span class="line">                <span class="built_in">console</span>.log(instance._name.value, instance.num.value, instance.flag.value);</span><br><span class="line">            &#125;,</span><br><span class="line">            </span><br><span class="line">            onComplete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;complete!!&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><h1 id="Hook-内部类"><a href="#Hook-内部类" class="headerlink" title="Hook 内部类"></a>Hook 内部类</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perfor(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// hook 内部类</span></span><br><span class="line">        <span class="comment">// 内部类使用$进行分隔 不使用.</span></span><br><span class="line">        <span class="keyword">var</span> InnerClass = Java.use(<span class="string">&quot;com.xiaojianbang.app.Money$innerClass&quot;</span>);</span><br><span class="line">        <span class="comment">// 重写内部类的 $init 方法</span></span><br><span class="line">        InnerClass.$init.overload(<span class="string">&quot;java.lang.String&quot;</span>,<span class="string">&quot;int&quot;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;x: &quot;</span>,x);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;y: &quot;</span>,y);</span><br><span class="line">            <span class="built_in">this</span>.$init(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><h1 id="Hook-匿名类"><a href="#Hook-匿名类" class="headerlink" title="Hook 匿名类"></a>Hook 匿名类</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口, 抽象类, 不可以被new</span></span><br><span class="line"><span class="comment">// 接口, 抽象类 要使用必须要实例化, 实例化不是通过new, 而是通过实现接口方法, 继承抽象类等方式</span></span><br><span class="line"><span class="comment">// new __接口__&#123;&#125; 可以理解成 new 了一个实现接口的匿名类, 在匿名类的内部(花括号内),实现了这个接口</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// hook 匿名类</span></span><br><span class="line">        <span class="comment">// 匿名类在 smail中以 $1, $2 等方式存在, 需要通过 java 行号去 smail 找到准确的匿名类名称 </span></span><br><span class="line">        <span class="keyword">var</span> NiMingClass = Java.use(<span class="string">&quot;com.xiaojianbang.app.MainActivity$1&quot;</span>);</span><br><span class="line">        NiMingClass.getInfo.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;kevin change 匿名类&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><h1 id="Hook-类的所有方法"><a href="#Hook-类的所有方法" class="headerlink" title="Hook 类的所有方法"></a>Hook 类的所有方法</h1><ul><li><code>Java.enumerateLoadedClasses()</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.enumerateLoadedClasses(&#123;</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span>(<span class="params">name,handle</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (name.indexOf(<span class="string">&quot;com.xiaojianbang.app.Money&quot;</span>) != -<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(name,handle);</span><br><span class="line">                    <span class="comment">// 利用反射 获取类中的所有方法</span></span><br><span class="line">                    <span class="keyword">var</span> TargetClass = Java.use(name);</span><br><span class="line">                    <span class="comment">// return Method Object List</span></span><br><span class="line">                    <span class="keyword">var</span> methodsList = TargetClass.class.getDeclaredMethods(); </span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; methodsList.length; i++)&#123;</span><br><span class="line">                        <span class="comment">// Method Objection getName()</span></span><br><span class="line">                        <span class="built_in">console</span>.log(methodsList[i].getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            </span><br><span class="line">            onComplete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;complete!!!&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Java.enumerateLoadedClassesSync()</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// return String[] class name</span></span><br><span class="line">        <span class="keyword">var</span> classList = Java.enumerateLoadedClassesSync();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; classList.length; i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> targetClass = classList[i];</span><br><span class="line">            <span class="keyword">if</span> (targetClass.indexOf(<span class="string">&quot;com.xiaojianbang.app.Money&quot;</span>) != -<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;hook the class: &quot;</span>, targetClass);</span><br><span class="line">            <span class="keyword">var</span> TargetClass = Java.use(targetClass);</span><br><span class="line">                <span class="comment">// 利用反射获取类中的所有方法</span></span><br><span class="line">            <span class="keyword">var</span> methodsList = TargetClass.class.getDeclaredMethods();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> k=<span class="number">0</span>; k &lt; methodsList.length; k++)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(methodsList[k].getName());</span><br><span class="line">            &#125;               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><h1 id="Hook-类的所有方法及重载"><a href="#Hook-类的所有方法及重载" class="headerlink" title="Hook 类的所有方法及重载"></a>Hook 类的所有方法及重载</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// hook md5 class in app</span></span><br><span class="line">        <span class="comment">// 1. iterate classes</span></span><br><span class="line">        <span class="keyword">var</span> classList = Java.enumerateLoadedClassesSync();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; classList.length; i++)&#123;</span><br><span class="line">            <span class="comment">// 筛选过滤 只遍历 MD5 下面的方法</span></span><br><span class="line">            <span class="keyword">if</span> (classList[i].indexOf(<span class="string">&quot;com.xiaojianbang.app.MD5&quot;</span>) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> className = classList[i];</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;class name is :&quot;</span>, className);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 2. get methods of the class</span></span><br><span class="line">                <span class="comment">// 返回一个 Methods对象的数组</span></span><br><span class="line">                <span class="keyword">var</span> methodsList = Java.use(className).class.getDeclaredMethods();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> k=<span class="number">0</span>; k&lt;methodsList.length; k++)&#123;                    </span><br><span class="line">                    <span class="comment">// console.log(&quot;method is :&quot;,methodsList[k],typeof(methodsList[k]));</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 3. Method object.getName() --&gt; methodName and class[methodName] to hook method</span></span><br><span class="line">                    <span class="keyword">var</span> methodName = methodsList[k].getName(); <span class="comment">// </span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// console.log(&#x27;methodName&#x27;,methodName);</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 4. use apply and arguments to implementation</span></span><br><span class="line">                    <span class="keyword">var</span> hookClass = Java.use(className);</span><br><span class="line">                    <span class="comment">// 5. overloads</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> o = <span class="number">0</span>; o&lt; hookClass[methodName].overloads.length; o++)&#123;</span><br><span class="line">                        hookClass[methodName].overloads[o].implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">var</span> a=<span class="number">0</span>; a&lt;<span class="built_in">arguments</span>.length; a++)&#123;</span><br><span class="line">                                <span class="built_in">console</span>.log(<span class="string">&#x27;argument &#x27;</span>,a,<span class="built_in">arguments</span>[a]);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">// return this[methodName].apply(this,arguments);</span></span><br><span class="line">                            <span class="keyword">return</span> <span class="string">&quot;fucking the md5&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-动态加载的-dex"><a href="#Hook-动态加载的-dex" class="headerlink" title="Hook 动态加载的 dex"></a>Hook 动态加载的 dex</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.enumerateClassLoaders(&#123;</span><br><span class="line">            onMatch : <span class="function"><span class="keyword">function</span>(<span class="params">loader</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// loadClass or findClass</span></span><br><span class="line">                    <span class="keyword">if</span> (loader.loadClass(<span class="string">&quot;com.xiaojianbang.app.Dynamic&quot;</span>))&#123;</span><br><span class="line">                        Java.classFactory.loader = loader;</span><br><span class="line">                        <span class="keyword">var</span> hookClass = Java.use(<span class="string">&quot;com.xiaojianbang.app.Dynamic&quot;</span>);</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&quot;success hook it :&quot;</span>, hookClass);</span><br><span class="line">                        <span class="comment">// something to do;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                    <span class="comment">// pass</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            </span><br><span class="line">            onComplete: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;complete !!! &quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><p>经常在加壳的 app 中, 没办法正确找到正常加载 app 类的 classloader, 可以使用以下代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Java.enumerateClassLoadersSync().forEach(<span class="function"><span class="keyword">function</span> (<span class="params">classloader</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;classloader&quot;</span>, classloader);</span><br><span class="line">                classloader.loadClass(<span class="string">&quot;com.kanxue.encrypt01.MainActivity&quot;</span>);</span><br><span class="line">                Java.classFactory.loader = classloader;</span><br><span class="line">                <span class="keyword">var</span> mainActivityClass = Java.use(<span class="string">&quot;com.kanxue.encrypt01.MainActivity&quot;</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;mainActivityClass&quot;</span>, mainActivityClass);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;error&quot;</span>, error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-主动构造数组"><a href="#Hook-主动构造数组" class="headerlink" title="Hook 主动构造数组"></a>Hook 主动构造数组</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mainArray</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> myCharList = Java.array(<span class="string">&quot;char&quot;</span>,[<span class="string">&#x27;一&#x27;</span>,<span class="string">&#x27;去&#x27;</span>,<span class="string">&#x27;二&#x27;</span>,<span class="string">&#x27;三&#x27;</span>,<span class="string">&#x27;里&#x27;</span>]);</span><br><span class="line">        <span class="keyword">var</span> myStringList = Java.array(<span class="string">&quot;java.lang.String&quot;</span>,[<span class="string">&quot;一&quot;</span>,<span class="string">&quot;二&quot;</span>,<span class="string">&quot;三&quot;</span>]);</span><br><span class="line">        <span class="keyword">var</span> ArrayClass = Java.use(<span class="string">&quot;java.util.Arrays&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(ArrayClass.toString(myCharList));</span><br><span class="line">        <span class="built_in">console</span>.log(ArrayClass.toString(myStringList));</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-cast-强制类型转换"><a href="#Hook-cast-强制类型转换" class="headerlink" title="Hook cast 强制类型转换"></a>Hook cast 强制类型转换</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java.cast() 子类可以强转成父类, 父类不能转成子类</span></span><br><span class="line"><span class="comment">// 可以使用Java.cast()将子类强转成父类, 再调用父类的动态方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">castDemo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> JuiceHandle = <span class="literal">null</span>; <span class="comment">// 用来存储内存中找到的Juice对象</span></span><br><span class="line">        <span class="keyword">var</span> WaterClass = Java.use(<span class="string">&quot;com.r0ysue.a0526printout.Water&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        Java.choose(<span class="string">&quot;com.r0ysue.a0526printout.Juice&quot;</span>,&#123;</span><br><span class="line">onComplete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">                JuiceHandle = instance;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;instance:&quot;</span>, instance);</span><br><span class="line">                <span class="comment">// 调用Juice对象的方法</span></span><br><span class="line">                <span class="built_in">console</span>.log(JuiceHandle.fillEnergy());</span><br><span class="line">                <span class="comment">// 子类Juice转父类Water 并调用父类的动态方法</span></span><br><span class="line">                <span class="keyword">var</span> WaterInstance = Java.cast(JuiceHandle,WaterClass);</span><br><span class="line">                <span class="built_in">console</span>.log(WaterInstance.still(WaterInstance));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-打印类实现的接口"><a href="#Hook-打印类实现的接口" class="headerlink" title="Hook 打印类实现的接口"></a>Hook 打印类实现的接口</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">searchInterface</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.enumerateLoadedClasses(&#123;</span><br><span class="line">            onComplete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span>(<span class="params">name,handle</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (name.indexOf(<span class="string">&quot;com.r0ysue.a0526printout&quot;</span>) &gt; -<span class="number">1</span>) &#123; <span class="comment">// 使用包名进行过滤</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;find class&quot;</span>);</span><br><span class="line">                    <span class="keyword">var</span> targetClass = Java.use(name);</span><br><span class="line">                    <span class="keyword">var</span> interfaceList = targetClass.class.getInterfaces(); <span class="comment">// 使用反射获取类实现的接口数组</span></span><br><span class="line">                    <span class="keyword">if</span> (interfaceList.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(name) <span class="comment">// 打印类名</span></span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> interfaceList) &#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(<span class="string">&quot;\t&quot;</span>, interfaceList[i].toString()); <span class="comment">// 直接打印接口名称</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-enum-枚举"><a href="#Hook-enum-枚举" class="headerlink" title="Hook enum 枚举"></a>Hook enum 枚举</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enumPrint</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.choose(<span class="string">&quot;com.r0ysue.a0526printout.Signal&quot;</span>,&#123;</span><br><span class="line">            onComplete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;find it ,&#x27;</span>,instance);</span><br><span class="line">                <span class="built_in">console</span>.log(instance.class.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-获取-context"><a href="#Hook-获取-context" class="headerlink" title="Hook 获取 context"></a>Hook 获取 context</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getContext</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> currentApplication = Java.use(<span class="string">&quot;android.app.ActivityThread&quot;</span>).currentApplication();</span><br><span class="line">        <span class="built_in">console</span>.log(currentApplication);</span><br><span class="line">        <span class="keyword">var</span> context = currentApplication.getApplicationContext();</span><br><span class="line">        <span class="built_in">console</span>.log(context);</span><br><span class="line">        <span class="keyword">var</span> packageName = context.getPackageName();</span><br><span class="line">        <span class="built_in">console</span>.log(packageName);</span><br><span class="line">        <span class="built_in">console</span>.log(currentApplication.getPackageName());</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-主动调用构造方法"><a href="#Hook-主动调用构造方法" class="headerlink" title="Hook 主动调用构造方法"></a>Hook 主动调用构造方法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> StringClass = Java.use(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> MoneyClass = Java.use(<span class="string">&quot;com.xiaojianbang.app.Money&quot;</span>);</span><br><span class="line">        MoneyClass.$init.overload(<span class="string">&#x27;java.lang.String&#x27;</span>,<span class="string">&#x27;int&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;hook Money init&#x27;</span>);</span><br><span class="line">            <span class="keyword">var</span> myX = StringClass.new(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> myY = <span class="number">9999</span>;</span><br><span class="line">            <span class="built_in">this</span>.$init(myX,myY);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><h1 id="Hook-主动调用静态方法"><a href="#Hook-主动调用静态方法" class="headerlink" title="Hook 主动调用静态方法"></a>Hook 主动调用静态方法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main_rsa</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> RSA = Java.use(<span class="string">&quot;com.xiaojianbang.app.RSA&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> StringClass = Java.use(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> base64Class = Java.use(<span class="string">&quot;android.util.Base64&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> myBytes = StringClass.$new(<span class="string">&quot;Hello World&quot;</span>).getBytes();</span><br><span class="line">        <span class="keyword">var</span> result = RSA.encrypt(myBytes);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;result is :&quot;</span>, result);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;json result is: &quot;</span>,<span class="built_in">JSON</span>.stringify(result));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;base64 result is :&quot;</span>, base64Class.encodeToString(result,<span class="number">0</span>));</span><br><span class="line">        <span class="comment">// console.log(&quot;new String is : &quot;, StringClass.$new(result)); // 加密之后的内容有很多不可见字符, 不能直接 new String()</span></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main_rsa);</span><br></pre></td></tr></table></figure><h1 id="Hook-主动调用动态方法"><a href="#Hook-主动调用动态方法" class="headerlink" title="Hook 主动调用动态方法"></a>Hook 主动调用动态方法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非静态方法的主动调用 自定义instance 并调用 非静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main_getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> instance = Java.use(<span class="string">&quot;com.xiaojianbang.app.Money&quot;</span>).$new(<span class="string">&quot;日元&quot;</span>,<span class="number">300000</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(instance.getInfo());</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历所有的对象并调用 需要进行过滤</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main_instance_getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.choose(<span class="string">&quot;com.xiaojianbang.app.Money&quot;</span>,&#123;</span><br><span class="line">            onComplete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(instance.getInfo());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-frida-和-python-交互"><a href="#Hook-frida-和-python-交互" class="headerlink" title="Hook frida 和 python 交互"></a>Hook frida 和 python 交互</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">frida 传递参数</span><br><span class="line">function main()&#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        console.log(&quot;enter perform&quot;);</span><br><span class="line">        &#x2F;&#x2F; 获取要hook的类</span><br><span class="line">        var TextViewClass &#x3D; Java.use(&quot;android.widget.TextView&quot;);</span><br><span class="line">        &#x2F;&#x2F; 要hook的方法</span><br><span class="line">        TextViewClass.setText.overload(&#39;java.lang.CharSequence&#39;).implementation &#x3D; function (ori_input) &#123;</span><br><span class="line">            console.log(&#39;enter&#39;, &#39;java.lang.CharSequence&#39;);</span><br><span class="line">            console.log(&#39;ori_input&#39;,ori_input.toString());</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 定义用于接受python传参的data</span><br><span class="line">            var receive_data;</span><br><span class="line">            &#x2F;&#x2F; 将原参数传递给python 在python中进行处理</span><br><span class="line">            send(ori_input.toString());</span><br><span class="line">            &#x2F;&#x2F; recv 从python接收传递的内容 默认传过来的是个json对象</span><br><span class="line">            recv(function (json_data) &#123;</span><br><span class="line">                console.log(&#39;data from python &#39; + json_data.data);</span><br><span class="line">                receive_data &#x3D; json_data.data;</span><br><span class="line">                console.log(typeof (receive_data));</span><br><span class="line">            &#125;).wait(); &#x2F;&#x2F;wait() 等待python处理 阻塞</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 转java字符串</span><br><span class="line">            receive_data &#x3D; Java.use(&quot;java.lang.String&quot;).$new(receive_data);</span><br><span class="line">            this.setText(receive_data);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br><span class="line">python 处理收到的参数</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">__author__ &#x3D; &quot;K&quot;</span><br><span class="line">__time__ &#x3D; &quot;2020-08-06 09:48&quot;</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">import base64</span><br><span class="line">import frida</span><br><span class="line">from loguru import logger</span><br><span class="line"></span><br><span class="line">def on_message(message,data):</span><br><span class="line">    logger.info(str(message)) # dict</span><br><span class="line">    logger.info(str(data) if data else &quot;None&quot;)</span><br><span class="line"></span><br><span class="line">    if message[&#39;type&#39;] &#x3D;&#x3D; &#39;error&#39;:</span><br><span class="line">        logger.error(&#39;error:&#39; + str(message[&#39;description&#39;]))</span><br><span class="line">        logger.error(&#39;stack: &#39; + str(message[&#39;stack&#39;]))</span><br><span class="line"></span><br><span class="line">    if message[&#39;type&#39;] &#x3D;&#x3D; &#39;send&#39;:</span><br><span class="line">        logger.info(&#39;get message [*] --&gt; &#39; + message[&#39;payload&#39;])</span><br><span class="line"></span><br><span class="line">        payload &#x3D; message[&#39;payload&#39;]</span><br><span class="line">        # 处理逻辑 sending to the server: YWFhOmJiYg&#x3D;&#x3D;</span><br><span class="line">        tmp &#x3D; payload.split(&#39;:&#39;)</span><br><span class="line">        sts &#x3D; tmp[0]</span><br><span class="line">        need_to_db64 &#x3D; tmp[1]</span><br><span class="line">        user_pass &#x3D; base64.b64decode(need_to_db64.encode()).decode()</span><br><span class="line"></span><br><span class="line">        mine_str &#x3D; &#39;admin&#39; + &#39;:&#39; + user_pass.split(&#39;:&#39;)[-1]</span><br><span class="line">        mine_b64_str &#x3D; base64.b64encode(mine_str.encode()).decode()</span><br><span class="line">        mine_b64_str &#x3D; sts + mine_b64_str</span><br><span class="line">        logger.info(mine_b64_str)</span><br><span class="line"></span><br><span class="line">        # python返回数据给js script.post</span><br><span class="line">        script.post(&#123;&#39;data&#39;:mine_b64_str&#125;)</span><br><span class="line">        logger.info(&#39;python complete&#39;)</span><br><span class="line"></span><br><span class="line">device &#x3D; frida.get_usb_device()</span><br><span class="line"># pid &#x3D; device.spawn([&#39;com.kevin.demo04&#39;])</span><br><span class="line"># time.sleep(1)</span><br><span class="line">session &#x3D; device.attach(&#39;com.kevin.demo02&#39;)</span><br><span class="line">with open(&#39;.&#x2F;hulianhutong.js&#39;,&#39;r&#39;) as f:</span><br><span class="line">    script &#x3D; session.create_script(f.read())</span><br><span class="line"></span><br><span class="line">script.on(&quot;message&quot;,on_message)</span><br><span class="line">script.load()</span><br><span class="line">input()</span><br></pre></td></tr></table></figure><h1 id="Hook-打印-char"><a href="#Hook-打印-char" class="headerlink" title="Hook 打印 char"></a>Hook 打印 char</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印char字符, 直接调用java.lang.Character toString()即可</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> CharClass = Java.use(<span class="string">&quot;java.lang.Character&quot;</span>);</span><br><span class="line">        CharClass.toString.overload(<span class="string">&quot;char&quot;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">inputChar</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="built_in">this</span>.toString(inputChar);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;inputChar, result: &quot;</span>, inputChar, result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-打印-char-数组"><a href="#Hook-打印-char-数组" class="headerlink" title="Hook 打印 char 数组"></a>Hook 打印 char 数组</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 使用 java.util.Arrays 的 toString 方法 打印 [C </span></span><br><span class="line"><span class="comment">// 2. 使用 js 的 JSON.stringify 打印 [C</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printCharArray</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ArrayClass = Java.use(<span class="string">&quot;java.util.Arrays&quot;</span>);</span><br><span class="line">        ArrayClass.toString.overload(<span class="string">&#x27;[C&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">charArray</span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 1. java.util.Arrays.toString()</span></span><br><span class="line">            <span class="keyword">var</span> result = <span class="built_in">this</span>.toString(charArray);</span><br><span class="line">            <span class="comment">// 2. javascript JSON.stringify()</span></span><br><span class="line">            <span class="keyword">var</span> result1 = <span class="built_in">JSON</span>.stringify(charArray);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;charArray, result : &#x27;</span>, charArray, result);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;charArray, result :&#x27;</span>, charArray, result1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-打印和修改-HashMap"><a href="#Hook-打印和修改-HashMap" class="headerlink" title="Hook 打印和修改 HashMap"></a>Hook 打印和修改 HashMap</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">遍历打印</span><br><span class="line">function main()&#123;</span><br><span class="line">Java.perform(function()&#123;</span><br><span class="line">        var targetClass &#x3D; Java.use(&quot;com.xiaojianbang.app.ShufferMap&quot;);</span><br><span class="line">        targetClass.show.implementation &#x3D; function(map)&#123;</span><br><span class="line">            &#x2F;&#x2F; 遍历 map</span><br><span class="line">        var result &#x3D; &quot;&quot;;</span><br><span class="line">        var it &#x3D; map.keySet().iterator();</span><br><span class="line">        while (it.hasNext())&#123;</span><br><span class="line">            var keyStr &#x3D; it.next();</span><br><span class="line">            var valueStr &#x3D; map.get(keyStr);</span><br><span class="line">                result +&#x3D; valueStr;</span><br><span class="line">        &#125;</span><br><span class="line">            console.log(&quot;result :&quot;, result);</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F; 修改 map</span><br><span class="line">            map.put(&quot;pass&quot;,&quot;fxxk&quot;);</span><br><span class="line">            map.put(&quot;code&quot;,&quot;Hello World&quot;);</span><br><span class="line">            console.log(JSON.stringify(map));</span><br><span class="line">            this.show(map);</span><br><span class="line">            </span><br><span class="line">            return this.show(map);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br><span class="line">cast打印 HashMap</span><br><span class="line">function main()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        var HashMapNode &#x3D; Java.use(&quot;java.util.HashMap$Node&quot;);</span><br><span class="line">        var targetClass &#x3D; Java.use(&quot;com.xiaojianbang.app.ShufferMap&quot;);</span><br><span class="line">        </span><br><span class="line">        var targetClass.show.implementation &#x3D; function(map)&#123;</span><br><span class="line">            var result &#x3D; &quot;&quot;;</span><br><span class="line">            var iterator &#x3D; map.entrySet().iterator();</span><br><span class="line">            while (iterator.hasNext()) &#123;</span><br><span class="line">                console.log(&quot;entry&quot;, iterator.next());</span><br><span class="line">                var entry &#x3D; Java.cast(iterator.next(), HashMapNode);</span><br><span class="line">                console.log(entry.getKey());</span><br><span class="line">                console.log(entry.getValue());</span><br><span class="line">                return +&#x3D; entry.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            console.log(&quot;result is :&quot;, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><p><code>toString()</code>打印</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> targetClass = Java.use(<span class="string">&quot;com.xiaojianbang.app.ShufferMap&quot;</span>);</span><br><span class="line">        targetClass.show.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">map</span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 直接调用 toString()</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;打印hashmap: -&gt; &quot;</span> + map.toString());</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.show.apply(<span class="built_in">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printHashMap</span>(<span class="params">flag, param_hm</span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> HashMap = Java.use(<span class="string">&#x27;java.util.HashMap&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> args_map = Java.cast(param_hm, HashMap);</span><br><span class="line">        send(flag +<span class="string">&quot;:&quot;</span> + args_map.toString());</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-打印-byte-数组"><a href="#Hook-打印-byte-数组" class="headerlink" title="Hook 打印 byte 数组"></a>Hook 打印 byte 数组</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">方法 1</span><br><span class="line">function main()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">            var StringClass &#x3D; Java.use(&quot;java.lang.String&quot;);</span><br><span class="line">            var byteArray &#x3D; StringClass.$new(&quot;Hello World&quot;).getBytes();</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F; load r0gson</span><br><span class="line">        &#x2F;&#x2F; openClassFile 返回 dex对象, dex对象.load()加载dex文件内容</span><br><span class="line">            Java.openClassFile(&quot;&#x2F;data&#x2F;local&#x2F;tmp&#x2F;r0gson.dex&quot;).load();</span><br><span class="line">            var gson &#x3D; Java.use(&quot;com.r0ysue.gson.Gson&quot;);</span><br><span class="line">            console.log(gson.$new().toJson(byteArray));</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; &#x2F;&#x2F; console byte[]</span><br><span class="line">            &#x2F;&#x2F; var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line">            &#x2F;&#x2F; console.log(ByteString.of(byteArray).hex()); &#x2F;&#x2F; byte转16进制字符串</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; &#x2F;&#x2F; 创建自定义Java数组 并打印</span><br><span class="line">            &#x2F;&#x2F; var MyArray &#x3D; Java.array(&quot;byte&quot;,[13,4,4,2]);</span><br><span class="line">            &#x2F;&#x2F; console.log(gson.$new().toJson(MyArray));</span><br><span class="line"></span><br><span class="line">            var TargetClass &#x3D; Java.use(&quot;com.xiaojianbang.app.ShufferMap&quot;);</span><br><span class="line">            TargetClass.show.implementation &#x3D;  function(map)&#123;</span><br><span class="line">                console.log(gson.$new().toJson(map));</span><br><span class="line">                return this.show(map);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br><span class="line">方法 2</span><br><span class="line">&#x2F;&#x2F; 1. 使用 java.util.Arrays.toString() 打印 [B</span><br><span class="line">&#x2F;&#x2F; 2. 使用 javascript JSON.stringify() 打印 [B</span><br><span class="line"></span><br><span class="line">function printByteArray()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        var ArrayClass &#x3D; Java.use(&quot;java.util.Arrays&quot;);</span><br><span class="line">        ArrayClass.toString.overload(&#39;[B&#39;).implementation &#x3D; function(byteArray)&#123;</span><br><span class="line">&#x2F;&#x2F; 1. 使用 java.util.Arrays.toString() 打印 [B</span><br><span class="line">            var result &#x3D; this.toString(byteArray);</span><br><span class="line">&#x2F;&#x2F; 2. 使用 javascript JSON.stringify() 打印 [B</span><br><span class="line">            var result1 &#x3D; JSON.stringify(byteArray);</span><br><span class="line">            </span><br><span class="line">            console.log(&#39;byteArray,result: &#39;, byteArray, result);</span><br><span class="line">            console.log(&#39;byteArray,result1 :&#39;, byteArray, result1);</span><br><span class="line"></span><br><span class="line">            return result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">方法 3</span><br><span class="line">function printByteArray(byteArray)&#123;</span><br><span class="line">Java.perform(function()&#123;</span><br><span class="line">var ByteString &#x3D; Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span><br><span class="line">console.log(ByteString.of(byteArray).hex())</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-打印调用栈"><a href="#Hook-打印调用栈" class="headerlink" title="Hook 打印调用栈"></a>Hook 打印调用栈</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printStacks</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;====== printStacks start ====== &quot;</span> + name + <span class="string">&quot;==============================&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// sample 1</span></span><br><span class="line">    <span class="keyword">var</span> throwable = Java.use(<span class="string">&quot;android.util.Log&quot;</span>).getStackTraceString(Java.use(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new());</span><br><span class="line">    <span class="built_in">console</span>.log(throwable);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sample 2</span></span><br><span class="line">    <span class="keyword">var</span> exception = Java.use(<span class="string">&quot;android.util.Log&quot;</span>).getStackTraceString(Java.use(<span class="string">&quot;java.lang.Exception&quot;</span>).$new());</span><br><span class="line">    <span class="built_in">console</span>.log(exception);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;====== printStacks end ======== &quot;</span> + name + <span class="string">&quot;==============================&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-gson-打印"><a href="#Hook-gson-打印" class="headerlink" title="Hook gson 打印"></a>Hook gson 打印</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> StringClass = Java.use(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> byteArray = StringClass.$new(<span class="string">&quot;Hello World&quot;</span>).getBytes();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// load r0gson</span></span><br><span class="line">        <span class="comment">// openClassFile 返回 dex对象, dex对象.load()加载dex文件内容</span></span><br><span class="line">            Java.openClassFile(<span class="string">&quot;/data/local/tmp/r0gson.dex&quot;</span>).load();</span><br><span class="line">            <span class="keyword">var</span> gson = Java.use(<span class="string">&quot;com.r0ysue.gson.Gson&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(gson.$new().toJson(byteArray));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// // console byte[]</span></span><br><span class="line">            <span class="comment">// var ByteString = Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);</span></span><br><span class="line">            <span class="comment">// console.log(ByteString.of(byteArray).hex()); // byte转16进制字符串</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// // 创建自定义Java数组 并打印</span></span><br><span class="line">            <span class="comment">// var MyArray = Java.array(&quot;byte&quot;,[13,4,4,2]);</span></span><br><span class="line">            <span class="comment">// console.log(gson.$new().toJson(MyArray));</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> TargetClass = Java.use(<span class="string">&quot;com.xiaojianbang.app.ShufferMap&quot;</span>);</span><br><span class="line">            TargetClass.show.implementation =  <span class="function"><span class="keyword">function</span>(<span class="params">map</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(gson.$new().toJson(map));</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.show(map);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br></pre></td></tr></table></figure><h1 id="Hook-打印-non-ascii-和特殊字符"><a href="#Hook-打印-non-ascii-和特殊字符" class="headerlink" title="Hook 打印 non-ascii 和特殊字符"></a>Hook 打印 non-ascii 和特殊字符</h1><p>一些特殊字符和不可见字符, 可以先通过编码再解码的方式进行 <code>hook</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ֏(<span class="keyword">int</span> x) &#123;</span><br><span class="line">        <span class="keyword">return</span> x + <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>针对上面的<code>֏</code>, 直接用<code>js</code>编码, 在通过<code>类名[js解码的方法名]</code>进行<code>implementation</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> targetClass = <span class="string">&quot;com.example.hooktest.MainActivity&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> hookCls = Java.use(targetClass);</span><br><span class="line">            <span class="keyword">var</span> methods = hookCls.class.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> methods) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(methods[i].toString());</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">encodeURIComponent</span>(methods[i].toString().replace(<span class="regexp">/^.*?\.([^\s\.\(\)]+)\(.*?$/</span>, <span class="string">&quot;$1&quot;</span>)));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            hookCls[<span class="built_in">decodeURIComponent</span>(<span class="string">&quot;%D6%8F&quot;</span>)]</span><br><span class="line">                .implementation = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;original call: fun(&quot;</span> + x + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">                    <span class="keyword">var</span> result = <span class="built_in">this</span>[<span class="built_in">decodeURIComponent</span>(<span class="string">&quot;%D6%8F&quot;</span>)](<span class="number">900</span>);</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h1 id="简易-wallbreaker-内存打印"><a href="#简易-wallbreaker-内存打印" class="headerlink" title="简易 wallbreaker 内存打印"></a>简易 wallbreaker 内存打印</h1><p>内存漫游, 打印实例的字段和方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> Class = Java.use(<span class="string">&quot;java.lang.Class&quot;</span>);</span><br><span class="line">        </span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">inspectObject</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> obj_class = Java.cast(obj.getClass(), Class);</span><br><span class="line">            <span class="keyword">var</span> fields = obj_class.getDeclaredFields();</span><br><span class="line">            <span class="keyword">var</span> methods = obj_class.getMethods();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;Inspectiong &quot;</span> + obj.getClass().toString());</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;\t Fields:&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> fields)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;\t\t&quot;</span> + fields[i].toString());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;\t Methods:&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> methods)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;\t\t&quot;</span> + methods[i].toString())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Java.choose(<span class="string">&quot;com.baidu.lbs.waimai.WaimaiActivity&quot;</span>,&#123;</span><br><span class="line">            onComplete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;complete!&quot;</span>);</span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;find instance&quot;</span>, instance);</span><br><span class="line">                inspectObject(instance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><h1 id="hook-frida-实现-runnable"><a href="#hook-frida-实现-runnable" class="headerlink" title="hook frida 实现 runnable"></a>hook frida 实现 runnable</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">// https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_SECURE</span></span><br><span class="line">   <span class="keyword">var</span> FLAG_SECURE = <span class="number">0x2000</span>;</span><br><span class="line">   <span class="keyword">var</span> Runnable = Java.use(<span class="string">&quot;java.lang.Runnable&quot;</span>);</span><br><span class="line">   <span class="keyword">var</span> DisableSecureRunnable = Java.registerClass(&#123;</span><br><span class="line">      name: <span class="string">&quot;me.bhamza.DisableSecureRunnable&quot;</span>,</span><br><span class="line">      implements: [Runnable],</span><br><span class="line">      fields: &#123;</span><br><span class="line">          activity: <span class="string">&quot;android.app.Activity&quot;</span>,</span><br><span class="line">       &#125;,</span><br><span class="line">       methods: &#123;</span><br><span class="line">          $init: [&#123;</span><br><span class="line">             returnType: <span class="string">&quot;void&quot;</span>,</span><br><span class="line">             argumentTypes: [<span class="string">&quot;android.app.Activity&quot;</span>],</span><br><span class="line">             implementation: <span class="function"><span class="keyword">function</span> (<span class="params">activity</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.activity.value = activity;</span><br><span class="line">             &#125;</span><br><span class="line">          &#125;],</span><br><span class="line">          run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">             <span class="keyword">var</span> flags = <span class="built_in">this</span>.activity.value.getWindow().getAttributes().flags.value; <span class="comment">// get current value</span></span><br><span class="line">             flags &amp;= ~FLAG_SECURE; <span class="comment">// toggle it</span></span><br><span class="line">             <span class="built_in">this</span>.activity.value.getWindow().setFlags(flags, FLAG_SECURE); <span class="comment">// disable it!</span></span><br><span class="line">             <span class="built_in">console</span>.log(<span class="string">&quot;Done disabling SECURE flag...&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    Java.choose(<span class="string">&quot;com.example.app.FlagSecureTestActivity&quot;</span>, &#123;</span><br><span class="line">       <span class="string">&quot;onMatch&quot;</span>: <span class="function"><span class="keyword">function</span> (<span class="params">instance</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> runnable = DisableSecureRunnable.$new(instance);</span><br><span class="line">          instance.runOnUiThread(runnable);</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="string">&quot;onComplete&quot;</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><h1 id="Hook-监控控件-onClick"><a href="#Hook-监控控件-onClick" class="headerlink" title="Hook 监控控件 onClick"></a>Hook 监控控件 onClick</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jclazz = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> jobj = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getObjClassName</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!jclazz) &#123;</span><br><span class="line">        <span class="keyword">var</span> jclazz = Java.use(<span class="string">&quot;java.lang.Class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!jobj) &#123;</span><br><span class="line">        <span class="keyword">var</span> jobj = Java.use(<span class="string">&quot;java.lang.Object&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jclazz.getName.call(jobj.getClass.call(obj));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">watch</span>(<span class="params">obj, mtdName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> listener_name = getObjClassName(obj);</span><br><span class="line">    <span class="keyword">var</span> target = Java.use(listener_name);</span><br><span class="line">    <span class="keyword">if</span> (!target || !mtdName <span class="keyword">in</span> target) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// send(&quot;[WatchEvent] hooking &quot; + mtdName + &quot;: &quot; + listener_name);</span></span><br><span class="line">    target[mtdName].overloads.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">overload</span>) </span>&#123;</span><br><span class="line">        overload.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//send(&quot;[WatchEvent] &quot; + mtdName + &quot;: &quot; + getObjClassName(this));</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;[WatchEvent] &quot;</span> + mtdName + <span class="string">&quot;: &quot;</span> + getObjClassName(<span class="built_in">this</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>[mtdName].apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">OnClickListener</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//以spawn启动进程的模式来attach的话</span></span><br><span class="line">        Java.use(<span class="string">&quot;android.view.View&quot;</span>).setOnClickListener.implementation = <span class="function"><span class="keyword">function</span> (<span class="params">listener</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (listener != <span class="literal">null</span>) &#123;</span><br><span class="line">                watch(listener, <span class="string">&#x27;onClick&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.setOnClickListener(listener);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果frida以attach的模式进行attch的话</span></span><br><span class="line">        Java.choose(<span class="string">&quot;android.view.View$ListenerInfo&quot;</span>, &#123;</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span> (<span class="params">instance</span>) </span>&#123;</span><br><span class="line">                instance = instance.mOnClickListener.value;</span><br><span class="line">                <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;mOnClickListener name is :&quot;</span> + getObjClassName(instance));</span><br><span class="line">                    watch(instance, <span class="string">&#x27;onClick&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            onComplete: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(OnClickListener);</span><br></pre></td></tr></table></figure><h1 id="Hook-startActivity"><a href="#Hook-startActivity" class="headerlink" title="Hook startActivity"></a>Hook startActivity</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Activity = Java.use(<span class="string">&quot;android.app.Activity&quot;</span>);</span><br><span class="line">    <span class="comment">//console.log(Object.getOwnPropertyNames(Activity));</span></span><br><span class="line">    Activity.startActivity.overload(<span class="string">&#x27;android.content.Intent&#x27;</span>).implementation=<span class="function"><span class="keyword">function</span>(<span class="params">p1</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Hooking android.app.Activity.startActivity(p1) successfully,p1=&quot;</span>+p1);</span><br><span class="line">        <span class="built_in">console</span>.log(Java.use(<span class="string">&quot;android.util.Log&quot;</span>).getStackTraceString(Java.use(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">decodeURIComponent</span>(p1.toUri(<span class="number">256</span>)));</span><br><span class="line">        <span class="built_in">this</span>.startActivity(p1);</span><br><span class="line">    &#125;</span><br><span class="line">    Activity.startActivity.overload(<span class="string">&#x27;android.content.Intent&#x27;</span>, <span class="string">&#x27;android.os.Bundle&#x27;</span>).implementation=<span class="function"><span class="keyword">function</span>(<span class="params">p1,p2</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Hooking android.app.Activity.startActivity(p1,p2) successfully,p1=&quot;</span>+p1+<span class="string">&quot;,p2=&quot;</span>+p2);</span><br><span class="line">        <span class="built_in">console</span>.log(Java.use(<span class="string">&quot;android.util.Log&quot;</span>).getStackTraceString(Java.use(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">decodeURIComponent</span>(p1.toUri(<span class="number">256</span>)));</span><br><span class="line">        <span class="built_in">this</span>.startActivity(p1,p2);</span><br><span class="line">    &#125;</span><br><span class="line">    Activity.startService.overload(<span class="string">&#x27;android.content.Intent&#x27;</span>).implementation=<span class="function"><span class="keyword">function</span>(<span class="params">p1</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Hooking android.app.Activity.startService(p1) successfully,p1=&quot;</span>+p1);</span><br><span class="line">        <span class="built_in">console</span>.log(Java.use(<span class="string">&quot;android.util.Log&quot;</span>).getStackTraceString(Java.use(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">decodeURIComponent</span>(p1.toUri(<span class="number">256</span>)));</span><br><span class="line">        <span class="built_in">this</span>.startService(p1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Hook-frida-绕过-root-检测"><a href="#Hook-frida-绕过-root-检测" class="headerlink" title="Hook frida 绕过 root 检测"></a>Hook frida 绕过 root 检测</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $ frida -l antiroot.js -U -f com.example.app --no-pause</span></span><br><span class="line"><span class="comment">// CHANGELOG by Pichaya Morimoto (p.morimoto@sth.sh): </span></span><br><span class="line"><span class="comment">//  - I added extra whitelisted items to deal with the latest versions </span></span><br><span class="line"><span class="comment">// of RootBeer/Cordova iRoot as of August 6, 2019</span></span><br><span class="line"><span class="comment">//  - The original one just fucked up (kill itself) if Magisk is installed lol</span></span><br><span class="line"><span class="comment">// Credit &amp; Originally written by: https://codeshare.frida.re/@dzonerzy/fridantiroot/</span></span><br><span class="line"><span class="comment">// If this isn&#x27;t working in the future, check console logs, rootbeer src, or libtool-checker.so</span></span><br><span class="line"></span><br><span class="line">Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> RootPackages = [<span class="string">&quot;com.noshufou.android.su&quot;</span>, <span class="string">&quot;com.noshufou.android.su.elite&quot;</span>, <span class="string">&quot;eu.chainfire.supersu&quot;</span>,</span><br><span class="line">        <span class="string">&quot;com.koushikdutta.superuser&quot;</span>, <span class="string">&quot;com.thirdparty.superuser&quot;</span>, <span class="string">&quot;com.yellowes.su&quot;</span>, <span class="string">&quot;com.koushikdutta.rommanager&quot;</span>,</span><br><span class="line">        <span class="string">&quot;com.koushikdutta.rommanager.license&quot;</span>, <span class="string">&quot;com.dimonvideo.luckypatcher&quot;</span>, <span class="string">&quot;com.chelpus.lackypatch&quot;</span>,</span><br><span class="line">        <span class="string">&quot;com.ramdroid.appquarantine&quot;</span>, <span class="string">&quot;com.ramdroid.appquarantinepro&quot;</span>, <span class="string">&quot;com.devadvance.rootcloak&quot;</span>, <span class="string">&quot;com.devadvance.rootcloakplus&quot;</span>,</span><br><span class="line">        <span class="string">&quot;de.robv.android.xposed.installer&quot;</span>, <span class="string">&quot;com.saurik.substrate&quot;</span>, <span class="string">&quot;com.zachspong.temprootremovejb&quot;</span>, <span class="string">&quot;com.amphoras.hidemyroot&quot;</span>,</span><br><span class="line">        <span class="string">&quot;com.amphoras.hidemyrootadfree&quot;</span>, <span class="string">&quot;com.formyhm.hiderootPremium&quot;</span>, <span class="string">&quot;com.formyhm.hideroot&quot;</span>, <span class="string">&quot;me.phh.superuser&quot;</span>,</span><br><span class="line">        <span class="string">&quot;eu.chainfire.supersu.pro&quot;</span>, <span class="string">&quot;com.kingouser.com&quot;</span>, <span class="string">&quot;com.android.vending.billing.InAppBillingService.COIN&quot;</span>,<span class="string">&quot;com.topjohnwu.magisk&quot;</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> RootBinaries = [<span class="string">&quot;su&quot;</span>, <span class="string">&quot;busybox&quot;</span>, <span class="string">&quot;supersu&quot;</span>, <span class="string">&quot;Superuser.apk&quot;</span>, <span class="string">&quot;KingoUser.apk&quot;</span>, <span class="string">&quot;SuperSu.apk&quot;</span>,<span class="string">&quot;magisk&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> RootProperties = &#123;</span><br><span class="line">        <span class="string">&quot;ro.build.selinux&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ro.debuggable&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;service.adb.root&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ro.secure&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> RootPropertiesKeys = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> RootProperties) RootPropertiesKeys.push(k);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> PackageManager = Java.use(<span class="string">&quot;android.app.ApplicationPackageManager&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> Runtime = Java.use(<span class="string">&#x27;java.lang.Runtime&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> NativeFile = Java.use(<span class="string">&#x27;java.io.File&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">String</span> = Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> SystemProperties = Java.use(<span class="string">&#x27;android.os.SystemProperties&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> BufferedReader = Java.use(<span class="string">&#x27;java.io.BufferedReader&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ProcessBuilder = Java.use(<span class="string">&#x27;java.lang.ProcessBuilder&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> StringBuffer = Java.use(<span class="string">&#x27;java.lang.StringBuffer&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> loaded_classes = Java.enumerateLoadedClassesSync();</span><br><span class="line"></span><br><span class="line">    send(<span class="string">&quot;Loaded &quot;</span> + loaded_classes.length + <span class="string">&quot; classes!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> useKeyInfo = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> useProcessManager = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    send(<span class="string">&quot;loaded: &quot;</span> + loaded_classes.indexOf(<span class="string">&#x27;java.lang.ProcessManager&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (loaded_classes.indexOf(<span class="string">&#x27;java.lang.ProcessManager&#x27;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//useProcessManager = true;</span></span><br><span class="line">            <span class="comment">//var ProcessManager = Java.use(&#x27;java.lang.ProcessManager&#x27;);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            send(<span class="string">&quot;ProcessManager Hook failed: &quot;</span> + err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        send(<span class="string">&quot;ProcessManager hook not loaded&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> KeyInfo = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (loaded_classes.indexOf(<span class="string">&#x27;android.security.keystore.KeyInfo&#x27;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//useKeyInfo = true;</span></span><br><span class="line">            <span class="comment">//var KeyInfo = Java.use(&#x27;android.security.keystore.KeyInfo&#x27;);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            send(<span class="string">&quot;KeyInfo Hook failed: &quot;</span> + err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        send(<span class="string">&quot;KeyInfo hook not loaded&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PackageManager.getPackageInfo.overload(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">pname, flags</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> shouldFakePackage = (RootPackages.indexOf(pname) &gt; -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (shouldFakePackage) &#123;</span><br><span class="line">            send(<span class="string">&quot;Bypass root check for package: &quot;</span> + pname);</span><br><span class="line">            pname = <span class="string">&quot;set.package.name.to.a.fake.one.so.we.can.bypass.it&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getPackageInfo.call(<span class="built_in">this</span>, pname, flags);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    NativeFile.exists.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> name = NativeFile.getName.call(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">var</span> shouldFakeReturn = (RootBinaries.indexOf(name) &gt; -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (shouldFakeReturn) &#123;</span><br><span class="line">            send(<span class="string">&quot;Bypass return value for binary: &quot;</span> + name);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.exists.call(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> exec = Runtime.exec.overload(<span class="string">&#x27;[Ljava.lang.String;&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> exec1 = Runtime.exec.overload(<span class="string">&#x27;java.lang.String&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> exec2 = Runtime.exec.overload(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;[Ljava.lang.String;&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> exec3 = Runtime.exec.overload(<span class="string">&#x27;[Ljava.lang.String;&#x27;</span>, <span class="string">&#x27;[Ljava.lang.String;&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> exec4 = Runtime.exec.overload(<span class="string">&#x27;[Ljava.lang.String;&#x27;</span>, <span class="string">&#x27;[Ljava.lang.String;&#x27;</span>, <span class="string">&#x27;java.io.File&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> exec5 = Runtime.exec.overload(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;[Ljava.lang.String;&#x27;</span>, <span class="string">&#x27;java.io.File&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    exec5.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">cmd, env, dir</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cmd.indexOf(<span class="string">&quot;getprop&quot;</span>) != -<span class="number">1</span> || cmd == <span class="string">&quot;mount&quot;</span> || cmd.indexOf(<span class="string">&quot;build.prop&quot;</span>) != -<span class="number">1</span> || cmd == <span class="string">&quot;id&quot;</span> || cmd == <span class="string">&quot;sh&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> fakeCmd = <span class="string">&quot;grep&quot;</span>;</span><br><span class="line">            send(<span class="string">&quot;Bypass &quot;</span> + cmd + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, fakeCmd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cmd == <span class="string">&quot;su&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> fakeCmd = <span class="string">&quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;</span>;</span><br><span class="line">            send(<span class="string">&quot;Bypass &quot;</span> + cmd + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, fakeCmd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cmd == <span class="string">&quot;which&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> fakeCmd = <span class="string">&quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;</span>;</span><br><span class="line">            send(<span class="string">&quot;Bypass which command&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, fakeCmd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> exec5.call(<span class="built_in">this</span>, cmd, env, dir);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    exec4.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">cmdarr, env, file</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cmdarr.length; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> tmp_cmd = cmdarr[i];</span><br><span class="line">            <span class="keyword">if</span> (tmp_cmd.indexOf(<span class="string">&quot;getprop&quot;</span>) != -<span class="number">1</span> || tmp_cmd == <span class="string">&quot;mount&quot;</span> || tmp_cmd.indexOf(<span class="string">&quot;build.prop&quot;</span>) != -<span class="number">1</span> || tmp_cmd == <span class="string">&quot;id&quot;</span> || tmp_cmd == <span class="string">&quot;sh&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> fakeCmd = <span class="string">&quot;grep&quot;</span>;</span><br><span class="line">                send(<span class="string">&quot;Bypass &quot;</span> + cmdarr + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, fakeCmd);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (tmp_cmd == <span class="string">&quot;su&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> fakeCmd = <span class="string">&quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;</span>;</span><br><span class="line">                send(<span class="string">&quot;Bypass &quot;</span> + cmdarr + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, fakeCmd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> exec4.call(<span class="built_in">this</span>, cmdarr, env, file);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    exec3.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">cmdarr, envp</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cmdarr.length; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> tmp_cmd = cmdarr[i];</span><br><span class="line">            <span class="keyword">if</span> (tmp_cmd.indexOf(<span class="string">&quot;getprop&quot;</span>) != -<span class="number">1</span> || tmp_cmd == <span class="string">&quot;mount&quot;</span> || tmp_cmd.indexOf(<span class="string">&quot;build.prop&quot;</span>) != -<span class="number">1</span> || tmp_cmd == <span class="string">&quot;id&quot;</span> || tmp_cmd == <span class="string">&quot;sh&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> fakeCmd = <span class="string">&quot;grep&quot;</span>;</span><br><span class="line">                send(<span class="string">&quot;Bypass &quot;</span> + cmdarr + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, fakeCmd);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (tmp_cmd == <span class="string">&quot;su&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> fakeCmd = <span class="string">&quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;</span>;</span><br><span class="line">                send(<span class="string">&quot;Bypass &quot;</span> + cmdarr + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, fakeCmd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> exec3.call(<span class="built_in">this</span>, cmdarr, envp);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    exec2.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">cmd, env</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cmd.indexOf(<span class="string">&quot;getprop&quot;</span>) != -<span class="number">1</span> || cmd == <span class="string">&quot;mount&quot;</span> || cmd.indexOf(<span class="string">&quot;build.prop&quot;</span>) != -<span class="number">1</span> || cmd == <span class="string">&quot;id&quot;</span> || cmd == <span class="string">&quot;sh&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> fakeCmd = <span class="string">&quot;grep&quot;</span>;</span><br><span class="line">            send(<span class="string">&quot;Bypass &quot;</span> + cmd + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, fakeCmd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cmd == <span class="string">&quot;su&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> fakeCmd = <span class="string">&quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;</span>;</span><br><span class="line">            send(<span class="string">&quot;Bypass &quot;</span> + cmd + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, fakeCmd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> exec2.call(<span class="built_in">this</span>, cmd, env);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    exec.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">cmd</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cmd.length; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> tmp_cmd = cmd[i];</span><br><span class="line">            <span class="keyword">if</span> (tmp_cmd.indexOf(<span class="string">&quot;getprop&quot;</span>) != -<span class="number">1</span> || tmp_cmd == <span class="string">&quot;mount&quot;</span> || tmp_cmd.indexOf(<span class="string">&quot;build.prop&quot;</span>) != -<span class="number">1</span> || tmp_cmd == <span class="string">&quot;id&quot;</span> || tmp_cmd == <span class="string">&quot;sh&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> fakeCmd = <span class="string">&quot;grep&quot;</span>;</span><br><span class="line">                send(<span class="string">&quot;Bypass &quot;</span> + cmd + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, fakeCmd);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (tmp_cmd == <span class="string">&quot;su&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> fakeCmd = <span class="string">&quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;</span>;</span><br><span class="line">                send(<span class="string">&quot;Bypass &quot;</span> + cmd + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, fakeCmd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> exec.call(<span class="built_in">this</span>, cmd);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    exec1.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">cmd</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cmd.indexOf(<span class="string">&quot;getprop&quot;</span>) != -<span class="number">1</span> || cmd == <span class="string">&quot;mount&quot;</span> || cmd.indexOf(<span class="string">&quot;build.prop&quot;</span>) != -<span class="number">1</span> || cmd == <span class="string">&quot;id&quot;</span> || cmd == <span class="string">&quot;sh&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> fakeCmd = <span class="string">&quot;grep&quot;</span>;</span><br><span class="line">            send(<span class="string">&quot;Bypass &quot;</span> + cmd + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, fakeCmd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cmd == <span class="string">&quot;su&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> fakeCmd = <span class="string">&quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;</span>;</span><br><span class="line">            send(<span class="string">&quot;Bypass &quot;</span> + cmd + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, fakeCmd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> exec1.call(<span class="built_in">this</span>, cmd);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span>.contains.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="string">&quot;test-keys&quot;</span>) &#123;</span><br><span class="line">            send(<span class="string">&quot;Bypass test-keys check&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.contains.call(<span class="built_in">this</span>, name);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> get = SystemProperties.get.overload(<span class="string">&#x27;java.lang.String&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    get.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (RootPropertiesKeys.indexOf(name) != -<span class="number">1</span>) &#123;</span><br><span class="line">            send(<span class="string">&quot;Bypass &quot;</span> + name);</span><br><span class="line">            <span class="keyword">return</span> RootProperties[name];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.get.call(<span class="built_in">this</span>, name);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Interceptor.attach(Module.findExportByName(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;fopen&quot;</span>), &#123;</span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> path1 = Memory.readCString(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">var</span> path = path1.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> executable = path[path.length - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">var</span> shouldFakeReturn = (RootBinaries.indexOf(executable) &gt; -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> (shouldFakeReturn) &#123;</span><br><span class="line">                Memory.writeUtf8String(args[<span class="number">0</span>], <span class="string">&quot;/ggezxxx&quot;</span>);</span><br><span class="line">                send(<span class="string">&quot;Bypass native fopen &gt;&gt; &quot;</span>+path1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    Interceptor.attach(Module.findExportByName(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;fopen&quot;</span>), &#123;</span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> path1 = Memory.readCString(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">var</span> path = path1.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> executable = path[path.length - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">var</span> shouldFakeReturn = (RootBinaries.indexOf(executable) &gt; -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> (shouldFakeReturn) &#123;</span><br><span class="line">                Memory.writeUtf8String(args[<span class="number">0</span>], <span class="string">&quot;/ggezxxx&quot;</span>);</span><br><span class="line">                send(<span class="string">&quot;Bypass native fopen &gt;&gt; &quot;</span>+path1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    Interceptor.attach(Module.findExportByName(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;system&quot;</span>), &#123;</span><br><span class="line">        onEnter: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> cmd = Memory.readCString(args[<span class="number">0</span>]);</span><br><span class="line">            send(<span class="string">&quot;SYSTEM CMD: &quot;</span> + cmd);</span><br><span class="line">            <span class="keyword">if</span> (cmd.indexOf(<span class="string">&quot;getprop&quot;</span>) != -<span class="number">1</span> || cmd == <span class="string">&quot;mount&quot;</span> || cmd.indexOf(<span class="string">&quot;build.prop&quot;</span>) != -<span class="number">1</span> || cmd == <span class="string">&quot;id&quot;</span>) &#123;</span><br><span class="line">                send(<span class="string">&quot;Bypass native system: &quot;</span> + cmd);</span><br><span class="line">                Memory.writeUtf8String(args[<span class="number">0</span>], <span class="string">&quot;grep&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cmd == <span class="string">&quot;su&quot;</span>) &#123;</span><br><span class="line">                send(<span class="string">&quot;Bypass native system: &quot;</span> + cmd);</span><br><span class="line">                Memory.writeUtf8String(args[<span class="number">0</span>], <span class="string">&quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: <span class="function"><span class="keyword">function</span>(<span class="params">retval</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    TO IMPLEMENT:</span></span><br><span class="line"><span class="comment">    Exec Family</span></span><br><span class="line"><span class="comment">    int execl(const char *path, const char *arg0, ..., const char *argn, (char *)0);</span></span><br><span class="line"><span class="comment">    int execle(const char *path, const char *arg0, ..., const char *argn, (char *)0, char *const envp[]);</span></span><br><span class="line"><span class="comment">    int execlp(const char *file, const char *arg0, ..., const char *argn, (char *)0);</span></span><br><span class="line"><span class="comment">    int execlpe(const char *file, const char *arg0, ..., const char *argn, (char *)0, char *const envp[]);</span></span><br><span class="line"><span class="comment">    int execv(const char *path, char *const argv[]);</span></span><br><span class="line"><span class="comment">    int execve(const char *path, char *const argv[], char *const envp[]);</span></span><br><span class="line"><span class="comment">    int execvp(const char *file, char *const argv[]);</span></span><br><span class="line"><span class="comment">    int execvpe(const char *file, char *const argv[], char *const envp[]);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    BufferedReader.readLine.overload().implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> text = <span class="built_in">this</span>.readLine.call(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (text === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// just pass , i know it&#x27;s ugly as hell but test != null won&#x27;t work :(</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> shouldFakeRead = (text.indexOf(<span class="string">&quot;ro.build.tags=test-keys&quot;</span>) &gt; -<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (shouldFakeRead) &#123;</span><br><span class="line">                send(<span class="string">&quot;Bypass build.prop file read&quot;</span>);</span><br><span class="line">                text = text.replace(<span class="string">&quot;ro.build.tags=test-keys&quot;</span>, <span class="string">&quot;ro.build.tags=release-keys&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> text;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> executeCommand = ProcessBuilder.command.overload(<span class="string">&#x27;java.util.List&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    ProcessBuilder.start.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cmd = <span class="built_in">this</span>.command.call(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">var</span> shouldModifyCommand = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cmd.size(); i = i + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> tmp_cmd = cmd.get(i).toString();</span><br><span class="line">            <span class="keyword">if</span> (tmp_cmd.indexOf(<span class="string">&quot;getprop&quot;</span>) != -<span class="number">1</span> || tmp_cmd.indexOf(<span class="string">&quot;mount&quot;</span>) != -<span class="number">1</span> || tmp_cmd.indexOf(<span class="string">&quot;build.prop&quot;</span>) != -<span class="number">1</span> || tmp_cmd.indexOf(<span class="string">&quot;id&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                shouldModifyCommand = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (shouldModifyCommand) &#123;</span><br><span class="line">            send(<span class="string">&quot;Bypass ProcessBuilder &quot;</span> + cmd);</span><br><span class="line">            <span class="built_in">this</span>.command.call(<span class="built_in">this</span>, [<span class="string">&quot;grep&quot;</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.start.call(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cmd.indexOf(<span class="string">&quot;su&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">            send(<span class="string">&quot;Bypass ProcessBuilder &quot;</span> + cmd);</span><br><span class="line">            <span class="built_in">this</span>.command.call(<span class="built_in">this</span>, [<span class="string">&quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.start.call(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.start.call(<span class="built_in">this</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (useProcessManager) &#123;</span><br><span class="line">        <span class="keyword">var</span> ProcManExec = ProcessManager.exec.overload(<span class="string">&#x27;[Ljava.lang.String;&#x27;</span>, <span class="string">&#x27;[Ljava.lang.String;&#x27;</span>, <span class="string">&#x27;java.io.File&#x27;</span>, <span class="string">&#x27;boolean&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> ProcManExecVariant = ProcessManager.exec.overload(<span class="string">&#x27;[Ljava.lang.String;&#x27;</span>, <span class="string">&#x27;[Ljava.lang.String;&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.io.FileDescriptor&#x27;</span>, <span class="string">&#x27;java.io.FileDescriptor&#x27;</span>, <span class="string">&#x27;java.io.FileDescriptor&#x27;</span>, <span class="string">&#x27;boolean&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        ProcManExec.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">cmd, env, workdir, redirectstderr</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> fake_cmd = cmd;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cmd.length; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> tmp_cmd = cmd[i];</span><br><span class="line">                <span class="keyword">if</span> (tmp_cmd.indexOf(<span class="string">&quot;getprop&quot;</span>) != -<span class="number">1</span> || tmp_cmd == <span class="string">&quot;mount&quot;</span> || tmp_cmd.indexOf(<span class="string">&quot;build.prop&quot;</span>) != -<span class="number">1</span> || tmp_cmd == <span class="string">&quot;id&quot;</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> fake_cmd = [<span class="string">&quot;grep&quot;</span>];</span><br><span class="line">                    send(<span class="string">&quot;Bypass &quot;</span> + cmdarr + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (tmp_cmd == <span class="string">&quot;su&quot;</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> fake_cmd = [<span class="string">&quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;</span>];</span><br><span class="line">                    send(<span class="string">&quot;Bypass &quot;</span> + cmdarr + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ProcManExec.call(<span class="built_in">this</span>, fake_cmd, env, workdir, redirectstderr);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ProcManExecVariant.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">cmd, env, directory, stdin, stdout, stderr, redirect</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> fake_cmd = cmd;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cmd.length; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> tmp_cmd = cmd[i];</span><br><span class="line">                <span class="keyword">if</span> (tmp_cmd.indexOf(<span class="string">&quot;getprop&quot;</span>) != -<span class="number">1</span> || tmp_cmd == <span class="string">&quot;mount&quot;</span> || tmp_cmd.indexOf(<span class="string">&quot;build.prop&quot;</span>) != -<span class="number">1</span> || tmp_cmd == <span class="string">&quot;id&quot;</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> fake_cmd = [<span class="string">&quot;grep&quot;</span>];</span><br><span class="line">                    send(<span class="string">&quot;Bypass &quot;</span> + cmdarr + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (tmp_cmd == <span class="string">&quot;su&quot;</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> fake_cmd = [<span class="string">&quot;justafakecommandthatcannotexistsusingthisshouldthowanexceptionwheneversuiscalled&quot;</span>];</span><br><span class="line">                    send(<span class="string">&quot;Bypass &quot;</span> + cmdarr + <span class="string">&quot; command&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ProcManExecVariant.call(<span class="built_in">this</span>, fake_cmd, env, directory, stdin, stdout, stderr, redirect);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (useKeyInfo) &#123;</span><br><span class="line">        KeyInfo.isInsideSecureHardware.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            send(<span class="string">&quot;Bypass isInsideSecureHardware&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Hook-frida-强制在主线程运行"><a href="#Hook-frida-强制在主线程运行" class="headerlink" title="Hook frida 强制在主线程运行"></a>Hook frida 强制在主线程运行</h1><p>针对使用一些方法的时候出现报错 <code>on a thread that has not called Looper.prepare()</code></p><p>强制让代码运行在主线程中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> Toast = Java.use(<span class="string">&#x27;android.widget.Toast&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> currentApplication = Java.use(<span class="string">&#x27;android.app.ActivityThread&#x27;</span>).currentApplication(); </span><br><span class="line">  <span class="keyword">var</span> context = currentApplication.getApplicationContext();</span><br><span class="line"></span><br><span class="line">  Java.scheduleOnMainThread(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Toast.makeText(context, <span class="string">&quot;Hello World&quot;</span>, Toast.LENGTH_LONG.value).show();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Hook-frida-指定方法中过滤打印"><a href="#Hook-frida-指定方法中过滤打印" class="headerlink" title="Hook frida 指定方法中过滤打印"></a>Hook frida 指定方法中过滤打印</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_lnf</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> activate = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> hashmapClass = Java.use(<span class="string">&quot;java.util.HashMap&quot;</span>);</span><br><span class="line">        hashmapClass.put.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (activate)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;key:&quot;</span>, key, <span class="string">&quot;value:&quot;</span>, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.put(key,value);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> lnfClazz = Java.use(<span class="string">&quot;tb.lnf&quot;</span>);</span><br><span class="line">        lnfClazz.a.overload(<span class="string">&#x27;java.util.HashMap&#x27;</span>, <span class="string">&#x27;java.util.HashMap&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;boolean&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">hashmap, hashmap2, str, str2, z</span>) </span>&#123;</span><br><span class="line">                printHashMap(<span class="string">&quot;hashmap&quot;</span>, hashmap);</span><br><span class="line">                printHashMap(<span class="string">&quot;hashmap2&quot;</span>, hashmap2);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;str&quot;</span>, str);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;str2&quot;</span>, str2);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;boolean&quot;</span>, z);</span><br><span class="line">                activate = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">var</span> result = <span class="built_in">this</span>.a(hashmap, hashmap2, str, str2, z);</span><br><span class="line">                activate = <span class="literal">false</span></span><br><span class="line">                printHashMap(<span class="string">&quot;result&quot;</span>, result);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-禁止-app-退出"><a href="#Hook-禁止-app-退出" class="headerlink" title="Hook 禁止 app 退出"></a>Hook 禁止 app 退出</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hookExit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;[*] Starting hook exit&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> exitClass = Java.use(<span class="string">&quot;java.lang.System&quot;</span>);</span><br><span class="line">        exitClass.exit.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;[*] System.exit.called&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;[*] hooking calls to System.exit&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(hookExit);</span><br></pre></td></tr></table></figure><h1 id="Hook-修改设备参数"><a href="#Hook-修改设备参数" class="headerlink" title="Hook 修改设备参数"></a>Hook 修改设备参数</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// frida hook 修改设备参数</span></span><br><span class="line">Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> TelephonyManager = Java.use(<span class="string">&quot;android.telephony.TelephonyManager&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//IMEI hook</span></span><br><span class="line">    TelephonyManager.getDeviceId.overload().implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">&quot;[*]Called - getDeviceId()&quot;</span>);</span><br><span class="line">               <span class="keyword">var</span> temp = <span class="built_in">this</span>.getDeviceId();</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">&quot;real IMEI: &quot;</span>+temp);</span><br><span class="line">               <span class="keyword">return</span> <span class="string">&quot;867979021642856&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// muti IMEI</span></span><br><span class="line">    TelephonyManager.getDeviceId.overload(<span class="string">&#x27;int&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">p</span>) </span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">&quot;[*]Called - getDeviceId(int) param is&quot;</span>+p);</span><br><span class="line">               <span class="keyword">var</span> temp = <span class="built_in">this</span>.getDeviceId(p);</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">&quot;real IMEI &quot;</span>+p+<span class="string">&quot;: &quot;</span>+temp);</span><br><span class="line">               <span class="keyword">return</span> <span class="string">&quot;867979021642856&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//IMSI hook</span></span><br><span class="line">TelephonyManager.getSimSerialNumber.overload().implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">&quot;[*]Called - getSimSerialNumber(String)&quot;</span>);</span><br><span class="line">               <span class="keyword">var</span> temp = <span class="built_in">this</span>.getSimSerialNumber();</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">&quot;real IMSI: &quot;</span>+temp);</span><br><span class="line">               <span class="keyword">return</span> <span class="string">&quot;123456789&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//ANDOID_ID hook</span></span><br><span class="line">    <span class="keyword">var</span> Secure = Java.use(<span class="string">&quot;android.provider.Settings$Secure&quot;</span>);</span><br><span class="line">    Secure.getString.implementation = <span class="function"><span class="keyword">function</span> (<span class="params">p1,p2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p2.indexOf(<span class="string">&quot;android_id&quot;</span>)&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">this</span>.getString(p1,p2);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;[*]Called - get android_ID, param is:&quot;</span>+p2);</span><br><span class="line">    <span class="keyword">var</span> temp = <span class="built_in">this</span>.getString(p1,p2);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;real Android_ID: &quot;</span>+temp);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;844de23bfcf93801&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//android的hidden API，需要通过反射调用</span></span><br><span class="line">    <span class="keyword">var</span> SP = Java.use(<span class="string">&quot;android.os.SystemProperties&quot;</span>);</span><br><span class="line">    SP.get.overload(<span class="string">&#x27;java.lang.String&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">p1</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = <span class="built_in">this</span>.get(p1);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;[*]&quot;</span>+p1+<span class="string">&quot; : &quot;</span>+tmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    SP.get.overload(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">p1,p2</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> tmp = <span class="built_in">this</span>.get(p1,p2)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;[*]&quot;</span>+p1+<span class="string">&quot;,&quot;</span>+p2+<span class="string">&quot; : &quot;</span>+tmp);</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// hook MAC</span></span><br><span class="line">    <span class="keyword">var</span> wifi = Java.use(<span class="string">&quot;android.net.wifi.WifiInfo&quot;</span>);</span><br><span class="line">    wifi.getMacAddress.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = <span class="built_in">this</span>.getMacAddress();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;[*]real MAC: &quot;</span>+tmp);</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Hook-打印请求调用栈"><a href="#Hook-打印请求调用栈" class="headerlink" title="Hook 打印请求调用栈"></a>Hook 打印请求调用栈</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> class_Socket = Java.use(<span class="string">&quot;java.net.Socket&quot;</span>);</span><br><span class="line">class_Socket.getOutputStream.overload().implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    send(<span class="string">&quot;getOutputSteam&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> result = <span class="built_in">this</span>.getOutputStream();</span><br><span class="line">    <span class="keyword">var</span> bt = Java.use(<span class="string">&quot;android.util.Log&quot;</span>).getStackTraceString(</span><br><span class="line">        Java.use(<span class="string">&quot;java.lang.Exception&quot;</span>).$new();</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Backtrace:&quot;</span> + bt);</span><br><span class="line">    send(result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hook-UI-thread-注入"><a href="#Hook-UI-thread-注入" class="headerlink" title="Hook UI thread 注入"></a>Hook UI thread 注入</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> Toast = Java.use(<span class="string">&#x27;android.widget.Toast&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> currentApplication = Java.use(<span class="string">&#x27;android.app.ActivityThread&#x27;</span>).currentApplication(); </span><br><span class="line">  <span class="keyword">var</span> context = currentApplication.getApplicationContext();</span><br><span class="line"></span><br><span class="line">  Java.scheduleOnMainThread(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Toast.makeText(context, <span class="string">&quot;Hello World&quot;</span>, Toast.LENGTH_LONG.value).show();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="常用打印转换"><a href="#常用打印转换" class="headerlink" title="常用打印转换"></a>常用打印转换</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//工具相关函数</span></span><br><span class="line"><span class="keyword">var</span> base64EncodeChars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span>,</span><br><span class="line">    base64DecodeChars = <span class="keyword">new</span> <span class="built_in">Array</span>((-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), <span class="number">62</span>, (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), <span class="number">63</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>), (-<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringToBase64</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r, a, c, h, o, t;</span><br><span class="line">    <span class="keyword">for</span> (c = e.length, a = <span class="number">0</span>, r = <span class="string">&#x27;&#x27;</span>; a &lt; c;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (h = <span class="number">255</span> &amp; e.charCodeAt(a++), a == c) &#123;</span><br><span class="line">            r += base64EncodeChars.charAt(h &gt;&gt; <span class="number">2</span>),</span><br><span class="line">                r += base64EncodeChars.charAt((<span class="number">3</span> &amp; h) &lt;&lt; <span class="number">4</span>),</span><br><span class="line">                r += <span class="string">&#x27;==&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o = e.charCodeAt(a++), a == c) &#123;</span><br><span class="line">            r += base64EncodeChars.charAt(h &gt;&gt; <span class="number">2</span>),</span><br><span class="line">                r += base64EncodeChars.charAt((<span class="number">3</span> &amp; h) &lt;&lt; <span class="number">4</span> | (<span class="number">240</span> &amp; o) &gt;&gt; <span class="number">4</span>),</span><br><span class="line">                r += base64EncodeChars.charAt((<span class="number">15</span> &amp; o) &lt;&lt; <span class="number">2</span>),</span><br><span class="line">                r += <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        t = e.charCodeAt(a++),</span><br><span class="line">            r += base64EncodeChars.charAt(h &gt;&gt; <span class="number">2</span>),</span><br><span class="line">            r += base64EncodeChars.charAt((<span class="number">3</span> &amp; h) &lt;&lt; <span class="number">4</span> | (<span class="number">240</span> &amp; o) &gt;&gt; <span class="number">4</span>),</span><br><span class="line">            r += base64EncodeChars.charAt((<span class="number">15</span> &amp; o) &lt;&lt; <span class="number">2</span> | (<span class="number">192</span> &amp; t) &gt;&gt; <span class="number">6</span>),</span><br><span class="line">            r += base64EncodeChars.charAt(<span class="number">63</span> &amp; t)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64ToString</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r, a, c, h, o, t, d;</span><br><span class="line">    <span class="keyword">for</span> (t = e.length, o = <span class="number">0</span>, d = <span class="string">&#x27;&#x27;</span>; o &lt; t;) &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            r = base64DecodeChars[<span class="number">255</span> &amp; e.charCodeAt(o++)];</span><br><span class="line">        <span class="keyword">while</span> (o &lt; t &amp;&amp; r == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (r == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            a = base64DecodeChars[<span class="number">255</span> &amp; e.charCodeAt(o++)];</span><br><span class="line">        <span class="keyword">while</span> (o &lt; t &amp;&amp; a == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (a == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        d += <span class="built_in">String</span>.fromCharCode(r &lt;&lt; <span class="number">2</span> | (<span class="number">48</span> &amp; a) &gt;&gt; <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (c = <span class="number">255</span> &amp; e.charCodeAt(o++), <span class="number">61</span> == c)</span><br><span class="line">                <span class="keyword">return</span> d;</span><br><span class="line">            c = base64DecodeChars[c]</span><br><span class="line">        &#125; <span class="keyword">while</span> (o &lt; t &amp;&amp; c == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (c == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        d += <span class="built_in">String</span>.fromCharCode((<span class="number">15</span> &amp; a) &lt;&lt; <span class="number">4</span> | (<span class="number">60</span> &amp; c) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (h = <span class="number">255</span> &amp; e.charCodeAt(o++), <span class="number">61</span> == h)</span><br><span class="line">                <span class="keyword">return</span> d;</span><br><span class="line">            h = base64DecodeChars[h]</span><br><span class="line">        &#125; <span class="keyword">while</span> (o &lt; t &amp;&amp; h == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (h == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        d += <span class="built_in">String</span>.fromCharCode((<span class="number">3</span> &amp; c) &lt;&lt; <span class="number">6</span> | h)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hexToBase64</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> base64Encode(<span class="built_in">String</span>.fromCharCode.apply(<span class="literal">null</span>, str.replace(<span class="regexp">/\r|\n/g</span>, <span class="string">&quot;&quot;</span>).replace(<span class="regexp">/([\da-fA-F]&#123;2&#125;) ?/g</span>, <span class="string">&quot;0x$1 &quot;</span>).replace(<span class="regexp">/ +$/</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot; &quot;</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64ToHex</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, bin = base64Decode(str.replace(<span class="regexp">/[ \r\n]+$/</span>, <span class="string">&quot;&quot;</span>)), hex = []; i &lt; bin.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = bin.charCodeAt(i).toString(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">if</span> (tmp.length === <span class="number">1</span>)</span><br><span class="line">            tmp = <span class="string">&quot;0&quot;</span> + tmp;</span><br><span class="line">        hex[hex.length] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hex.join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hexToBytes</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> len = str.length;</span><br><span class="line">    <span class="keyword">if</span> (len % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    len /= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> hexA = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> s = str.substr(pos, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">var</span> v = <span class="built_in">parseInt</span>(s, <span class="number">16</span>);</span><br><span class="line">        hexA.push(v);</span><br><span class="line">        pos += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hexA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bytesToHex</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> k, j;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        k = arr[i];</span><br><span class="line">        j = k;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            j = k + <span class="number">256</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j &lt; <span class="number">16</span>) &#123;</span><br><span class="line">            str += <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        str += j.toString(<span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringToHex</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> val = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (val == <span class="string">&quot;&quot;</span>)</span><br><span class="line">            val = str.charCodeAt(i).toString(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            val += str.charCodeAt(i).toString(<span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringToBytes</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ch, st, re = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        ch = str.charCodeAt(i);</span><br><span class="line">        st = [];</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            st.push(ch &amp; <span class="number">0xFF</span>);</span><br><span class="line">            ch = ch &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (ch);</span><br><span class="line">        re = re.concat(st.reverse());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将byte[]转成String的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bytesToString</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(arr);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">        str += <span class="built_in">String</span>.fromCharCode(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bytesToBase64</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r, a, c, h, o, t;</span><br><span class="line">    <span class="keyword">for</span> (c = e.length, a = <span class="number">0</span>, r = <span class="string">&#x27;&#x27;</span>; a &lt; c;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (h = <span class="number">255</span> &amp; e[a++], a == c) &#123;</span><br><span class="line">            r += base64EncodeChars.charAt(h &gt;&gt; <span class="number">2</span>),</span><br><span class="line">                r += base64EncodeChars.charAt((<span class="number">3</span> &amp; h) &lt;&lt; <span class="number">4</span>),</span><br><span class="line">                r += <span class="string">&#x27;==&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o = e[a++], a == c) &#123;</span><br><span class="line">            r += base64EncodeChars.charAt(h &gt;&gt; <span class="number">2</span>),</span><br><span class="line">                r += base64EncodeChars.charAt((<span class="number">3</span> &amp; h) &lt;&lt; <span class="number">4</span> | (<span class="number">240</span> &amp; o) &gt;&gt; <span class="number">4</span>),</span><br><span class="line">                r += base64EncodeChars.charAt((<span class="number">15</span> &amp; o) &lt;&lt; <span class="number">2</span>),</span><br><span class="line">                r += <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        t = e[a++],</span><br><span class="line">            r += base64EncodeChars.charAt(h &gt;&gt; <span class="number">2</span>),</span><br><span class="line">            r += base64EncodeChars.charAt((<span class="number">3</span> &amp; h) &lt;&lt; <span class="number">4</span> | (<span class="number">240</span> &amp; o) &gt;&gt; <span class="number">4</span>),</span><br><span class="line">            r += base64EncodeChars.charAt((<span class="number">15</span> &amp; o) &lt;&lt; <span class="number">2</span> | (<span class="number">192</span> &amp; t) &gt;&gt; <span class="number">6</span>),</span><br><span class="line">            r += base64EncodeChars.charAt(<span class="number">63</span> &amp; t)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64ToBytes</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r, a, c, h, o, t, d;</span><br><span class="line">    <span class="keyword">for</span> (t = e.length, o = <span class="number">0</span>, d = []; o &lt; t;) &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            r = base64DecodeChars[<span class="number">255</span> &amp; e.charCodeAt(o++)];</span><br><span class="line">        <span class="keyword">while</span> (o &lt; t &amp;&amp; r == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (r == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            a = base64DecodeChars[<span class="number">255</span> &amp; e.charCodeAt(o++)];</span><br><span class="line">        <span class="keyword">while</span> (o &lt; t &amp;&amp; a == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (a == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        d.push(r &lt;&lt; <span class="number">2</span> | (<span class="number">48</span> &amp; a) &gt;&gt; <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (c = <span class="number">255</span> &amp; e.charCodeAt(o++), <span class="number">61</span> == c)</span><br><span class="line">                <span class="keyword">return</span> d;</span><br><span class="line">            c = base64DecodeChars[c]</span><br><span class="line">        &#125; <span class="keyword">while</span> (o &lt; t &amp;&amp; c == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (c == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        d.push((<span class="number">15</span> &amp; a) &lt;&lt; <span class="number">4</span> | (<span class="number">60</span> &amp; c) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (h = <span class="number">255</span> &amp; e.charCodeAt(o++), <span class="number">61</span> == h)</span><br><span class="line">                <span class="keyword">return</span> d;</span><br><span class="line">            h = base64DecodeChars[h]</span><br><span class="line">        &#125; <span class="keyword">while</span> (o &lt; t &amp;&amp; h == -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (h == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        d.push((<span class="number">3</span> &amp; c) &lt;&lt; <span class="number">6</span> | h)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> frida </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
